== Getting Started ==
Before you dive into ImgLib2 for
real, you should know how to create and display an image, so that you can
visually enjoy the fruits of your labor.

=== Creating and Displaying an Image ===
The following piece of code creates and displays an 400x320 8bit gray-level image:
<source lang="java">
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.display.imagej.ImageJFunctions;
import net.imglib2.type.numeric.integer.UnsignedByteType;

public class CreateAndDisplay
{
	public static void main( final String[] args )
	{
		final Img< UnsignedByteType > img = new ArrayImgFactory< UnsignedByteType >()
			.create( new long[] { 400, 320 }, new UnsignedByteType() );
		ImageJFunctions.show( img );
	}
}
</source>

When you run this example, you should get a window showing a black 400x320 image.
In lines ''010-011'', the image is created. In line ''012'' it is displayed.
Now, that is one awfully long line just to create a black image.  Let's break it down into smaller parts.
<source lang="java">
final ImgFactory< UnsignedByteType > factory = new ArrayImgFactory< UnsignedByteType >();
final long[] dimensions = new long[] { 400, 320 };
final UnsignedByteType type = new UnsignedByteType();
final Img< UnsignedByteType > img = factory.create( dimensions, type );
</source>

Pixel images in ImgLib2 are created using an [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/img/ImgFactory.html ImgFactory].
There are different ImgFactories, that create pixel containers with different memory layouts.
Here, we create an [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/img/array/ArrayImgFactory.html ArrayImgFactory].
This factory creates in containers that map to a single flat Java array.
<source lang="java">
final ImgFactory< UnsignedByteType > factory
		= new ArrayImgFactory< UnsignedByteType >();
</source>
The type parameter of the factory that specifies the value type of the image we want to create.
We want to create a 8-bit gray-level image, thus we use [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/type/numeric/integer/UnsignedByteType.html UnsignedByteType].

Next we create a '''long[]''' array that specifies the image size in every dimension.
The length of the array specifies the number of dimensions.
Here, we state that we want to create 400x320 2D image.
<source lang="java">
final long[] dimensions = new long[] { 400, 320 };
</source>

Finally, we need to provide a type variable, that is a variable having the type that is to be stored in the image.
This must match the generic type parameter of the '''ImgFactory'''.
Thus we create an '''UnsignedByteType'''.
<source lang="java">
final UnsignedByteType type = new UnsignedByteType();
</source>

Then we can create the image, using the factory, dimensions, and type variable.
<source lang="java">
final Img< UnsignedByteType > img = factory.create( dimensions, type );
</source>
We store the result of the '''create()''' method in an [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/img/Img.html Img] variable.
'''Img''' is a convenience interface that gathers properties of pixel image containers
such as having a number of dimensions, being able to iterate it's pixels, etc.

This image is then displayed using
<source lang="java">
ImageJFunctions.show( img );
</source>
[http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/img/display/imagej/ImageJFunctions.html ImageJFunctions] provides convenience methods
to wrap ImgLib2 constructs into ImageJ containers and display them.
It works with 2D and 3D images and can handle most of the pixel types supported by ImgLib2.
ImgLib2 provides more sophisticated ways of getting image data to your screen, but we will not go into that now.
As a rule of thumb, if you have something remotely resembling a pixel grid, usually you can '''ImageJFunctions.show()''' it.

=== Opening And Displaying Image Files ===
You can open image files with [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/io/ImgOpener.html ImgOpener] which is using [http://loci.wisc.edu/software/bio-formats LOCI Bio-Formats].
The following opens and displays an image file.
<source lang="java">
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.display.imagej.ImageJFunctions;
import net.imglib2.io.ImgIOException;
import net.imglib2.io.ImgOpener;
import net.imglib2.type.numeric.integer.UnsignedByteType;

public class OpenAndDisplay
{
	public static void main( final String[] args )
	{
		try
		{
			final Img< UnsignedByteType > img = new ImgOpener().openImg( "graffiti.tif",
				new ArrayImgFactory< UnsignedByteType >(), new UnsignedByteType() );
			ImageJFunctions.show( img );
		}
		catch ( final ImgIOException e )
		{
			e.printStackTrace();
		}
	}
}
</source>
The image is loaded in lines ''014-015''. Lets look the steps in more detail.
We create an [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/io/ImgOpener.html ImgOpener]
<source lang="java">
final ImgOpener opener = new ImgOpener();
</source>
When opening an image, we can specify which memory layout to use and as which value type we want to load the image.
We want to use the '''ArrayImg''' layout again, and we want to have '''UnsignedByteType''' values again.

Similar to the [[ImgLib2 Documentation#Opening And Displaying Image Files | above example]] we need an '''ImgFactory''' and an instance of the value type.
<source lang="java">
final ImgFactory< UnsignedByteType > factory = new ArrayImgFactory< UnsignedByteType >();
final UnsignedByteType type = new UnsignedByteType();
</source>

Then we can use the '''openImg()''' method, giving a filename, '''ImgFactory''', and type instance.
<source lang="java">
final Img< UnsignedByteType > img = opener.openImg( "graffiti.tif", factory, type );
</source>
If there is a problem reading the image, '''openImg()''' throws an [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/io/ImgIOException.html ImgIOException].
If all goes well, we store the result in an [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/img/Img.html Img] variable for convenience.
(Actually the result is an [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/img/ImgPlus.html ImgPlus] wrapping an '''ArrayImg'''.)

=== Notes ===
* Note that '''Img''' is just convenience interface.  When you get more proficient with ImgLib2 you will find yourself using it less and less.  You will either be more concrete or more general than that.  In the above example, we could be more concrete -- the result of the '''ArrayImgFactory< UnsignedByteType >.create()''' is actually an '''ArrayImg< UnsignedByteType, ByteArray >'''.  In algorithm implementations, you want to be as generic as possible to not constrain yourself to specific image types.  You will specify only the super-interfaces of '''Img''' that you really need. For instance, if you need something which has boundaries and can be iterated you would use '''IterableInterval'''.
* There are more [[ImgLib2 Examples]] on [[ImgLib2 Examples#Example 1 - Opening, creating and displaying images | Opening, creating and displaying images]].

== Accessors ==
In ImgLib2, images are manipulated using ''Accessors''.
For pixel images, you can think of an accessor as a movable reference to a pixel.
* You can move it around the image (for example make it reference a pixel at specific coordinates).
* You can de-reference it to get the pixel value.
* And of course, you can ask it's current position.

The accessors provided by ImgLib2 typically implement '''Cursor''' or '''RandomAccess'''.
'''Cursor''' and '''RandomAccess''' are aggregations of interfaces covering the above three points.
A simplified UML diagram for the interface hierarchy is shown below.
(The simplification is with respect to real-coordinate interfaces for continuous images that are left out for now.)

[[File:imglib2-accessors-simplified-integer.png|775px|center|Simplified UML for ImgLib2 accessor interfaces]]


ImgLib2 supports two basic access patterns:
* [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RandomAccess.html RandomAccess] provides n-dimensional random access through the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Positionable.html Positionable] interface. It can be positioned at arbitrary integer coordinates.
* [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Cursor.html Cursor] provides iteration through the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Iterator.html Iterator] interface. It can be moved forward to visit all pixels of the image once.
Both, '''RandomAccess''' and '''Cursor''' implement the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Sampler.html Sampler] interface which allows to access pixel values.
Both implement the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Localizable.html Localizable] interface which allows to retrieve the accessors current pixel coordinates.
Both inherit (through '''Localizable''') the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/EuclideanSpace.html EuclideanSpace] interval which allows to get the number of dimensions of the image.

Note, that [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Sampler.html Sampler], [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RandomAccess.html RandomAccess], and [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Cursor.html Cursor]
have a type paramer '''<T>''' that refers to the value type of the underlying image.

=== RandomAccess ===
[http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RandomAccess.html RandomAccess] provides n-dimensional random access
through the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Positionable.html Positionable] interface.
It can be used to access pixels at arbitrary integer coordinates.
The following code uses a '''RandomAccess''' to draw some white pixels into an image.
<source lang="java">
import java.util.Random;

import net.imglib2.RandomAccess;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.display.imagej.ImageJFunctions;
import net.imglib2.type.numeric.integer.UnsignedByteType;

public class DrawWhitePixels
{
	public static void main( final String[] args )
	{
		final int[] dimensions = new int[] { 400, 320 };
		final Img< UnsignedByteType > img = new ArrayImgFactory< UnsignedByteType >()
			.create( dimensions, new UnsignedByteType() );

		final RandomAccess< UnsignedByteType > r = img.randomAccess();
		final Random random = new Random();
		for ( int i = 0; i < 1000; ++i )
		{
			final int x = ( int ) ( random.nextFloat() * img.max( 0 ) );
			final int y = ( int ) ( random.nextFloat() * img.max( 1 ) );
			r.setPosition( x, 0 );
			r.setPosition( y, 1 );
			final UnsignedByteType t = r.get();
			t.set( 255 );
		}

		ImageJFunctions.show( img );
	}
}
</source>
In lines ''013-015'' we create a 8-bit gray-level image,
in line ''029'' we show the result (like in the [[ImgLib2 Documentation#Opening And Displaying Image Files | previous example]]).

In line ''017'' we create a '''RandomAccess''' to the image.
'''Img''' implements the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RandomAccessible.html RandomAccessible] interface, thus we can use '''randomAccess()'''
to obtain one.
The '''RandomAccess''' has the same generic type, '''UnsignedByteType''', as the image.
<source lang="java">
final RandomAccess< UnsignedByteType > r = img.randomAccess();
</source>

In the '''for''' loop (lines ''019-027'') we set 1000 random pixels to the value 255 (white).
First we obtain the ''x'', ''y'' coordinates of a random pixel within the image boundaries.
<source lang="java">
final int x = ( int ) ( random.nextFloat() * img.max( 0 ) );
final int y = ( int ) ( random.nextFloat() * img.max( 1 ) );
</source>
Then we position the '''RandomAccess''' at those coordinates.
<source lang="java">
r.setPosition( x, 0 );
r.setPosition( y, 1 );
</source>
The '''setPosition()''' method (from the '''Positionable''' interface) takes two parameters: the coordinate and the dimension.
So we set the coordinate in dimension 0 to the value ''x'', and we set the coordinate in dimension 1 to the value ''y''.

After the '''RandomAccess''' has been positioned correctly, we can '''get()''' the pixel at that coordinate.
<source lang="java">
final UnsignedByteType t = r.get();
</source>
We get an instance of the pixel value type '''UnsignedByteType''' that acts as a reference to the pixel.
We set the pixel value via this reference
<source lang="java">
t.set( 255 );
</source>
==== Notes ====
* '''get()''' is defined in the '''Sampler''' interface, so you can obtain pixel references from a '''Cursor''' in exactly the same way.
* Often, the '''T''' obtained from '''Sampler<T>.get()''' is a proxy object that is re-used internally. You should assume that moving the accessor invalidates the proxy. If you want to keep a permanent reference to a pixel, use the '''Sampler<T>.copy()''' method. In the above example, this would return a copy of the RandomAccess refering to the same pixel.
* The '''Positionable''', '''Localizable''', &hellip; interfaces are not restricted to accessors. In fact, many ImgLib2 entities are '''Localizable'''.  For instance, the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib/Point.html Point] class implements '''Positionable''' and '''Localizable''', and simply represents a n-dimensional coordinate.   In your own code, whenever you have something that can provide coordinates, you should consider implementing '''Localizable'''.

=== A Taste of Generic Algorithms ===
Before we move on to the "other" accessor, ''Cursor'', let's consider a generalization of the previous example.
Let's say we like setting random pixels, and because we plan to do this a lot in the future, we extract this functionality into a method.

Easy enough. But what if we want to apply the method to images of another value type, e.g. '''DoubleType''' or '''ARGBType'''?
What if we want to apply it to a 3D image?
ImgLib2 allows you to write code that handles of this transparently.
In the following we write a function, that sets 1000 random pixels to "white", no matter what.

Let's take it step by step, starting from the original non-generic version.
First, we extract a set-1000-pixels method for 2D '''Img<UnsignedByteType>'''.
<source lang="java">
public static void draw( final Img< UnsignedByteType > img )
{
	final RandomAccess< UnsignedByteType > r = img.randomAccess();
	final Random random = new Random();
	for ( int i = 0; i < 1000; ++i )
	{
		final int x = ( int ) ( random.nextFloat() * img.max( 0 ) );
		final int y = ( int ) ( random.nextFloat() * img.max( 1 ) );
		r.setPosition( x, 0 );
		r.setPosition( y, 1 );
		final UnsignedByteType t = r.get();
		t.set( 255 );
	}
}
</source>

We can add a generic parameter to the method handle arbitrary value types '''T'''.
We want something like
<source lang="java">
public static < T > void draw( final Img< T > img )
{ ... }
</source>
However, for a generic '''T''', we no longer know what "white" is. 255 will certainly not do.
So we need to pass the "white" value into the method.
<source lang="java">
public static < T > void draw( final Img< T > img, final T white )
{ ... }
</source>
Furthermore, we need a way to set a pixel to this value.
Note, that the '''Sampler.get()''' method provides a ''reference'' to the pixel.
Changing that reference won't do any good, and there is no '''Sampler.set()''' method!
We need to ensure that we can use the reference to change the pixel value.

At the root of the ImgLib2 type hierarchy lies [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Type.html Type].
A type '''T''' extending '''Type<T>''' must have a '''set( T )''' method, which is exactly what we need.
So we make our method only accept those '''T''''s.
<source lang="java">
public static < T extends Type< T > > void draw( final Img< T > img, final T white )
{ ... }
</source>

Replacing the '''UnsignedByteType''' with the generic '''T''', and using '''white''' instead of 255,
we obtain a more general version of '''draw()'''.
<source lang="java">
public class DrawWhitePixelsGeneric
{
	public static < T extends Type< T > > void draw( final Img< T > img, final T white )
	{
		final RandomAccess< T > r = img.randomAccess();
		final Random random = new Random();
		for ( int i = 0; i < 1000; ++i )
		{
			final int x = ( int ) ( random.nextFloat() * img.max( 0 ) );
			final int y = ( int ) ( random.nextFloat() * img.max( 1 ) );
			r.setPosition( x, 0 );
			r.setPosition( y, 1 );
			final T t = r.get();
			t.set( white );
		}
	}

	public static void main( final String[] args )
	{
		final int[] dimensions = new int[] { 400, 320 };
		final Img< UnsignedByteType > img = new ArrayImgFactory< UnsignedByteType >()
			.create( dimensions, new UnsignedByteType() );
		draw( img, new UnsignedByteType( 255 ) );
		ImageJFunctions.show( img );
	}
}
</source>
Note, that we have to pass '''new UnsignedByteType( 255 )''' when calling '''draw()'''.

Next, lets think about dimensionality independence.
Instead of '''setPosition()''' for just dimensions 0 and 1, we can do so for as many dimensions as the image happens to have.
We get the number of dimensions using
<source lang="java">
final int n = img.numDimensions();
</source>
('''Img''' also extends '''EuclideanSpace''').

We loop over all dimensions when setting the position of the '''RandomAccess''':
<source lang="java">
for ( int d = 0; d < n; ++d )
{
	final int x = ( int ) ( random.nextFloat() * img.max( d ) );
	r.setPosition( x, d );
}
</source>

Setting the position dimension-by-dimension may be inefficient, because the '''RandomAccess''' might need to modify internal state
with each '''setPosition()''' call.
Instead, we may pass a '''int[]''' or '''long[]''' array comprising the coordinates to set the position at once.

Now the method looks like this:
<source lang="java">
public static < T extends Type< T > > void draw( final Img< T > img, final T white )
{
	final int n = img.numDimensions();
	final long[] pos = new long[ n ];

	final RandomAccess< T > r = img.randomAccess();
	final Random random = new Random();
	for ( int i = 0; i < 1000; ++i )
	{
		for ( int d = 0; d < n; ++d )
			pos[ d ] = ( int ) ( random.nextFloat() * img.max( d ) );
		r.setPosition( pos );
		final T t = r.get();
		t.set( white );
	}
}
</source>

Finally, there is no need to restrict ourselves to '''Img'''.
After all, we do not need many of the features of '''Img'''.
We need be able to get a '''RandomAccess''', so we need [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RandomAccessible.html RandomAccessible<T>].
We need to be able to get the number of dimensions and the extent in every dimension, so we need [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Interval.html Interval].
These two are conveniently gathered in [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RandomAccessibleInterval.html RandomAccessibleInterval<T>].
So lets make that
<source lang="java">
public static < T extends Type< T > >
	void draw( final RandomAccessibleInterval< T > img, final T white )
{ ... }
</source>
Now we are able to apply '''draw()''' to many ImgLib2 constructs that are not pixel '''Img'''s.
For instance there are Views that employ on-the-fly coordinate transforms, sampled and interpolated data, etc.

However, with great power comes great responsibility&hellip;
Taking a general '''Interval''' means that we no longer can assume that the interval starts at coordinates ''(0,0,&hellip;,0)''.
Thus we need to make a final modification to correctly draw between ''min'' and ''max'' of the interval.
<source lang="java">
import java.util.Random;

import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.display.imagej.ImageJFunctions;
import net.imglib2.type.Type;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.integer.UnsignedByteType;

public class DrawWhitePixelsGeneric
{
	public static < T extends Type< T > >
		void draw( final RandomAccessibleInterval< T > img, final T white )
	{
		final int n = img.numDimensions();
		final long[] min = new long[ n ];
		img.min( min );
		final long[] scale = new long[ n ];
		for ( int d = 0; d < n; ++d )
			scale[ d ] = img.max( d ) - min[ d ];
		final long[] pos = new long[ n ];

		final RandomAccess< T > r = img.randomAccess();
		final Random random = new Random();
		for ( int i = 0; i < 1000; ++i )
		{
			for ( int d = 0; d < n; ++d )
				pos[ d ] = min[ d ] + ( long ) ( random.nextFloat() * scale[ d ] );
			r.setPosition( pos );
			r.get().set( white );
		}
	}

	public static void main( final String[] args )
	{
		final Img< ARGBType > img = new ArrayImgFactory< ARGBType >()
			.create( new int[] {400, 320, 100}, new ARGBType() );
		draw( img, new ARGBType( 0xffffffff ) );
		ImageJFunctions.show( img );
	}
}
</source>
And we used it on a 3D '''ARGBType''' image (which means a color image with red/green/blue/alpha values). Ta daaaaaa&hellip;

==== Notes ====
* Besides '''setPosition()''' in a single or all dimensions, you can also relatively move a '''RandomAccess''' in one or all dimensions, or move the '''RandomAccess''' pixel-wise in one dimension   (Have a look at the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Positionable.html Positionable] API doc!)  Which of those is most efficient depends on the situation.
* There is a '''setPosition()''' version which takes a '''Localizable'''. Often a situation occurs where you want to position accessor ''a'' to the same location as accessor ''b''. In this situation you can avoid localizing ''b'' into an array and using that array to set the position of ''a''. You can simply '''a.setPosition( b )''' because ''b'' is '''Localizable'''.
* By ''image'', we do not necessarily mean ''pixel image''.
* we use the generic parameter '''< T extends Type< T > >''' instead of '''< Type >''' throughout ImgLib2 since that allows us to be more type-safe. Imagine implementing an '''add(a, b)''' method for a certain type: using the simpler generic parameter would not allow us to enforce both parameters to have the same subclass of '''Type'''!
* we create as many variables as possible outside of the loop (in particular, objects) since creating objects costs a bit of execution time and can easily dominate the performance of the algorithm if one is not careful about it.

=== Cursor ===
A [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Cursor.html Cursor] can be used to visit all pixels of an image once.
However, the '''Cursor''' concept is not limited to pixel images.  A '''Cursor''' can be used to iterate every collection of '''Localizable''' samples.

'''Cursor''' provides iteration through the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Iterator.html net.imglib2.Iterator] interface.
'''Iterator.fwd()''' advances the cursor.
'''Iterator.hasNext()''' returns true if the cursor can be advanced further.
Initially, a '''Cursor''' points before the first element. You have to call '''fwd()''' once to move to the first element.

Note, that the ImgLib2 [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Iterator.html net.imglib2.Iterator] interface is different from
Java's [http://docs.oracle.com/javase/6/docs/api/index.html?java/util/Iterator.html java.util.Iterator].
However, for convenience, '''Cursor''' implements '''java.util.Iterator''' as well.

Just like RandomAccess, '''Cursor''' extends '''Sampler''', so you can '''get()''' the value of the current pixel (respectively sample).
It also implements '''Localizable''', so you can query the coordinates of the current sample.

Let's look at an example:
We load an image and find the maximum value (the intensity of the brightest pixel).
<source lang="java">
import net.imglib2.Cursor;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.io.ImgIOException;
import net.imglib2.io.ImgOpener;
import net.imglib2.type.numeric.integer.UnsignedByteType;

public class FindMaximumValue
{
	public static void main( final String[] args ) throws ImgIOException
	{
		final Img< UnsignedByteType > img = new ImgOpener().openImg( "graffiti.tif",
			new ArrayImgFactory< UnsignedByteType >(), new UnsignedByteType() );
		final Cursor< UnsignedByteType > cursor = img.cursor();
		int max = 0;
		while ( cursor.hasNext() )
		{
			cursor.fwd();
			final UnsignedByteType t = cursor.get();
			max = Math.max( t.get(), max );
		}
		System.out.println( "max = " + max );
	}
}
</source>
In line ''014'' we get a '''Cursor''' from the image.
In lines ''016-021'' we iterate the image using '''hasNext()''' and '''fwd()'''.
In line ''019'' we ''get()'' the value at the current position.
Again, this is an instance of the pixel value type UnsignedByteType that acts as a reference to the pixel.

Cursor implements '''java.util.Iterator''' which has the ''next()'' method.
This is a combination of ''fwd()'' and ''get()''.
Instead of
<source lang="java">
cursor.fwd();
final UnsignedByteType t = cursor.get();
</source>
we could write
<source lang="java">
final UnsignedByteType t = cursor.next();
</source>

For even more syntactic sugar, every '''IterableInterval''' (such as '''Img''') implements [http://docs.oracle.com/javase/6/docs/api/index.html?java/lang/Iterable.html java.lang.Iterable].
This allows to use the Java '''for-each''' loop and replace the lengthy '''while''' loop like so:
<source lang="java">
for( UnsignedByteType t : img )
	max = Math.max( t.get(), max );
</source>
However, note that in this construct the '''Cursor''' is hidden and you can not use it to get the current location.
Therefore, you will often use the '''while''' form.

Let's extend the previous example. Now we are also interested in the coordinates of the maximum.
'''Cursor''' extends the '''Localizable''' interface which provides methods to get the current location either
dimension-by-dimension or all at once. (Have a look at the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Localizable.html Localizable] API doc!)
<source lang="java">
import net.imglib2.Cursor;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.io.ImgIOException;
import net.imglib2.io.ImgOpener;
import net.imglib2.type.numeric.integer.UnsignedByteType;

public class FindMaximumValueAndLocation
{
	public static void main( final String[] args ) throws ImgIOException
	{
		final Img< UnsignedByteType > img = new ImgOpener().openImg( "graffiti.tif",
			new ArrayImgFactory< UnsignedByteType >(), new UnsignedByteType() );
		final Cursor< UnsignedByteType > cursor = img.cursor();
		int max = 0;
		final long[] pos = new long[2];
		while ( cursor.hasNext() )
		{
			cursor.fwd();
			final UnsignedByteType t = cursor.get();
			if ( t.get() > max )
			{
				max = t.get();
				cursor.localize( pos );
			}
		}
		System.out.println( "max = " + max );
		System.out.println( "found at ( " + pos[0] + ", " + pos[1] + ")" );
	}
}
</source>
In line ''016'' we create a '''long[]''' position field which is updated (''024'') everytime a better ''max'' value is found.
Here, we use a 2D position field, because we know, that the position is 2D.

==== Generic version ====
Let's look at a generic version of the ''maximum-finding'' example.

<source lang="java">
import net.imglib2.Cursor;
import net.imglib2.IterableInterval;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.io.ImgIOException;
import net.imglib2.io.ImgOpener;
import net.imglib2.type.Type;
import net.imglib2.type.numeric.integer.UnsignedByteType;

public class FindMaximumValueAndLocationGeneric
{
	public static < T extends Comparable< T > >
			Cursor< T > findmax( final IterableInterval< T > iterable )
	{
		final Cursor< T > cursor = iterable.cursor();
		cursor.fwd();
		Cursor< T > max = cursor.copyCursor();
		while ( cursor.hasNext() )
			if ( cursor.next().compareTo( max.get() ) > 0 )
				max = cursor.copyCursor();
		return max;
	}

	public static void main( final String[] args ) throws ImgIOException
	{
		final Img< UnsignedByteType > img = new ImgOpener().openImg( "graffiti.tif",
			new ArrayImgFactory< UnsignedByteType >(), new UnsignedByteType() );
		final Cursor< UnsignedByteType > max = findmax( img );
		System.out.println( "max = " + max.get().get() );
		System.out.println( "found at ( " + max.getLongPosition( 0 ) + ", " +
											max.getLongPosition( 1 ) + ")" );
	}
}
</source>
We define the method '''findmax''' as
<source lang="java">
public static < T extends Comparable< T > >
		Cursor< T > findmax( final IterableInterval< T > iterable )
</source>
First, note that we do not take an '''Img<T>''' as the parameter, because that would be too restrictive.
All we need is something that is iterable. Because we can easily put interval bounds on every iterable
set of Localizables, ImgLib2 does not define an '''Iterable''' super-interface for '''IterableInterval'''.
So [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/IterableInterval.html IterableInterval<T>] is the most general we can go here.

For finding the maximum, the only restriction we have to put on type '''T''' is that it is comparable.

The return value of '''findmax''' is a '''Cursor<T>'''.
Instead of creating a new class that represents a tuple of maximum value and coordinates, we simply
return a '''Cursor''' positioned at the maximum.

To remember the maximum, we simply take a new copy of the iterating cursor whenever a better ''max'' value is found.
<source lang="java">
if ( cursor.next().compareTo( max.get() ) > 0 )
	max = cursor.copyCursor();
</source>
Remember that '''next()''' is equivalent to '''fwd()''' followed by '''get()'''.
So, '''cursor.next()''' returns the current '''T'''.

Lines ''028-031'' show how to use '''findmax''' and get the maximum value and coordinates from the resulting '''Cursor'''.
For a change, we used the dimension-by-dimension '''getLongPosition()''' of the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Localizable.html Localizable] interface.

==== Notes ====
* The iteration order is subject to implementation, specialized for each memory layout to minimize access time.  For example, an [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/img/array/ArrayImg.html ArrayImg] has a different iteration order from a [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/cell/CellImg.html CellImg].  This is nicely illustrated in [[ImgLib2 Examples#Example 2b - Duplicating an Img using a different ImgFactory | ImgLib2 Example 2b - Duplicating an Img using a different ImgFactory ]].
* Typically, there are two variants of Cursors available.  One that calculates its location per each iteration and one that calculates it only per localization request.  The former is more efficient when localization occurs frequently, the latter otherwise. In the ''maximum-finding'' example, we use the latter because localization is only required once after the maximum has been found.  The former one could be obtained using '''localizingCursor()''' instead of '''cursor()''' (see [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/IterableInterval.html IterableInterval] API doc.)
* '''copyCursor()''' is a work-around to circumvent a ''javac'' bug with covariant return type overriding (see [http://bugs.sun.com/view_bug.do?bug_id=6656332 bug report]). In the future (with JDK7) every '''Sampler''' can be copied using '''copy()''' instead of having specialised '''copyCursor()''', '''copyRandomAccess()''', &hellip; methods.

=== Accessors for Continuous Coordinates ===
ImgLib2 is not restricted to rasterized images and integer coordinates
It also supports continuous images and real-valued coordinates.
Examples where this is appropriate are
* an interpolated image, where an interpolated value can be obtained at any real coordinate. Note that this is a bounded, but continuous image. Thus it is not iterable.
* a procedurally generated image, where a value can be computed at any real coordinate (continuous, unbounded, non-iterable).
* collections of samples taken at arbitrary real coordinates (discrete, bounded, iterable).

The following image shows the UML diagram for the ImgLib2 accessor interface hierarchy.
The real-coordinate counterparts that were missing in the simplified version [[ImgLib2 Documentation#Accessors | above]] are highlighted.

[[File:imglib2-accessors-real.png|center|UML for ImgLib2 accessor interfaces]]


Real equivalents of the '''Positionable''' and '''Localizable''' interfaces have been added by which real-valued coordinates can be accessed.

Something that is [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RealPositionable.html RealPositionable], can be positioned at real coordinates.
There are methods to set absolute or relative position, for a single or all dimensions, in analogy to the integer '''Positionable'''.
You can also set a '''RealPositionable''' to the location of a '''RealLocalizable'''.
Note that [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RealPositionable.html RealPositionable] extends '''Positionable''', which is quite natural:
Whenever something can be positioned at arbitrary real coordinates, of course it can be positioned to integer coordinates as well.

[http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RealLocalizable.html RealLocalizable] allows to get a real coordinate from an accessor.
Again, this is completely analogous to the integer '''Localizable'''.
In this case, the inheritance relationship is the other way around -
'''Localizable''' extends [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RealLocalizable.html RealLocalizable].
Something that is able to provide its integer coordinates is always able to provide them as real coordinates too.

In Combination with '''Sampler''', we obtain random-access and iteration accessor interfaces.
[http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RealRandomAccess.html RealRandomAccess] provides n-dimensional random access
through the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RealPositionable.html RealPositionable] interface.
[http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RealCursor.html RealCursor] provides iteration through the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/Iterator.html Iterator] interface.

Both, '''RealRandomAccess''' and '''RealCursor''' are '''RealLocalizable'''.
Note that the inheritance relationship of '''Localizable''' and '''RealLocalizable''' propagates to the cursors.
Every '''Cursor''' is also a '''RealCursor''' (because it can provide its current integer coordinates as real coordinates as well).
There is no such relationship between '''RandomAccess''' and '''RealRandomAccess'''.

==== A RealRandomAccess to Render Mandelbrot Fractals ====
Let's look at an example.
The following code defines a '''RealRandomAccess''' which computes the [http://en.wikipedia.org/wiki/Mandelbrot_set Mandelbrot set].
More precisely, our '''RealRandomAccess''' can be positioned at an arbitray 2D coordinate in the complex plane.
When we '''get()''' its value, it computes an iteration count for its current position using an [http://en.wikipedia.org/wiki/Mandelbrot_set#Escape_time_algorithm Escape time algorithm]

<source lang="java">
import net.imglib2.RealPoint;
import net.imglib2.RealRandomAccess;
import net.imglib2.type.numeric.integer.UnsignedByteType;

class MandelbrotRealRandomAccess extends RealPoint
		implements RealRandomAccess< UnsignedByteType >
{
	final UnsignedByteType t;

	public MandelbrotRealRandomAccess()
	{
		super( 2 ); // number of dimensions is 2
		t = new UnsignedByteType();
	}

	public static final int mandelbrot( final double re0, final double im0,
			final int maxIterations )
	{
		double re = re0;
		double im = im0;
		int i = 0;
		for ( ; i < maxIterations; ++i )
		{
			final double squre = re * re;
			final double squim = im * im;
			if ( squre + squim > 4 )
				break;
			im = 2 * re * im + im0;
			re = squre - squim + re0;
		}
		return i;
	}

	@Override
	public UnsignedByteType get()
	{
		t.set( mandelbrot( position[ 0 ], position[ 1 ], 255 ) );
		return t;
	}

	@Override
	public MandelbrotRealRandomAccess copyRealRandomAccess()
	{
		return copy();
	}

	@Override
	public MandelbrotRealRandomAccess copy()
	{
		final MandelbrotRealRandomAccess a = new MandelbrotRealRandomAccess();
		a.setPosition( this );
		return a;
	}
}
</source>
First of all, note that we extend [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib2/RealPoint.html RealPoint].
Instead of implementing the interface '''RealRandomAccess< UnsignedByteType >''', we make use of this class
	which has most of the required methods implemented already.
Actually, all we are left with is to implement the '''Sampler< UnsignedByteType >''' interface.

ImgLib2 provides several such abstract implementations to minimize development time for new accessor types.
The following UML diagram shows '''MandelbrotRealRandomAccess''' and the derivative hierarchy of its parent classes.

[[File:imglib2-abstract-accessors-real-new-vertical.png|center|UML for abstract RealRandomAccess class hierarchy]]

==== Notes ====
The '''RealPositionable''', '''RealLocalizable''', &hellip; interfaces are not restricted to accessors.
For example, the [http://jenkins.imagej.net/job/ImgLib-daily/javadoc/index.html?net/imglib/RealPoint.html RealPoint] class implements '''RealPositionable''' and '''RealLocalizable''', and simply represents a n-dimensional coordinate.


= CIP : Classic Image Processing =

Classic Image Processing (CIP) is an image procesing toolbox which provides functions for scripting in ImageJ. Its principal goal is to facilitate image analysis workflow construction as well as to provide an accessible entry point to learn the programming of such workflow. CIP philosophy in achieving that is to focus on providing a smooth user experience. We hope that this reflects in CIP main features:

* '''Integration''' to ImageJ ecosystem: CIP can be easily used in combination other ImageJ1 and ImageJ2 plugins. For instance, it can process seamlessly all usual imageJ image type (ImagePlus, Dataset, ImgPlus, Img) wihtout requiring any conversion.

* '''Discoverability''' of its functionnalities: CIP provides a complete user documentation that explain function usage, details their parameters and provides simple examples. In order to allow an intuitive learning, function parameters can be named or made optionnal while similar functions will have similar signatures. For the same reason 2D and 3D images can be processed with the same functions. 

* '''Simplicity''' of use: Learning programming is demanding, that is why CIP hides some of its difficulty. For instance CIP requires no class and package import. It Also uses only 3 main data type, Image, Region and Table, avoiding the need for complex data structure. Finally, CIP functions never modifies there inputs so you always know what is happening to your data.

* An '''essential''' set of tools: CIP gathers the 10% of tools that will get the job done, allowing one to go straight to the tool he needs. The function selected are also well adopted by the community to facilitate exchange and understanding. Finally, CIP provides basic visualisation and measure tools making autonomous in many use case.

=Tools categories=

* '''Format''': These functions are used to managed image data, combine them or reduce their dimensionnality. They take one or multiple image as input and return one image as output. These function will generally provide an ouput which size and/or dimensionality can be different from the input
 
* '''Filter''': filters act on image graylevel. They creates an output image the same size as the input. Filters are used to remove noise, filter out unwanted background or enhance feature of interest such as spots and lines.

* '''Math operations and functions''':  These category gathers usual mathematical operations such as addition, subtraction or trigonometric functions for instance. They can be used with scalars, images or image and scalar in combination. When use with images the operation are applied pixel wise.

* '''Segmentation''': Segmentation functions allow to define regions in an image. Applied to an input image they create so called label image that defines the pixel where the object lays. Each region is attributed a particular label, an integer value, that can be used to retrieve the object later. Watershed, thresholding spot and line detection can be found here. 

* '''Utilies''': in that category are tools to facilitate data visualisation and measures that will be needed in every pipeline once the image processing is done.

Link to function user documentation are provided in the table below.

{| class="wikitable"
|- 
! Filter
! Segmentation
! Format
! Math
! Utilities
|- 
| [[CIP Filter#gauss|gauss]]
| [[CIP Segmentation#threshold|threshold]]
| [[CIP Format#create|create]] 
| [[CIP Math#add|add]]
| [[CIP Utilities#measure|measure]]
|- 
| [[CIP Filter#erosion|erosion]]
| [[CIP Segmentation#maxima|maxima]]
| [[CIP Format#duplicate|duplicate]] 
| [[CIP Math#sub|sub]]
| [[CIP Utilities#show|show]]
|- 
| [[CIP Filter#dilation|dilation]]
| [[CIP Segmentation#watershed|watershed]]
| [[CIP Format#slice|slice]]
| [[CIP Math#mul|mul]]
| [[CIP Utilities#region|region]]
|- 
| [[CIP Filter#opening|opening]]
| [[CIP Segmentation#label|label]]
| [[CIP Format#project|project]]
| [[CIP Math#div|div]]
| [[CIP Utilities#toIJ1|toIJ1]]
|- 
| [[CIP Filter#closing|closing]]
| skeleton
| concatenate
| [[CIP Math#sin|sin]]
| [[CIP Utilities#toIJ2|toIJ2]]
|- 
| [[CIP Filter#tophat|tophat]]
| edge
| '''...'''
| [[CIP Math#cos|cos]], [[CIP Math#sin|sin]], [[CIP Math#tan|tan]], [[CIP Math#acos|acos]], [[CIP Math#asin|asin]], [[CIP Math#atan|atan]]
| | [[CIP Utilities#spacing|spacing]]

|- 
| [[CIP Filter#distance|distance]]
| '''...'''
| '''...'''
| [[CIP Math#pow|pow]], [[CIP Math#sqrt|sqrt]]
| [[CIP Utilities#unit|unit]]
|- 
| [[CIP Filter#median|median]]
| '''...'''
| '''...'''
| [[CIP Math#floor|floor]], [[CIP Math#ceil|ceil]], [[CIP Math#round|round]]
| [[CIP Utilities#axes|axes]]
|- 
| [[CIP Filter#invert|invert]]
| '''...'''
| '''...'''
| [[CIP Math#log|log]], [[CIP Math#exp|exp]]
| [[CIP Utilities#list|list]]
|- 
| gradient
| '''...'''
| '''...'''
| [[CIP Math#sign|sign]], [[CIP Math#abs|abs]]
| '''...'''
|- 
| laplacian
| '''...'''
| '''...'''
| [[CIP Math#min|min]], [[CIP Math#max|max]]
| '''...'''
|- 
| hessian
| '''...'''
| '''...'''
| logic operators
| '''...'''
|- 
| fillholes
| '''...'''
| '''...'''
| comparison operators
| '''...'''
|}

=Installation=

If you want to use CIP in your ImageJ script simply add the CIP update site to your imageJ installation ([https://imagej.net/Following_an_update_site instruction to follow an update site]) restart imagej, open the script editor and you are good to go. If you want some inspiration you can look at one of the script of the [[CIP#Sample scripts|example section]]

To look into the source compilation and installation I invite you to look on the [https://github.com/benoalo/CIP github repository] of the project



=Sample scripts=

I will link the example script from the githu repo very soon



=Cite=



=History=

* 2017-12-20 : version 0.1.0 , first alpha version of CIP is made available on CIP  update site


=Development plan=

This setion provide the main development directions as well as a list of functions that we intend to implement per category

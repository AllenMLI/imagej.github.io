Whether a Fiji plugin is called ''internal'' or ''external'' is a purely technical matter: ''external plugins''' source code is maintained in separate repositories.

For example, [[TrackMate]] started out as an internal plugin, but for ease of development -- and in particular, to ease contributing to it -- the source code of TrackMate was moved into [https://github.com/fiji/TrackMate its own repository].

= How to add a new external plugin =

The following steps are required:
<ol>
<li>Ensure that the plugin has a public repository (it can be in the ''fiji'' org on GitHub or outside, that does not matter).</li>
<li>If it is a GitHub repository and you can change the settings, activate the ''Jenkins (Git plugin)'' hook in ''Settings>Service Hooks'' and set the URL to ''http://jenkins.imagej.net/''</li>
<li>Add a Jenkins job to the [http://jenkins.imagej.net/view/Fiji/ Fiji view] of ImageJ's Jenkins server. The easiest way is to copy the ''TrackMate'' job and edit the description as well as the repository URL. If the Maven configuration of the external plugin does not list ImageJ's Maven repositories, you will have to insert:
<source lang="bash">-DaltDeploymentRepository=imagej.snapshots::default::http://maven.imagej.net/content/repositories/snapshots</source>
into the call:
<source lang="bash">mvn -DupdateReleaseInfo=true deploy</source>
</li>
<li>Hit the ''Build Now'' button in the Jenkins job to trigger a build and deployment of the plugin.</li>
<li>Once the Jenkins job deployed the external plugin, add the current version to ''pom.xml'''s ''<properties>'' section and then add it as a ''<dependency>'' in ''external/pom.xml''. You should also add the base name of the repository to ''external/.gitignore'' and mention the URL to the external plugin's source code repository in the commit message.</li>

= How to make an internal plugin an external one =

If you want to convert a plugin from an internal one (i.e., source code maintained in [https://github.com/fiji/fiji fiji.git]) to an external one (i.e., source code in its own Git repository), you will need to perform the following steps.

== Extracting the plugin's revision history ==

First, factor out the plugin's source code from ''fiji.git'':

<ol>
<li>Clone Fiji into a new repository:
<source lang="bash">
git clone -b master . external/<new-repository-name>
</source>
Where ''<new-repository-name>'' is the name you want to give the external repository.</li>
<li>Use Git's ''filter-branch'' feature to extract the Git history of only that plugin:
<source lang="bash">
cd external/<new-repository-name>/
git filter-branch -f --prune-empty --subdirectory-filter src-plugins/My_Plugin
</source>
Where ''My_Plugin'' is the folder containing the plugin's source code.</li>
<li>Add an ''<scm>'' section to the ''pom.xml'' to reflect the new remote repository's URL (see [https://github.com/fiji/jep/commit/b76f4a1df830c090fc96ab99bb145dd67e8e69ce example]):
<source lang="bash">vi pom.xml
git commit -m 'Add SCM location' pom.xml</source>
</li>
<li>Substitute the ''pom-fiji-plugins'' parent by the ''pom-fiji'' parent (see [https://github.com/fiji/jep/commit/336c0a46fad855508aaa905a9f82e5d88136df91 example]).</li>
<li>Add a ''<developers>'' section to the ''pom.xml'' to indicate the project developers (see [https://github.com/fiji/TrackMate/commit/f0c2cf6cca3e198ba5b9283a71fc564f41c642d5 example]). You can also add ''<contributors>'' if desired and relevant.
<li>Override the ''imagej.app.directory'' property (see [https://github.com/fiji/Stitching/commit/35753ef1c6b11e2abf8917d5f1d64bd60143bc0a example]).</li>
<li>Make sure the project still builds:
<source lang="bash">mvn clean install</source>
</li>
<li>Add (or adjust) the ''.gitignore'' file (see [https://github.com/fiji/spimreconstruction/commit/cf95dcc06b31c0044b58213c12f886027a5eb3ba example]).</li>
<li>Commit everything, mentioning from which Fiji commit the history was rewritten (see [https://github.com/scijava/jep/commit/660930836860c6f67ecb53d091eb1730ecb68c80 example]):
<source lang="bash">git add . && git commit -s</source>
</li>
<li>Connect your repository with the remote one:
<source lang="bash">git remote set-url origin git@github.com:fiji/my-plugin</source>
Where ''git@github.com:fiji/my-plugin'' is the remote URL for the plugin's new dedicated repository.</li>
<li>Push the resultant history to the plugin's new repository:
<source lang="bash">git push origin HEAD:refs/heads/master</source></li>
</ol>

== Changes to fiji.git ==

Then update Fiji's Git repository:
<ol>
<li>First, <strong><em>quit your IDE</em></strong> if it is currently open.</li>
<li>Add the ''${<artifactId>.version}'' property to ''pom.xml'' (see [https://github.com/fiji/fiji/commit/cd94282cde98c2f7039bd3823df6502cdd36a048#diff-600376dffeb79835ede4a0b285078036R25 example])</li>
<li>Update the POMs of any plugins that depend on the newly externalized plugin. They should now reference the ''${<artifactId>.version}'' instead of a hardcoded version. That way Fiji won't suffer from version skew when the version property is updated later.</li>
<li>Add the plugin as a dependency to ''external/pom.xml'' (using the newly-added ''version'' property, see [https://github.com/fiji/fiji/commit/cd94282cde98c2f7039bd3823df6502cdd36a048#diff-daf49d6db7f6a92ae7e49b73d0ef5739L27 example])</li>
<li>Adjust ''external/.gitignore'' to ignore if the external repository is cloned into ''external/'' (see [https://github.com/fiji/fiji/commit/bd6f0c243b28fcc89454fba49919a89b22541fc0 example])</li>
<li>Remove the directory ''src-plugins/<artifactId>/'' (see [https://github.com/fiji/fiji/commit/cd94282cde98c2f7039bd3823df6502cdd36a048#diff-da71ec6511879b643fc452f0e3fd22b4L1 example])</li>
<li>Remove the respective ''<module>'' line in ''src-plugins/pom.xml'' (see [https://github.com/fiji/fiji/commit/cd94282cde98c2f7039bd3823df6502cdd36a048#diff-e905d2f0f7f93323fb269a935bb84a87L101 example])</li>
<li>Adjust ''.gitignore'' to list ''/plugins/<artifactId>-[0-9]*.jar'' in the section ''Dependencies copied by MiniMaven'' instead of ''Files generated from sources in src-plugins/'' (see [https://github.com/fiji/fiji/commit/a7391f5fbe1a91595cb2f7a1a04c035215291f15 example])</li>
<li>Make really, really sure that there are only changes related to making your plugin an external one:
<source lang="bash">git status</source>
This is good advice in general: check '''git status''' *everytime* before you commit (e.g. to prevent making a fool out of yourself).</li>
<li>Commit the result (if you want to be a nice person, you mention the current commit in the external repository to ease rebasing existing topic branches):
<source lang="bash">git commit -a</source>
with a commit message modeled after [https://github.com/fiji/fiji/commit/cd94282cde98c2f7039bd3823df6502cdd36a048#diff-e905d2f0f7f93323fb269a935bb84a87L101 this one].</li>
</ol>

== Changes to online resources ==

# Edit the plugin's wiki page to reflect the new Git repository location
# Update any other known links to the project

[[Category:Development]]

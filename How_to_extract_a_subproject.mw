Whether a Fiji plugin is called ''internal'' or ''external'' is a purely technical matter: ''external plugins''' source code is maintained in separate repositories.

For example, [[TrackMate]] started out as an internal plugin, but for ease of development -- and in particular, to ease contributing to it -- the source code of TrackMate was moved into [https://github.com/fiji/TrackMate its own repository].

= How to add a new external plugin =

The following steps are required:
<ol>
<li>Ensure that the plugin has a public repository (it can be in the ''fiji'' org on GitHub or outside, that does not matter).</li>
<li>If it is a GitHub repository and you can change the settings, activate the ''Jenkins (Git plugin)'' hook in ''Settings>Service Hooks'' and set the URL to ''http://jenkins.imagej.net/''</li>
<li>Add a Jenkins job to the [http://jenkins.imagej.net/view/Fiji/ Fiji view] of ImageJ's Jenkins server. The easiest way is to copy the ''TrackMate'' job and edit the description as well as the repository URL. If the Maven configuration of the external plugin does not list ImageJ's Maven repositories, you will have to insert:
<pre>-DaltDeploymentRepository=imagej.snapshots::default::http://maven.imagej.net/content/repositories/snapshots</pre>
into the call:
<pre>mvn -DupdateReleaseInfo=true deploy</pre>
</li>
<li>Hit the ''Build Now'' button in the Jenkins job to trigger a build and deployment of the plugin.</li>
<li>Once the Jenkins job deployed the external plugin, add the current version to ''pom.xml'''s ''<properties>'' section and then add it as a ''<dependency>'' in ''external/pom.xml''. You should also add the base name of the repository to ''external/.gitignore'' and mention the URL to the external plugin's source code repository in the commit message.</li>

= How to make an internal plugin an external one =

If you want to convert a plugin from an internal one (i.e., source code maintained in [https://github.com/fiji/fiji fiji.git]) to an external one (i.e., source code in its own Git repository), you will need to perform the following steps.

== Extracting the plugin's revision history ==

First, factor out the plugin's source code from ''fiji.git'':

<ol>
<li>Clone Fiji into a new repository:
<source lang="bash">
git clone -b HEAD . external/<new-repository-name>
</source>
Where ''<new-repository-name>'' is the name you want to give the external repository.</li>
<li>Use Git's ''filter-branch'' feature to extract the Git history of only that plugin:
<source lang="bash">
cd external/<new-repository-name>/
git filter-branch -f --prune-empty --subdirectory-filter src-plugins/My_Plugin
</source>
Where ''My_Plugin'' is the folder containing the plugin's source code.</li>
<li>Edit the ''<scm>'' section of the ''pom.xml'' to reflect the new remote repository's URL (see [https://github.com/fiji/jep/commit/b76f4a1df830c090fc96ab99bb145dd67e8e69ce example]):
<source lang="bash">vi pom.xml
git commit -m 'Update SCM location' pom.xml</source>
</li>
<li>Substitute the ''pom-fiji-plugins'' parent by the ''pom-fiji'' parent (see [https://github.com/fiji/jep/commit/336c0a46fad855508aaa905a9f82e5d88136df91 example]).</li>
<li>Override the ''imagej.app.directory'' property (see [https://github.com/fiji/Stitching/commit/35753ef1c6b11e2abf8917d5f1d64bd60143bc0a example]).</li>
<li>Make sure the project still builds:
<source lang="bash">mvn clean install</source>
</li>
<li>Add (or adjust) the ''.gitignore'' file (see [https://github.com/fiji/spimreconstruction/commit/cf95dcc06b31c0044b58213c12f886027a5eb3ba example]).</li>
<li>Connect your repository with the remote one:
<source lang="bash">git remote set-url origin git@github.com:fiji/my-plugin</source>
Where ''git@github.com:fiji/my-plugin'' is the remote URL for the plugin's new dedicated repository.</li>
<li>Push the resultant history to the plugin's new repository:
<source lang="bash">git push origin HEAD:refs/heads/master</source></li>
</ol>

== Changes to fiji.git ==

Then update Fiji's Git repository:
<ol>
<li>Add the ''${<artifactId>.version}'' property to ''pom.xml''</li>
<li>Add the plugin as a dependency to ''external/pom.xml'' (using the newly-added ''version'' property)</li>
<li>Remove the directory ''src-plugins/<artifactId>/''</li>
<li>Remove the respective ''<module>'' line in ''src-plugins/pom.xml''</li>
<li>Adjust ''.gitignore'' to list ''/plugins/<artifactId>-[0-9]*.jar'' in the section ''Dependencies copied by MiniMaven'' instead of ''Files generated from sources in src-plugins/''</li>
<li>Commit the result:
<pre>git commit -a</pre>
with a commit message modeled after [https://github.com/fiji/fiji/commit/bd88afe2dfccf71d30141dc3270570bdc8e977d8 this one].</li>
</ol>

== Changes to online resources ==

# Edit the plugin's wiki page to reflect the new Git repository location
# Update any other known links to the project

[[Category:Development]]

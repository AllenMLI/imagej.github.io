{{Infobox
| software               = ImageJ
| name                   = SAIM (Scanning Angle Interference Microscopy)
| author                 = Nico Stuurman (nico.stuurman at ucsf.edu)
| maintainer             = [[Nico Stuurman]]
| filename               = 
| source                 = {{GitHub|org=nicost|repo=saimAnalysis|}}
| released               = 2015/11/20
| latest version         = 2015/11/20
| status                 = 
| category               = [[:Category:Techniques]]
}}

= ImageJ/Fiji plugin to to analyze Scanning Angle Interference Microscope Data. =  

== Installation ==
To install this plugin check the "ValelabUtils" update site in the Fiji updater.

== Description ==
SAIM (Scanning Angle Interference Microscopy) is a technique to measure the distance of fluorescent dyes to the surface at nm resolution.  To use it, one needs to place the sample on a silicon chip (that acts as a mirror) with a solicon oxide (glass) spacer).  The reflection of coherent excitation light will interfere with the incoming beam and set up a standing wave pattern, resulting in fluorescence intensity that varies with distance to the surface.  By varying the angle of incidence, the standing wave pattern changes in predictable ways, and a series of images at different angles can be used to deduce the height of fluorescence molecules, independent of their intensity.  This technique is very well described by [http://www.nature.com/nmeth/journal/v9/n8/abs/nmeth.2077.html Paszek et al.], and this plugin uses the equations from the Paszek et al. paper with a few [[File:SAIM_Math.pdf]] extensions. 

This plugin consists of three parts.  "Saim Plot" plots theoretical predictions for the intensity distribution as a function of height.  

[[File:SaimPlotScreen.png|200px ]]  [[File:SaimPlotOutput.png|500px]]

"Saim Inspect" and "Saim Fit" are very similar, however, Saim Inspect will act on the average values of theROI (for instance, the pixel under the cursor) and executes only a single fit, whereas Saim Fit will analyze all pixels of the image stack.  You will likely want to play with Saim Inspect first and determine reasonable guesses for A, B, and height.  


[[File:SaimInspect.png ]] [[File:SaimInspectOutput.png|500px]]


Saim Fit will fit each pixel in the input stack and output a stack with 4 images, the first one is the height map (in nm), the second image has the r-squared values (an indication of the goodness of fit with values between 0 and 1, the closer to 1, the better the fit), the third image shows the values for "A", and the last image the values for "B". Saim Fit will use as many thread as you allow in Edit > Options > Memory&Threads and it is best to set that value to the number of processors in your computer.   If there is significant movement while taking the stack, you will first need to "de-jitter" using another ImageJ plugin (such as StackReg).  The output image will have the Fire LUT by default. Do note the "Threshold" parameter.  Only pixels that are higher in intensity than the threshold will be analyzed.  This can greatly reduce the analysis time ("dark" pixels will be hard to fit and are usually uninteresting anyways).  

[[File:SaimFit.png]]  [[File:SaimFitOutput.jpg]]


== History ==
* 1.0.6 (2016-04-21): Added capability to export data and predictions from Inspect module. 
* 1.0.5 (2016-04-05): Most settings are now shared between all 3 plugins and are remembered.  Multiple start heights can now be entered in the fit module and the resulting fit with the lowest error will be reported.
* 1.0.4 (2016-4-05): Multiple heights can be entered in Inspect as a comma separated list.  They will also be used to fit against the data and the best fit will be reported.
* 1.0.2 (2016-01-22): Added capability to export predicted data from Plot module
* 1.0.1 (2016-01-12): Changed calculation of rTE to what appears to be the correct formula





[[Category:Techniques]]
[[Category:Plugins]]

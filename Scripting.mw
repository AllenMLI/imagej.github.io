{{Learn|scripting}}ImageJ allows you to write scripts in several different languages.

= Getting started =

* Press the {{key|[}} key to open the [[Script Editor]] (or {{key|Shift}}-{{key|[}} to open the [[Script Interpreter]]).
* Optionally, choose a template from the ''Templates'' menu to get you started.
* Otherwise, choose your language from the ''Language'' menu.
* Grab code snippets for common tasks from the [[Scripting toolbox]].
* See [[Scripting comparisons]] for a side-by-side comparison of scripting languages.
* See [[:Category:Scripting]] for a list of all scripting-related pages on this wiki.

= Supported languages =

ImageJ's [[Script Editor]] supports many different languages. The following table summarizes the possibilities.

{| class="wikitable"
| colspan=2 style="background: #ddd; text-align: center; font-weight: bold" | Recommended options
|-
! [[Groovy Scripting|Groovy]]
| [[wikipedia:Groovy (programming language)|Groovy]] is a flexible and powerful scripting language, Java-like but less verbose and dynamically typed. Learn this, and using Java later (if needed) will become easier.
|-
! [[Introduction into Macro Programming|ImageJ Macro]]
| style="white-space: normal !important" | The [[ImageJ 1.x]] macro language is less powerful than the other scripting languages, but is designed to be easy to learn and use.
|-
! style="white-space: nowrap" | [[Jython Scripting|Python (Jython)]]
| [[wikipedia:Python (programming language)|Python]] is a popular choice among scientists.
|-
! [[Javascript Scripting|JavaScript]]
| [[wikipedia:JavaScript|JavaScript]] is a popular choice among web developers.
|-
! [[JRuby Scripting|Ruby (JRuby)]]
| [[wikipedia:Ruby (programming language)|Ruby]] is another popular choice among web developers.
|-
! [[Clojure Scripting|Lisp (Clojure)]]
| [[wikipedia:Lisp (programming language)|Lisp]] is a popular choice among computer scientists.
|-
! [[Renjin Scripting|R (Renjin)]]
| [[wikipedia:R (programming language)|R]] is a popular choice among scientists and statisticians.
|-
| colspan=2 style="background: #ddd; text-align: center; font-weight: bold" | Other options
|-
! [[Introduction into Developing Plugins|Java]]
| You can code Java plugins in the Script Editor. This is the most difficult path, but also the most powerful.
|-
! [[MATLAB Scripting|MATLAB]]
| ImageJ can interface bidirectionally with MATLAB. See the [[MATLAB Scripting]] page for details.
|-
! [[Beanshell Scripting|BeanShell]]
| [[wikipedia:BeanShell|BeanShell]] is an old script language, maintained mostly for backwards compatibility. It is nearly 100% compatible with Java syntax, but so is [[Groovy]].
|-
! [[Scala Scripting|Scala]]
| [[wikipedia:Scala (programming language)|Scala]] support is currently experimental, and has bugs.
|}

= Script parameters =

There is a universal <code>@parameter</code> notation available across all scripts for declaring inputs and outputs. This approach is preferred to using ImageJ 1.x <code>GenericDialog</code> because it is totally agnostic to the user interface, allowing such scripts to run in a variety of contexts.

See the [[script parameters]] page for details.

= Using an interpreter =

All scripting languages use the same basic interpreter, with the following common features.

== General key bindings ==

* {{Key|up}}: bring the previously typed command.
* {{Key|down}}: bring the next typed command.
* {{Key|enter}} or {{Key|return}}: execute the contents of the prompt.

== Multiline editing and keybindings==

You can enlarge the prompt by dragging the middle bar.

* {{key|Shift||Enter}}: create a new line within the prompt.
* {{key|Shift||Up}}: move to the line above within the prompt.
* {{key|Shift|Down}}: move to the line below within the prompt.

== Selecting and executing text from the screen ==

On selecting text, a popup offers to:

* copy
* execute
* save to a new file

= Using the script editor =

You can create, edit and run scripts using the built-in [[Script Editor]]. For details, please see [[Using the Script Editor|the Script Editor documentation]].

= Adding scripts to the Plugins menu =

For the script to appear in the Plugin menus, the following must apply:

# The script file is saved in the <code>ImageJ.app/plugins</code> directory (or a subdirectory thereof).
# The script name ends in a supported script extension. For example, ".js" for javascript, ".py" for jython, ".rb" for jruby, ".clj" for clojure, and ".bs" for beanshell script. 'NOTE:' ".txt" is not a supported script language.
# The script name contains a '_' (underscore) character, e.g. "MyScript_.ijm"

The extension will be stripped and any underscores will be turned into spaces before the script is added to the menus.

Scripts in the top-level "plugins" directory will appear at the bottom of the Plugins menu. Scripts can be placed in other menus by by nesting subdirectories, for example placing a script in the "/plugins/Scripts/File" directory will add it to the File menu.

If you aren't able to find your script, you can always run the [[Using_the_Command_Launcher|Command Finder]] to verify its location (or absence).

= Running scripts in headless mode =

See the [[Scripting Headless]] page for instructions on executing scripts headlessly.

[[Category:Scripting]]

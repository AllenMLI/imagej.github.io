= Noise2Void - Learning Denoising from Single Noisy Images = 

More information [https://frauzufall.github.io/csbdeep-testsite/tools/n2v/ here].

== Installation ==
# Start ImageJ / Fiji
# Open the updater via <code>Help > Update...</code>
# Click on <code>Manage update sites</code>
# Select the <b><code>CSBDeep</code></b> update site
# Click on <code>Apply changes</code>
# Restart IamgeJ / Fiji

You should now have access to these plugins:

[[File:n2v-plugins.png||Available N2V plugins]]

== Training ==
=== Training on a single image ===
# Start ImageJ / Fiji
# Open a noisy image of your choice (it should be sufficiently large)
# (optional) open another noisy image for validation (judging how well the training is performing)
# Click on <code>Plugins > CSBDeep > N2V > N2V train</code>
{| class="wikitable"
|-
| [[File:n2v-train-parameters.png|N2V train parameters]]
| <b><code>Image used for training</code></b> Choose the image which will be used for training<br><b><code>Image used for validation</code></b> Choose the image which will be used for training (you can also choose the same for both images, in this case 10% of the tiled image will be used for validation and 90% for trianing)<br><b><code>Use 3D model instead of 2D</code></b> Select this checkbox if you want to train on 3D data (this needs much more GPU memory)<br><b><code>Number of epochs</code></b> How many epochs should be performed during training<br><b><code>Number of steps per epoch</code></b> How many steps per epoch should be performed<br><b><code>Batch size per step</code></b> How many tiles are batch processed by the network per training step<br><b><code>Patch shape</code></b> The length of X, Y (and Z) of one training patch (needs to be a multiple of 16)<br><b><code>Neighborhood radius</code></b> n2V specific parameter describing the distance of the neighbor pixel replacing the center pixel<br>
|}
== Prediction ==

== Exporting trained models from Python to ImageJ / Fiji ==

== Limitations ==
- single channel only for now

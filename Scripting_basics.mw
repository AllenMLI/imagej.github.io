{{Learn | scripting}}

== Introduction ==

ImageJ and Fiji are able to run scripts written in [https://imagej.net/Scripting#Supported_languages different languages]. Besides all the differences the approach on how to use the [http://javadoc.imagej.net/ API of ImageJ] is similar for all of them. This article will introduce the basic concepts and is valid for all scripting languages.

{{Notice|The examples are written in Groovy, but they are easy to adapt for any other scripting language ImageJ supports.}}

== Get an image and perform an action ==

First we want to learn different ways to select an image and perform an action on it. In [[ImageJ1]] the image is represented by an [http://javadoc.imagej.net/ImageJ1/ij/ImagePlus.html ImagePlus] object. The recommended way to select an ImagePlus object is to use [[Script_parameters|Script Parameters]]:

<source lang='java'>
#@ ImagePlus imp
#@ Integer(label='Filter radius',description='The sigma of the gaussian filter.',value=2) sig

print(imp)

import ij.IJ

IJ.run(imp, "Gaussian Blur...", "sigma=" + sig)
</source>

Script Parameters are placed at the beginning of the script file. If only one <code>@ImagePlus</code> is used, the front most image is selected. A second Script Parameter is used to get the radius of the gaussion filter. By using <code>print(imp)</code> we verify, that an ImagePlus object is assigned to the variable.

To perform an operation on the selected image, we use <code>IJ.run()</code>. Therefore we have to import the [http://javadoc.imagej.net/ImageJ1/ij/IJ.html class IJ]. There are three different versions of the [http://javadoc.imagej.net/ImageJ1/ij/IJ.html#run(java.lang.String) run() method] of these we need the one with three parameters. The first parameter is the image to perform the action on, the second parameters defines the action (called '''command''') and the last parameter is used to configure the action (here we set the filter radius). The easiest way to find a command is to use the [[Introduction_into_Macro_Programming#The_recorder|Recorder]].

The second approach is similar to how to perform this operation using the [[Introduction_into_Macro_Programming|macro language]]:

<source lang='java'>
import ij.IJ

imp = IJ.getImage()
sig = IJ.getNumber('Filter radius:', 2)
IJ.run(imp, "Gaussian Blur...", "sigma=" + sig)
</source>

The first step is to select the front most image by using IJ's method <code>getImage()</code>. The second step is to use the method <code>getNumber()</code> to show up a dialog to enter the filter radius. Running the filter is the same as in the previous example.

Finally we want to use the [http://javadoc.imagej.net/ImageJ1/ij/WindowManager.html WindowManager] to select the front most image:

<source lang='java'>
import ij.IJ
import ij.WindowManager

imp = WindowManager.getCurrentImage()
sig = IJ.getNumber('Filter radius:', 2)
IJ.run(imp, "Gaussian Blur...", "sigma=" + sig)
</source>

This is nearly identical to the use of <code>IJ.getImage()</code> and therefore not recommended. The WindowManager class contains some useful methods that can be used to select more than one image (e.g. <code>getImageTitles()</code> and <code>getIDList()</code>.

== Opening images ==

In ImageJ there are many different ways to open images (or more general datasets). We want to introduce some of them.

The first example uses the [http://javadoc.imagej.net/SCIFIO/io/scif/services/DatasetIOService.html DatasetIOService]. It is part of [[SCIFIO]], a flexible framework for '''SC'''ientific '''I'''mage '''F'''ormat '''I'''nput and '''O'''utput. Two types of image files are opened. The first one is an example image, downloaded from the Internet. The second image can be chosen by the user. Both datasets are displayed using the [http://javadoc.imagej.net/SciJava/org/scijava/ui/UIService.html UIService] that is part of the [[SciJava]] project.

<source lang='java'>
#@ DatasetIOService ds
#@ UIService ui
#@ String(label='Image URL', value='http://wsr.imagej.net/images/clown.jpg') fileUrl
#@ File(label='local image') file

// Load a sample file from the internet and a local file of your choice.
dataset1 = ds.open(fileUrl)
dataset2 = ds.open(file.getAbsolutePath())
// Display the datasets.
ui.show(dataset1)
ui.show(dataset2)
</source>

If a script only depends on ImageJ1 functionality, one can use the function <code>IJ.openImage()</code>. It will return an ImagePlus object.

<source lang='java'>
#@ String(label='Image URL', value='http://wsr.imagej.net/images/clown.jpg') fileUrl
#@ File(label='local image') file

import ij.IJ

// Load a sample file from the internet and a local file of your choice.
imagePlus1 = IJ.openImage(fileUrl)
imagePlus2 = IJ.openImage(file.getAbsolutePath())
// Display the datasets.
imagePlus1.show()
imagePlus2.show()
</source>

<code>IJ.openImage()</code> is based on the class [http://javadoc.imagej.net/ImageJ1/ij/io/Opener.html ij.io.Opener]. You can use it directly to open images and other files (e.g. text files). The example uses the class [http://javadoc.imagej.net/ImageJ1/ij/io/OpenDialog.html ij.io.OpenDialog] to select a file. This is an alternative to the usage of the Scripting Parameter <code>@File</code>.

<source lang='java'>
import ij.io.Opener
import ij.io.OpenDialog

// Use the OpenDialog to select a file.
filePath = new OpenDialog('Select an image file').getPath()
// Open the selected file.
imagePlus = new Opener().openImage(filePath)
// Display the ImagePlus.
imagePlus.show()
</source>

== ImagePlus, ImageStack and ImageProcessor Conversion ==

When working with the ImageJ API you will run into the problem that you have e.g. a ImageProcessor, but what you need right now is a ImagePlus.  

To convert one to another use these commands:

<source lang='java'>

// ImagePlus to ImageProcessor:
ip = imp.getProcessor()

// ImageProcessor to ImagePlus:
imp = new ImagePlus('title', ip)

// ImagePlus to ImageStack:
stack = imp.getImageStack()

// ImageStack to ImagePlus:
imp = ImagePlus('title', stack)

// ImageStack to ImageProcessor:
ip = stack.getProcessor(nframe)

// ImageProcessor to ImageStack:
stack.addSlice(ip)
</source>

The following scheme depicts the relations between the different classes.
[[Image:Image_Class_Hierarchy.png|600px|center]]

== Links ==
* [https://imagej.net/Developing_Plugins_for_ImageJ_1.x#ImageJ.27s_API ImageJ API examples]
* [https://github.com/imagej/tutorials/tree/master/howtos/src/main/java/howto  ImageJ tutorials repository]

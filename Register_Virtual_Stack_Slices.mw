{{Infobox Plugin
| name                   = Register Virtual Stack Slices
| software               = Fiji
| author                 = Albert Cardona ([mailto:acardona@ini.phys.ethz.ch acardona@ini.phys.ethz.ch])
| maintainer             = Albert Cardona ([mailto:acardona@ini.phys.ethz.ch acardona@ini.phys.ethz.ch])
| source                 = [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/register_virtual_stack_slices/register_virtual_stack/Register_Virtual_Stack_MT.java;hb=HEAD on gitweb] (276 lines)
| released               = 2008
| latest version         = ?
| status                 = stable, not active
| category               = [[:Category:Registration]], [[:Category:Plugins]]
}}


<p>This plugin takes a list of image slices stored in a folder, and delivers a list of registered image slices (with enlarged canvas).</p>

<p>The plugin uses any translation, rigid (translation+rotation), similarity (translation+rotation+isotropic scaling), affine, elastic (via bUnwarpJ with B-splines) or moving least squares transformation model, aided by automatically extracted SIFT features.</p>

<p><b>Premises</b>:<br />
<ul>
<li>You have a folder with an ordered list of image files in it that ImageJ can open.</li>
<li>Each image represents a slice in a sequence.</li>
</ul>
</p>
<p>Images may have different dimensions and be of different type.</p>
<p><b>Step 1</b>: launch the "Plugins - Registration - Register Virtual Stack Slices" plugin</p>
<p><b>Step 2</b>: choose the appropriate options:<br />
<ul>
<li>The expected transformation model finding inliers (i.e. correspondences between images) in the feature extraction: translation, rigid, similarity or affine.</li>
<li>The image transformation model: translation, rigid, similarity, affine, elastic or moving least squares.</li>
<li>The advanced checkbox: whether to see the feature extraction parameters setup dialog, and if elastic, the bUnwarpJ dialog. Otherwise the plugin operates on reasonable, default parameters.</li>
</ul>   
</p>
<p><b>Step 3</b>: choose the source and target folders:<br />
<ul>
<li>Select a source folder containing the slices, at one slice per image file.</li>
<li>Select the target folder where resulting registered slices are automatically stored as tif files.</li>
</ul>   
</p>
<p>On success, a virtual stack will open showing all the registered images contained in the target folder. The virtual stack can be closed with no ill effect: images are saved in the target folder.</p>
<p>Notes:<br />
<ol>
<li>The plugin is multithreaded: more CPU cores means faster execution.</li>
<li>The two most relevant parameters in the SIFT feature extraction are:<br />
<ul>
<li><b>maximum image size</b>, which limits the low-end size of the features (i.e. decrease maximum image size to increase the size of the smallest features to extract.)</li>
<li><b>inlier ratio</b>, which determines when to reject the intersection set of feature correspondences between two images (ratio between correspondent features vs. all extracted features.)</li>
</ul></li>
<li>All types of images are accepted (8-bit, 16-bit, 32-bit and RGB), and output images are of the same type as input.</li>
</ol>
</p>


== Example ==

<p>Even this sequence of rather noisy transmission electron microscopy images, with considerable variations from slice to slice, get registered properly:</p>
<br />
<table>
<tr><td><b>Raw:</b></td><td><b>Registered:</b></td></tr>
<tr><td>[[Image:Stack4.gif]]</td><td>[[Image:Stack4-2.gif]]</td></tr></table>

== Scripting / PlugIn ==

<p>You can call the plugin in a non-interactive fashion from java code:</p>
<source lang="java">
import ini.trakem2.imaging.Registration;
import register_virtual_stack.Register_Virtual_Stack_Slices;

[...]

String source_dir = "/path/to/source/";
String target_dir = "/path/to/target/";
// can be PHASE_CORRELATION or SIFT
int registration_type = Register_Virtual_Stack_Slices.PHASE_CORRELATION;
// Can be null if using PHASE_CORRELATION
Registration.SIFTParameters sp = new Registration.SIFTParameters();
// image scale at which phase-correlation works, for performance
float scale = 0.5f;
// minimum cross-correlation score to accept phase-correlation results, otherwise try pure cross-correlation
// (use as low as 0.4 if images are noisy, or at your discretion)
float min_R = 0.7;

Register_Virtual_Stack_Slices.exec(source_dir, target_dir, registration_type, sp, scale, min_R);

</source>

<p>The above can of course be called from any scripting language, such as Jython:</p>
<source lang="python">
from ini.trakem2.imaging import Registration
from register_virtual_stack import Register_Virtual_Stack_Slices
source_dir = "/path/to/source/"
target_dir = "/path/to/target/"
registration_type = Register_Virtual_Stack_Slices.PHASE_CORRELATION
sp = new Registration.SIFTParameters()
scale = 0.5
min_R = 0.7
Register_Virtual_Stack_Slices.exec(source_dir, target_dir, registration_type, sp, scale, min_R);
</source>

== See also ==
* [http://www.ini.uzh.ch/~acardona/howto.html#register_virtual_stack Register Virtual Stack] at TrakEM2 website.
* [http://www.ini.uzh.ch/~acardona/howto.html#sift_parameters SIFT parameters explained] at TrakEM2 website.

[[Category:Plugins]][[Category:Registration]]

{{Infobox Plugin
| name                   = Register Virtual Stack Slices
| software               = Fiji
| author                 = Albert Cardona ([mailto:acardona@ini.phys.ethz.ch acardona@ini.phys.ethz.ch]), Ignacio Arganda-Carreras and Stephan Saalfeld
| maintainer             = Ignacio Arganda-Carreras ([mailto:ignacio.arganda@uam.es ignacio.arganda@uam.es])
| source                 = [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/register_virtual_stack_slices/register_virtual_stack/Register_Virtual_Stack_MT.java;hb=HEAD on gitweb] (1672 lines)
| released               = 2008
| latest version         = September 13, 2009
| status                 = stable, active
| category               = [[:Category:Registration]], [[:Category:Plugins]]
}}

{|
|style="vertical-align:top" |[[Image:Rvs_scheme.png|600px|Register Virtual Stack scheme - All images are transformed to match the reference]]
|}

This plugin takes a sequence of image slices stored in a folder, and delivers a list of registered image slices (with enlarged canvas). One of the images in the sequence can be selected by the user as '''reference''' and it will remain intact.

The plugin can perform''' 6 types of image registration techniques''':
* Translation
* Rigid (translation + rotation)
* Similarity (translation + rotation + isotropic scaling)
* Affine
* Elastic (via [[BUnwarpJ | bUnwarpJ]] with cubic B-splines) 
* Moving least squares  
All models are aided by automatically extracted [[Feature_Extraction | SIFT features]].

= User Manual =
<p><b>Premises</b>:<br />
<ul>
*'''Source folder''': You have a folder with an ordered list of image files in it that ImageJ can open.
*Each image represents a slice in a sequence.
*'''Output folder''': You have or create a folder to store the resulting virtual stack with the aligned images.
</ul>
</p>
<p>Images may have different dimensions and be of different type.</p>
<p><b>Step 1</b>: launch the "Plugins - Registration - Register Virtual Stack Slices" plugin</p>
[[Image:Rvs_main_window.png|500px|thumb|Register Virtual Stack main window]]
<p><b>Step 2</b>: choose the appropriate options:<br />
<ul>
*'''Feature extraction model'''. The expected transformation model finding inliers (i.e. correspondences or landmarks between images) in the feature extraction: translation, rigid, similarity or affine.
*'''Registration model'''. The image transformation model: translation, rigid, similarity, affine, elastic or moving least squares.
*'''Advanced setup'''. The advanced checkbox: whether to see the [[Feature_Extraction#Parameters | feature extraction parameters]] setup dialog, and if elastic, the [[BUnwarpJ | bUnwarpJ]] dialog. Otherwise the plugin operates on reasonable, default parameters.
*'''Shrinkage constrain'''. Option to regularize the registration in order to avoid sections shrinking.
</ul>   
</p>
<p><b>Step 3</b>: choose the '''source''' and '''output''' folders and the '''reference''' image (only if the "Shrinking constraint" checkbox was not marked):<br />
<ul>
*Select a source folder containing the slices, at one slice per image file.
*Select the target folder where resulting registered slices are automatically stored as TIFF files.
*Select one of the images from the source folder as the reference image.
</ul>   
</p>
<p>On success, a virtual stack will open showing all the registered images contained in the target folder. The virtual stack can be closed with no ill effect: images are saved in the target folder.</p>

== Shrinkage constrain ==
Since 09/13/2009 version and thanks to Daniel Berger, Register Virtual Stack Slices has the option of constraining the registration to avoid section shrinking for large sets of images.

== Notes ==
<ol>
<li>The plugin is multithreaded: more CPU cores means faster execution.</li>
<li>The two most relevant parameters in the [[Feature_Extraction | SIFT feature extraction]] are:<br />
<ul>
<li><b>maximum image size</b>, which limits the low-end size of the features (i.e. decrease maximum image size to increase the size of the smallest features to extract.)</li>
<li><b>inlier ratio</b>, which determines when to reject the intersection set of feature correspondences between two images (ratio between correspondent features vs. all extracted features.)</li>
</ul></li>
<li>All types of images are accepted (8-bit, 16-bit, 32-bit and RGB), and output images are of the same type as input.</li>
<li>If you selected the "Advanced setup" and "Elastic" as registration model, another window to adjust the elastic registration parameters will be shown:</li>
[[Image:Rvs_elastic_options_351x446.png|280px|thumb|Elastic registration options]]

This is actually a reduced version of the [[BUnwarpJ | bUnwarpJ]] main window. 

Briefly, the options are:
* '''Registration mode''': "Mono", "Accurate" or "Fast". "Mono" means unidirectional registration and its actually the fastest of the three modes. "Accurate" and "Fast" perform bidirectional registration and take more time.
* '''Image Subsampling factor''': the image scaling factor from 2⁰ (1) to 2⁷ (128). We recommend to use it if the images are very large.
* '''Initial and Final deformations''': from "Very Coarse" to "Very Fine" or "Super Fine". They define the number of B-spline coefficients in the deformation grid (from 2x2 to 16x16). More coefficients mean more precision but also the possibility of over-registering.
* '''Divergence and curl weights'''. They regularize the deformation to make it smooth. 
* '''Landmark weight''': relevance of adjusting the correspondences found in the feature extraction.
* '''Image weight''': relevance of the similarity between source and target image in the energy function.
* '''Consistency weight''': relevance of the consistency error between the direct and inverse deformations (only for "Accurate" or "Fast" modes).
* '''Stop threshold''': difference between the last and previous algorithm iterations that makes the registration to end.


For a complete description of the elastic parameters, please visit the [http://biocomp.cnb.csic.es/~iarganda/bUnwarpJ/faq.html FAQ of the original website].

</ol>

== Example ==

<p>Even this sequence of rather noisy transmission electron microscopy images, with considerable variations from slice to slice, get registered properly:</p>
<br />
<table>
<tr><td><b>Raw:</b></td><td><b>Registered:</b></td></tr>
<tr><td>[[Image:Stack4.gif]]</td><td>[[Image:Stack4-2.gif]]</td></tr></table>

== Scripting / PlugIn ==

<p>You can call the plugin in a non-interactive fashion from a jython script:</p>
<source lang="python">
from register_virtual_stack import Register_Virtual_Stack_MT

source_dir = "/path/to/source/"
target_dir = "/path/to/target/"

p = Register_Virtual_Stack_MT.Param()
# The "maximum image size":
p.sift.maxOctaveSize = 1024
# The "inlier ratio":
p.minInlierRatio = 0.05

Register_Virtual_Stack_MT.exec(source_dir, target_dir, p);
</source>

== See also ==
* [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=mpicbg.git;a=blob;f=mpicbg/imagefeatures/FloatArray2DSIFT.java;hb=HEAD FloatArray2DSIFT.java] which contains the subclass Param which is the 'sift' member of the Register_Virtual_Stack_Slices.Param subclass.
* [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/register_virtual_stack_slices/register_virtual_stack/Register_Virtual_Stack_MT.java;hb=HEAD Register_Virtual_Stack_MT.java], including the Param subclass.

[[Category:Plugins]][[Category:Registration]]

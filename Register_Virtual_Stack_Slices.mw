{{Infobox Plugin
| name                   = Register Virtual Stack Slices
| software               = Fiji
| author                 = Albert Cardona ([mailto:acardona@ini.phys.ethz.ch acardona@ini.phys.ethz.ch]), Ignacio Arganda-Carreras and Stephan Saalfeld
| maintainer             = Ignacio Arganda-Carreras ([mailto:ignacio.arganda@uam.es ignacio.arganda@uam.es])
| source                 = [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/register_virtual_stack_slices/register_virtual_stack/Register_Virtual_Stack_MT.java;hb=HEAD on gitweb] (753 lines)
| released               = 2008
| latest version         = June 18, 2009
| status                 = stable, active
| category               = [[:Category:Registration]], [[:Category:Plugins]]
}}

{|
|style="vertical-align:top" |[[Image:Rvs_scheme.png|512px|Register Virtual Stack scheme - All images are transformed to match the reference]]
|}

<p>This plugin takes a sequence of image slices stored in a folder, and delivers a list of registered image slices (with enlarged canvas). One of the images in the sequence is selected by the user as '''reference''' and it will remain intact.</p>

<p>The plugin uses any translation, rigid (translation+rotation), similarity (translation+rotation+isotropic scaling), affine, elastic (via [[BUnwarpJ | bUnwarpJ]] with B-splines) or moving least squares transformation model, aided by automatically extracted [[Feature_Extraction | SIFT features]].</p>

== User Manual ==
<p><b>Premises</b>:<br />
<ul>
<li>'''Source folder''': You have a folder with an ordered list of image files in it that ImageJ can open.</li>
<li>Each image represents a slice in a sequence.</li>
<li>'''Output folder''': You have or create a folder to store the resulting virtual stack with the aligned images.</li>
</ul>
</p>
<p>Images may have different dimensions and be of different type.</p>
<p><b>Step 1</b>: launch the "Plugins - Registration - Register Virtual Stack Slices" plugin</p>
<p><b>Step 2</b>: choose the appropriate options:<br />
<ul>
<li>'''Feature extraction model'''. The expected transformation model finding inliers (i.e. correspondences or landmarks between images) in the feature extraction: translation, rigid, similarity or affine.</li>
<li>'''Registration model'''. The image transformation model: translation, rigid, similarity, affine, elastic or moving least squares.</li>
<li>'''Advanced setup'''. The advanced checkbox: whether to see the [[Feature_Extraction#Parameters | feature extraction parameters]] setup dialog, and if elastic, the [[BUnwarpJ | bUnwarpJ]] dialog. Otherwise the plugin operates on reasonable, default parameters.</li>

{|
|style="vertical-align:top" |[[Image:Rvs_main_window.png|thumb|542px|Register Virtual Stack main window]]
|}


</ul>   
</p>
<p><b>Step 3</b>: choose the '''source''' and '''output''' folders and the '''reference''' image:<br />
<ul>
<li>Select a source folder containing the slices, at one slice per image file.</li>
<li>Select the target folder where resulting registered slices are automatically stored as TIFF files.</li>
<li>Select one of the images from the source folder as the reference image.</li>
</ul>   
</p>
<p>On success, a virtual stack will open showing all the registered images contained in the target folder. The virtual stack can be closed with no ill effect: images are saved in the target folder.</p>

==== Notes: ====
<ol>
<li>The plugin is multithreaded: more CPU cores means faster execution.</li>
<li>The two most relevant parameters in the SIFT feature extraction are:<br />
<ul>
<li><b>maximum image size</b>, which limits the low-end size of the features (i.e. decrease maximum image size to increase the size of the smallest features to extract.)</li>
<li><b>inlier ratio</b>, which determines when to reject the intersection set of feature correspondences between two images (ratio between correspondent features vs. all extracted features.)</li>
</ul></li>
<li>All types of images are accepted (8-bit, 16-bit, 32-bit and RGB), and output images are of the same type as input.</li>
<li>If you selected the "Advanced setup" and "Elastic" as registration model, another window to adjust the elastic registration parameters will be shown:</li>

{|
|style="vertical-align:top" |[[Image:Rvs_elastic_options_351x446.png|thumb|351px|Elastic registration options]]
|}
This is a reduced version of the [[BUnwarpJ | bUnwarpJ]] main window. For a complete description of the parameters, please visit the [http://biocomp.cnb.csic.es/~iarganda/bUnwarpJ/faq.html FAQ of the original website].

</ol>

== Example ==

<p>Even this sequence of rather noisy transmission electron microscopy images, with considerable variations from slice to slice, get registered properly:</p>
<br />
<table>
<tr><td><b>Raw:</b></td><td><b>Registered:</b></td></tr>
<tr><td>[[Image:Stack4.gif]]</td><td>[[Image:Stack4-2.gif]]</td></tr></table>

== Scripting / PlugIn ==

<p>You can call the plugin in a non-interactive fashion from a jython script:</p>
<source lang="python">
from register_virtual_stack import Register_Virtual_Stack_MT

source_dir = "/path/to/source/"
target_dir = "/path/to/target/"

p = Register_Virtual_Stack_MT.Param()
# The "maximum image size":
p.sift.maxOctaveSize = 1024
# The "inlier ratio":
p.minInlierRatio = 0.05

Register_Virtual_Stack_MT.exec(source_dir, target_dir, p);
</source>

== See also ==
* [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=mpicbg.git;a=blob;f=mpicbg/imagefeatures/FloatArray2DSIFT.java;hb=HEAD FloatArray2DSIFT.java] which contains the subclass Param which is the 'sift' member of the Register_Virtual_Stack_Slices.Param subclass.
* [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/register_virtual_stack_slices/register_virtual_stack/Register_Virtual_Stack_MT.java;hb=HEAD Register_Virtual_Stack_MT.java], including the Param subclass.

[[Category:Plugins]][[Category:Registration]]

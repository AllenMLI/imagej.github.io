= Welcome! =

Fiji is planning on applying to the Google Summer of Code 2010 program.  As mentoring organizations have not yet been accepted, there is no guarantee that Fiji will be asked to participate.  This page is to help plan proposed student projects.

This page contains project ideas culled from the Fiji user and developer community.  You can get started by reading some project descriptions, and the mailing list thread(s) that spawned them.  Also consider joining the developer mailing list, or finding us on IRC.  Details can be found in [[Help:Contents]].

If none of the listed projects suit you, but you have your own project idea instead, just throw your ideas at us, on the developer mailing list!  (Of course, it should be related to Fiji...)

= General Requirements =
All projects have the following basic requirements:

* Unless otherwise stated, projects will require programming in Java.
* All materials must be released under the [http://www.gnu.org/copyleft/gpl.html GNU General Public License (GPL)], version 2.
* Individual students shall retain copyright on their works.
* Projects must be tracked and managed in Git (we will help you with setting up a repository).
* Weekly project status reports should be sent to the project's mentors.  Each status report should outline what was accomplished that week, any issues that prevented that week's goals from being completed, and your goals for the next week.  This will help you to break your project down into manageable chunks, and will also help the project's mentors to better support your efforts.

Interested students are encouraged to read the
[http://code.google.com/p/google-summer-of-code/wiki/AdviceforStudents Advice for GSoC Students Page],
as it has excellent suggestions that might help you to pick a
project and shape your proposal.

If your proposal is accepted by the Fiji Development Community
you will be expected to work on it full time during the summer.
It is cool if you want to take a week off for vacation, but remember
that Google is hiring you for the summer to help us improve Fiji.
That should be your focus.  Don't expect that you will be able to
work on your project for just 10 hours a week and then collect at
the end.

If your original proposal doesn't pan out or becomes too much of
a challenge, you should work with your mentor to help redefine it.
We really want to see every project succeed this summer, as there
is a great deal of interest in these projects from within the
user community.

Students can apply for the program at the
[http://code.google.com/soc/ Google Summer of Code website].
Please consider reviewing our [[SoC 2010 Template]] and answering
its questions as part of your application.


= Project ideas =



== Applying machine learning to the image segmentation problem ==

The term ''image segmentation'' describes the task where objects in an image are to be outlined, so that every pixel is connected to either a named object, or background.

Segmentation is traditionally a very difficult problem, especially in the presence of variable lighting, noise, or low contrast.

Many segmentation algorithms have been implemented in Fiji to perform image segmentation, such as [[Auto Threshold]] and [[Auto Local Threshold]], but in practice, none of them might work, as they were designed with specific images in mind, and these expectations might not be met by your images.

Recently, a new class of segmentation algorithms has been emerging: segmentation by example.  These algorithms require a set of examples from which a model is calculated which can be applied to other -- similar-looking -- images.

We will consider applications for implementations that are either as generic as possible (i.e. they apply to any images), or that try to solve a very specific problem (such as segmenting neurons in serial sections imaged with electron microscopy, or with confocal imaging.)

We have several data sets of images and their corresponding manual segmentations (for training the algorithm). See for example:

* <i>Drosophila</i> larva brain imaged with ssTEM: [http://t2.ini.uzh.ch/data.html http://t2.ini.uzh.ch/data.html]
* <i>Drosophila</i> embryonic nuclei imaged with confocal microscopy.

You are welcome to use any scientifically-relevant dataset of your choice, but we will give priority to biologically-oriented data sets.


'''Goal:''' Implement a number of segmentation algorithms based on machine learning.<br />
'''Language:''' Java.<br />
'''Mentor:''' Johannes Schindelin (johannes.schindelin AT gmx.de) or Albert Cardona (acardona AT ini phys ethz ch)<br />

== Add JMathLib (Matlab clone) support ==

Quite a few algorithms are available as proof-of-concept Matlab scripts.  While it is [ftp://ftp.alvyray.com/Acrobat/6_Pixel.pdf wrong to think of pixels as little squares], and literally all Matlab scripts to perform image processing are suffering from that shortcoming, it would be very nice nevertheless to be able to run the scripts without having to buy Matlab licenses just for that purpose.

Happily, there is a Matlab clone written in Java: [http://www.jmathlib.de/ JMathLib].  While it is apparently not a speed demon, it should be useful to add JMathLib as a new scripting language to ImageJ, and integrate it into Fiji so that Matlab scripts can be executed just like all other ImageJ scripts, too.

The project would consist of

* getting as many .m scripts for image processing as possible,

* integrating JMathLib as a script language into Fiji (using the infrastructure shared by Jython, JRuby, Clojure, Javascript and BeanShell) -- I suggest having a look at [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/JRuby/JRuby_Interpreter.java the JRuby Interpreter] for an example,

* adapting (or overriding) JMathLib's image toolbox so that it integrates seamlessly with ImageJ,

* test (and fix what does not work) as many .m scripts as possible.

'''Goal:''' Integrate JMathLib as a new scripting language.<br />
'''Language:''' Java.<br />
'''Mentor:''' Johannes Schindelin (johannes.schindelin AT gmx.de)<br />

== Implementing algorithms for imglib ==

The new imglib supports dimension-, storage- and data type independent image processing. This library has some algorithms built-in already but there is a strong need to generically implement more general image processing algorithms, storage strategies and data types such as:

* Interpolation (Cubic, Sinc, Spline, ...)
* Histograms
* Entropy Filter, Average Filter, Percentile(Min, Median, Max) Filter, ...
* Memory Management for partial image loading
* Color Spaces and Color Space Conversions
* Generic Import/Export

'''Goal:''' Implement as many image processing algorithms using the imglib as possible<br />
'''Language:''' Java.<br />
'''Mentor:''' Stephan Preibisch (preibisch AT mpi-cbg.de) or Johannes Schindelin (johannes.schindelin AT gmx.de)<br />

== Translate ITK methods into Fiji ==

The new '''imglib''' library facilitates the task of translating [http://www.itk.org/itkindex.html ITK routines] into Fiji. The main idea of this project is to import interesting algorithms from [http://www.itk.org/itkindex.html ITK] into native imglib code, mainly methods for:

* 2D/3D registration.
* 2D/3D segmentation.
* Interpolation (for n-dimensional images).
* Optimization.

'''Goal:''' Port ITK methods into Fiji.<br>
'''Language:''' Java, C++, ITK<br>
'''Mentor:''' Ignacio Arganda-Carreras (iarganda@mit.edu), Stephan Preibisch (preibisch@mpi-cbg.edu) or Johannes Schindelin (johannes.schindelin@gmx.de)

== Integrate Micro-Manager into Fiji ==

This project requires a bit of knowledge in compiling C++ code on Linux, MacOSX and Windows.  The idea is to make a recipe that other people can use to compile new releases of [http://www.micro-manager.org/ Micro-Manager], as well as integrate it into the Fiji project for a smooth user experience.  To ensure that support for Micro-Manager is not broken inadvertently, you shall add regression tests, too.

'''Goal:''' Provide an easy way to compile and ship Micro-Manager with Fiji.<br>
'''Language:''' Java, C++, shell<br>
'''Mentor:''' Johannes Schindelin (johannes.schindelin@gmx.de)

== Morphological classification via hierarchical clustering ==

The idea behind this project is to implement interactive object classification on an image or stack containing various binary objects, based on morphological data residing on the Results Table. This data will be submitted to one of various hierarchical cluster analysis methods and produce a dendrogram graph. The distance between clusters in the dendrogram is represented by a "distance" axis and the user should be able to select the number of clusters via a slider on the "distance" axis. The objects in the original image are then labelled according to the cluster they belong defined by the distance slider.


'''Goal:''' Provide a means of data mining information from images using an interactive form of labelling based on cluster analysis.<br>
'''Language:''' Java, Weka library<br>
'''Mentor:''' G. Landini (G.Landini at bham.ac.uk) and Johannes Schindelin (johannes.schindelin@gmx.de)

== Applying machine learning to the image classification problem ==

This project is motivated by a specific biological questions associated with large-scale image set describing patterns of gene expression in <i>Drosophila</i> embryogenesis [http://www.fruitfly.org/cgi-bin/ex/insitu.pl]. It is inspired by the software developed under the Cell Profiler project [http://www.pnas.org/content/106/6/1826.long].

General formulation of the problem: given a large set of related images, use (and extend) Fiji feature detection capabilities to extract numerical descriptors from the images and use them for iterative generation of a classifier based on user feedback.

Practically, develop an interface where a user (experienced biology expert) can select from a large set of <i>Drosophila</i> embryo images a subset of pictures showing similar anatomical features (highlighted by staining) while interactively assessing the performance of machine learning derived classifier on the whole set of images. The user should be able to influence the machine learning in two ways, by selecting or de-selecting training set images and by influencing the selection of the pre-computed features used in training. 

This approach has been successfully used to classify embryo images yet a usable interactive implementation is missing [http://bioinformatics.oxfordjournals.org/cgi/content/full/24/17/1881]. Interestingly, the images are described by a control vocabulary annotation which presents an unique way to independently validate the results of the machine learning and could also be incorporated in the image selection process (i.e. starting from a more homogenous group).

<b>Pre-requisites:</b>
*Large scale database of annotated RNA in situ images of gene expression patterns consisting of about 90,000 image representing 6000 genes. 
*Feature extraction approaches implemented in Fiji
*Machine learning implemented in Fiji ([http://www.cs.waikato.ac.nz/ml/weka/ Weka])
*Paper describing the principles of unsupervised machine learning approach on this dataset using combination of number of invariant features [http://bioinformatics.oxfordjournals.org/cgi/content/full/24/17/1881]
*Biologically motivated candidate with significant programming skills

<b>Goal</b> Implement a user interface for supervised machine learning<br>
<b>Language</b> Java<br>
<b>Mentors</b> Pavel Tomancak (tomancak at mpi-cbg.de) and Erwin Frise<br>


== Provide cluster support for Fiji ==

Fiji runs fine on desktop machines, but for some tasks, it is better to use a cluster.

To that end, Fiji already supports "headless" mode, i.e. operation without the need to have a graphical user interface running.  But that is not enough:

* There must be an easy way to define what operation should be performed on what set of images, or on what set of subimages.
* Clusters come in all kinds of flavors with a lot of different schedulers.  A general backend with adapters for the most common schedulers will be needed.
* The user should have a nice user interface to see the progress, and the end result.
* For convenience, Fiji should offer the option to make sure that the current Fiji is installed.

'''Goal:''' Add a component to schedule processes.<br />
'''Language:''' Java.<br />
'''Mentor:''' Pavel Tomancak (tomancak at mpi-cbg.de) and Johannes Schindelin (johannes.schindelin at gmx.de)<br />

= Other Resources =
* [[SoC 2010 Application]]

= Other links =
* [http://groups.google.com/group/fiji-devel Fiji's developer mailing list]
* [http://www.cs.waikato.ac.nz/ml/weka/ Weka project]
* [[IRC|#fiji-devel channel]] on irc.freenode.net
* [[Links|more links]]

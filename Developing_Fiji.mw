{{Template:Outdated}}{{Development | fiji}}
Fiji is a community effort.  So we are happy whenever we see new people developing Fiji!

== Purpose ==

The purpose of this tutorial is to get you started hacking on [https://github.com/fiji/ Fiji's source code] (i.e., the core Fiji plugins). If you need to develop a ''new plugin'' for ImageJ, you do not actually need Fiji's source. Rather, see these resources:
* {{GitHub|org=imagej|repo=minimal-ij1-plugin|label=minimal-ij1-plugin}} project template
* [[Introduction into Developing Plugins]] tutorial
* [https://www.youtube.com/watch?v=Ac-6gJ2eRb0 Developing ImageJ 1.x plugins with NetBeans] screencast

See also [[Developing Fiji in Eclipse]] for a tutorial specific to the Eclipse IDE.

== Getting started ==

First, you have to [[Downloading_and_Building_Fiji_From_Source|download and build Fiji]]. If you do not know Git yet, we have a [[Git for dummies|concise introduction]] for you.

== The ImageJ launcher ==

There is a program called "ImageJ-win32.exe", "ImageJ-linux64" or similar in Fiji's root directory.  Its main purpose is to load a Java virtual machine with known-good options, and then launch ImageJ.

However, it is much more powerful than that.  Amongst other things, you can

* Open images: '''./ImageJ-<platform> example.jpg'''
* Call Jython scripts: '''./ImageJ-<platform> example.py''' (also works for JRuby scripts when they have an '''.rb''' extension, for Beanshell scripts with '''.bsh''' extension, '''.clj''' for Clojure and '''.js''' for Javascript)
* Call the Jython interpreter: '''./ImageJ-<platform> --jython''' (the classpath will be the same as when calling ImageJA), and likewise '''--jruby''', '''--bsh''' and '''--js''' for the respective language's command-line interpreters
* Run Fiji with the system Java instead of its own one: '''./ImageJ-<platform> --system'''.  But beware: this might fail since some plugins need at least Java 1.5, and the 3D viewer needs Java3D.
* Show the java command line instead of running Fiji: '''./ImageJ-<platform> --dry-run'''
* Compile a Java class: '''./ImageJ-<platform> --javac example.java'''
* Run a Java class' main() method: '''./ImageJ-<platform> --main-class=example'''
* Pass some [[JavaOptions|Java options]]: '''./ImageJ-<platform> -server --''' (everything that comes before a '''--''' is interpreted as Java option)
* Add '''.''' to the classpath and execute the given class' '''main()''' method: '''./ImageJ-<platform> Example.class'''
* Link Fiji into the PATH: '''ln -s $(pwd)/ImageJ-<platform> $HOME/bin/fiji && fiji'''
* Start Fiji and run a menu entry directly: '''./ImageJ-<platform> --run System_Clipboard''' (the underscore was used in place of a space to avoid having to quote the argument)

The ImageJ launcher can do more, just call '''./ImageJ-<platform> --help''' for a short description.

== Building Fiji ==

Fiji is organized into a set of [[Maven]] projects. For convenience and speed, there is [[SciJava]]'s minimal Maven-lookalike [[MiniMaven]] to build Fiji, but it is recommended to use an [[IDEs|Integrated Development Environment]], or at least real Maven.

For details, please see [[Downloading and Building Fiji From Source]].
See also the [[Supported Compilers]] page for more information.

== Testing ==

It is strongly recommended to write regression tests (also known as ''unit tests''). It is [[Fiji_contribution_requirements#Regression_tests|easy]].

Furthermore, it is highly recommended to write and run unit tests in an [[IDEs|Integrated Development Environment]] for efficient debugging.

You may also want to measure the code coverage of your tests - one way is described in the page [[Code Coverage in Fiji]].

At some point, you might want to debug whatever you wrote.  There's a small [[Debugging intro]] page.

== Discussing code ==

When you want to discuss your changes to some Fiji component, the preferred way is to inline a patch and send it to the [mailto:fiji@fiji.sc fiji-devel mailing list]. You can also send a link to your repository, e.g. a fork of {{GitHub|repo=fiji|label=the Fiji repository on github.com}}, but then commenting is not as easy (and the discussion will involve fewer developers).

When discussing larger chunks of code (or a patch) on [irc://irc.freenode.net/fiji-devel IRC], please do not paste them directly, but use a [http://gist.github.com pastebin] instead.

To point at specific code on IRC or via mail, you can also do so by posting links to our [[Git|Gitweb]]. See also [[GitHub Tricks]].

== Contributing ==

Please have a look at the excellent ''[[How to contribute to an existing plugin or library]]'' tutorial.

== Providing documentation ==

A plugin wants to be used. Therefore you want to give users some information about it, and most likely also a tutorial how to use it.

If you have an account on this Wiki, you can easily create new tutorials with the [[Tutorial Maker]].

== Further reading for developers ==

*[[Overview of Fiji's source code]]
*[[Description of ImageJ's plugin architecture]]
*[[Tips for developers]]
*[http://jenkins.imagej.net/job/ImageJ1-javadoc/lastStableBuild/artifact/target/site/apidocs/ ImageJ1 Javadoc ZIP] (for offline usage)
*[http://jenkins.imagej.net/job/ImageJ-daily/lastStableBuild/artifact/target/site/apidocs/ ImageJ2 Javadoc ZIP] (for offline usage)
*[[Developers HowTo]]
*[http://www.imagingbook.com/index.php?id=102 ImageJ plugin writing tutorial]
*[http://albert.rierol.net/imagej_programming_tutorials.html ImageJ programming tutorials]
*[[Uploading plugins]]
*[[Developing Fiji in Eclipse]]
*[[Git]]
*[[Project ideas]]
*[[Code Coverage in Fiji]]
*[[Debugging intro|Introduction to debugging]]
*[[Profiling Java Code]]
*[[Tips for C++ developers]]

[[Category:Development]]

{{Warning|Prior to MATLAB R2017b, MATLAB ships with Java 7, but ImageJ requires Java 8. You will need to change your MATLAB installation to use Java 8, by following the instructions for your platform: [http://www.mathworks.com/matlabcentral/answers/130359-how-do-i-change-the-java-virtual-machine-jvm-that-matlab-is-using-on-windows Windows], [http://www.mathworks.com/matlabcentral/answers/103056-how-do-i-change-the-java-virtual-machine-jvm-that-matlab-is-using-for-mac-os macOS] or [http://www.mathworks.com/matlabcentral/answers/130360-how-do-i-change-the-java-virtual-machine-jvm-that-matlab-is-using-for-linux-os Linux].

If you run MATLAB R2017b and later, you don't need to do this, as it ships and uses Java 8 already.
}}
{{Learn | languages}}'''ImageJ-MATLAB''' is an extension which:
* Translates data between ImageJ images and MATLAB matrices.
* Enables execution of MATLAB scripts from inside ImageJ's [[Script Editor]].
* Lets you launch ImageJ and interact with it from inside MATLAB.
* Allows developers to write additional [[plugins]] which [[extensibility|extend]] these capabilities in new directions.

=MATLAB tutorial for ImageJ=

== Prerequisites ==

* Add the [[List_of_update_sites|ImageJ-MATLAB]] update site. See [[Following an update site]] for more detail.
*# You go to <code>Fiji > Update...</code>
*# Once checking status is done, open <code>Manage update sites</code>
*# Tick <code>ImageJ-MATLAB</code>
*# And then click <code>Apply changes</code> on ImageJ Updater
*# This will literally update and replace the existing, non-functional <code>ImageJ.m</code> file in the scripts folder with the genuine one.
* You will need to install your own licensed copy of [http://www.mathworks.com/products/matlab/ MATLAB]. All that is provided with ImageJ are adapters for evaluating scripts written in ImageJ to [[MATLAB]], and converters between ImageJ and [[MATLAB]] data structures.
* Prior to MATLAB R2017b, MATLAB ships with Java 7, but ImageJ requires Java 8. You will need to change your MATLAB installation to use Java 8, by following the instructions for your platform: [http://www.mathworks.com/matlabcentral/answers/130359-how-do-i-change-the-java-virtual-machine-jvm-that-matlab-is-using-on-windows Windows], [http://www.mathworks.com/matlabcentral/answers/103056-how-do-i-change-the-java-virtual-machine-jvm-that-matlab-is-using-for-mac-os macOS] or [http://www.mathworks.com/matlabcentral/answers/130360-how-do-i-change-the-java-virtual-machine-jvm-that-matlab-is-using-for-linux-os Linux]. If you run MATLAB R2017b and later, you don't need to do this, as it ships and uses Java 8 already. 
** The command <code>version -java</code> will return the current Java version used by MATLAB
* If you're new to [[MATLAB]], first check out Mathworks' [http://www.mathworks.com/help/matlab/getting-started-with-matlab.html getting started guide].
* If you're familiar with the [[MATLAB]] language but haven't written .m scripts before, look through the [http://www.mathworks.com/help/matlab/scripts.html script examples].

== Creating MATLAB scripts inside ImageJ ==

Using the [[Script Editor]] you will be able to select [[MATLAB]] from the [[Script_Editor#Choosing_a_language | language menu]]. You can also install and run .m scripts via the [[Scripting_Help#Creating_scripts_and_using_.22refresh_scripts.22 | standard script plugin infrastructure]].

Actually running a [[MATLAB]] script from ImageJ is effectively like calling [http://www.mathworks.com/help/matlab/ref/eval.html eval] on the script's contents. The script will be evaluated as such in a remote [[MATLAB]] instance (which will be launched automatically, if needed). Note that only scripts, not functions, can be evaluated in this way. See [http://www.mathworks.com/help/matlab/learn_matlab/scripts-and-functions.html the MATLAB documentation] for an explanation of these concepts.

Options for controlling the startup of [[MATLAB]], or killing existing [[MATLAB]] processes (e.g. if hidden) can be accessed via:
   {{bc | Edit | Options | MATLAB...}}

NB: because the script is being passed from ImageJ to a remote [[MATLAB]], [[MATLAB]] will not have access to ImageJ's classpath. Objects can be passed as variables to [[MATLAB]] (e.g. by using @ annotation) but only if they are valid [[MATLAB]] classes or specially handled classes.

For example, by default all [http://matlabcontrol.googlecode.com/svn/javadocs/doc/matlabcontrol/extensions/MatlabNumericArray.html MatlabNumericArrays] will be converted to matrices within [[MATLAB]]. We also support auto-conversion of ImageJ Datasets out of the box, which can be read in by scripts using "@matrix" parameters:

<source lang="matlab">
% @matrix data
% @OUTPUT net.imagej.Dataset rval
% @OUTPUT net.imagej.Dataset mask

% Performs dilation with a 3x3 square,
% operating on the active dataset
% Outputs the dilated mask and the original image
% with the mask applied.

rval = uint8(data); % convert to uint8
rval = mat2gray(rval); % normalize data
mask = im2bw(rval,0.5); % make logical mask
se = strel('square',3); % create structure to use in dilation
mask = imdilate(mask,se); % perform dilation on the mask
rval(~mask) = 0; % subtract mask from original dataset
</source>

This script will take the active Dataset, set it as an array variable named "data" in [[MATLAB]], and set the matrixSum output value to the sum of the first three dimensions of the dataset. Scripts requiring ImageJ classes without auto-conversion support should [[#Running ImageJ within MATLAB | launch ImageJ from within MATLAB]].


=== Global state ===

MATLAB retains state (e.g. declared variables) as commands are executed, and ImageJ makes no special effort to clean up after a script. So whether running internally or communicating externally with MATLAB, state will be available to and persist after script execution. Thus one can, for example, write scripts in ImageJ referencing variables declared in MATLAB, without actually initializing them in the script.

=== Passing Objects ===

The caveat to [[#Global_state|global state]] is that, when running ImageJ externally, ImageJ and MATLAB run in separate [http://docs.oracle.com/javase/7/docs/technotes/guides/vm/ JVMs]. As a result, most objects can not be passed between the two. This makes Datasets (and arrays) the currency that is passed between these applications.

=== Return values ===

Most of the ImageJ scripting languages have implicit return values. As mentioned above, ImageJ will only execute true scripts, which do not have return values (in the MATLAB functional sense). There is a similar concept in the <code>ans</code> variable, which automatically gets the return value of executed statements if they are not explicitly assigned. However, due to the [[#Global_state|global nature]] of the ImageJ-MATLAB script language, it is not necessarily clear if <code>ans</code> was set by the script or a pre-existing command. Thus the decision was made that ImageJ-MATLAB scripts will '''never''' implicitly return a value. Instead, [[Script_parameters|the @OUTPUT annotation]] should always be used - even for <code>ans</code>, as shown here:

<source lang="matlab">
% @OUTPUT double[] ans

% This trivial script demonstrates the use of
% the "ans" variable in the SciJava-MATLAB
% script language.

% Unassigned statements in MATLAB are automatically
% assigned to "ans". However, these scripts will not
% return "ans" unless it is explicitly requested as
% an output parameter.

0
</source>

=== Importing classes ===

{{ImportingClasses|lang=MATLAB}}
When running ImageJ externally, [[MATLAB]] will not have ImageJ classes in its classpath - so they can not simply be imported. Although [[MATLAB]] does support [http://www.mathworks.com/help/matlab/matlab_external/bringing-java-classes-and-methods-into-matlab-workspace.html editing its classpath] this is NOT recommended, as the classes loaded by [[MATLAB]] will not be the same as those loaded in ImageJ.

Instead, you can [[#Running ImageJ within MATLAB|launch ImageJ inside MATLAB]] and have it take care of managing the class loading for you. [[MATLAB]] then supports the use of import statements to [http://www.mathworks.com/help/matlab/matlab_external/bringing-java-classes-and-methods-into-matlab-workspace.html#f46341 simplify class names].


== Running ImageJ within MATLAB ==

{{Notice | If you need to run ImageJ with Java 8 (for example, if the [http://imagej.net/List_of_update_sites Java-8 update site] is enabled) then you need to update MATLAB to [http://www.mathworks.com/matlabcentral/answers/130359-how-do-i-change-the-java-virtual-machine-jvm-that-matlab-is-using-on-windows run with Java 8] as well.}}

The ImageJ update site provides an <code>ImageJ.m</code> script that will start up an ImageJ instance inside a running [[MATLAB]] application. Launching the script is the same as for [[Miji]]:

<source lang="matlab">
addpath('/Applications/Fiji.app/scripts') % Update for your ImageJ installation as appropriate
ImageJ;
</source>

Now, you should see a new ImageJ instance shows up as a window. [[File:ImageJ_launched_from_MATLAB.png|400px]]

In your base workspace, you'll find a variable <code>JVM</code>, which is a <code>net.imagej.matlab.ImageJMATLABCommands</code> object.

* <code>IJM.getDataset()</code> will create a MATLAB array from the active ImageJ image using its window title as the variable name (<code>.</code> will be escaped with <code>_</code>).

* <code>IJM.getDatasetAs(name)</code> will create a MATLAB array from the active ImageJ image using the variable name <code>name</code> (as string).

* <code>IJM.show(name)</code> will display an image in ImageJ out of a MATLAB array specified by <code>name</code> (as string). '''Limitation:''' a multi (>2) dimentional image or multi channel image is treated as a stack of single channel images irrespective of the dimensions. Also, data is always handled as 32bit per channel.

In the MATLAB command window, you'll see something like this:

<source>
--------------------------------------------------------------
ImageJ-MATLAB 0.7.2: MATLAB to ImageJ Interface
--------------------------------------------------------------
JVM> Version: 1.8.0_144
JVM> Total amount of memory: 370176 Kb
JVM> Amount of free memory: 122756 Kb

-- Welcome to ImageJ-MATLAB --
ImageJ-MATLAB consists of an extensible set of commands for passing information between ImageJ and MATLAB.
See the individual sections below for a list of available commands.

For more information and examples see:
	http://imagej.net/MATLAB-Scripting

--- MATLAB Command Plugins ---

-- ImageJ MATLAB commands --

Usage: IJM.[command]
	help - prints a brief description of available commands
	getDataset - creates a MATLAB matrix from the active ImageJ image
	getDatasetAs(name) - creates a MATLAB matrix from the active ImageJ image, and assigns it to the specified variable name
	show(name) - takes the MATLAB matrix with the specified name and displays it as an image



--------------------------------------------------------------
Status> ImageJ is running.
--------------------------------------------------------------
</source>


The startup process automatically injects the ImageJ classpath into the [[MATLAB]] classpath, merging the two. At this point, you'll have a working ImageJ and can now [[#Creating MATLAB scripts inside ImageJ|run MATLAB scripts as normal]] with access to the full unified classpath.

The following JAVA commands work in MATLAB command window to open a sample image in ImageJ.
<source>
imp = ij.IJ.openImage("http://imagej.nih.gov/ij/images/boats.gif");
imp.show()
</source>
[[File:boats_screenshot.png|400px]]


The following will open a MATLAB array data as an image in ImageJ.
<source>
corn_gray = imread('corn.tif',3);
IJM.show('corn_gray')
</source>
[[File:corn_gray.png|400px]]

Additionally, the {{GitHub|org=scijava|repo=scripting-matlab|label=Scripting-MATLAB}} library also includes an extensible [[MATLAB]] command framework. This allows for the creation of utility classes that will be automatically populated into [[MATLAB]] variables for easy access. For example, you could use ImageJ to open a dataset and perform thresholding (or any other processing steps), then in [[MATLAB]] use the <code>IJM.getDatasetAs(name)</code> command to set the active dataset as a [[MATLAB]] matrix variable with a specified name, for further analysis.

For example, instead of using a script as [[#Creating MATLAB scripts inside ImageJ|described above]], we could achieve the same result by executing the following commands in the MATLAB prompt:

<source lang="matlab">
IJM.getDatasetAs('data') % import the image as a MATLAB matrix
rval = uint8(data); % convert to uint8
rval = mat2gray(rval); % normalize data
mask = im2bw(rval,0.5); % make logical mask
se = strel('square',3); % create structure to use in dilation
mask = imdilate(mask,se); % perform dilation on the mask
rval(~mask) = 0; % subtract mask from original dataset
IJM.show('rval') % display the rval array in ImageJ
IJM.show('mask') % display the mask array in ImageJ
</source>

= Source =

* {{GitHub|org=scijava|repo=scripting-matlab|label=Scripting-MATLAB}} provides the script engine plugins.
* {{GitHub|org=imagej|repo=imagej-matlab|label=ImageJ-MATLAB}} defines the ImageJ-specific translators.

= Video presentation =

{{#widget:Vimeo|id=140929686|caption=ImageJ+MATLAB: Reunited}}

= Publication =
* {{Publication | ImageJ-MATLAB}}

[[Category:Scripting]]
[[Category:MATLAB]]
[[Category:Citable]]

= See also =

* [[Creating Imglib2 images in MATLAB]]
* [[Using TrackMate from MATLAB]]
* [[Analyzing TrackMate results with MATLAB]]
* [[Comparison of Matlab functions and Ops]]
* [[Miji]] (legacy)

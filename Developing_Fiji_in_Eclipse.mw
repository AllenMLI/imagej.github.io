==Introduction==

This tutorial is about how to setup [http://eclipse.org/ Eclipse] for developing Fiji on a *nix operating system.

==Install Eclipse==

Install Eclipse using your preferred package manager or download the appropriate binaries of the [http://www.eclipse.org/downloads/ Eclipse IDE for Java Developers].  Launch Eclipse and decide for a workspace location (e.g. <code>~/worspace</code>).  For me, Eclipse is not stable with Sun Java 6.  That is, you will eventually have to install Java 5 as an alternative JRE and make a custom launcher for Eclipse, e.g.

<source lang="bash">
/usr/lib/jvm/java-1.5.0-sun/bin/java -cp /usr/lib/eclipse/startup.jar org.eclipse.core.launcher.Main
</source>

==Install Git==

Install Git using your preferred package manager or download from the [http://git-scm.com/ Git website].

==Checkout Fiji==

Go into your Eclipse workspace and clone the Fiji repository

<source lang="bash">
cd ~/workspace
git clone ssh://contrib@pacific.mpi-cbg.de/srv/git/fiji.git
</source>

This will create the folder ~/workspace/fiji where you have the core Fiji repository. 

<span style="color:#ff0000">Note:</span> change "contrib" for your user name in ''pacific.mpi-cbg.de'' if you have an account there.

In order to run Fiji properly, it is suggested to use the JRE which is shipped with Fiji.  This is a platform dependent submodule of the Fiji repository.  Check it out with

<source lang="bash">
cd ~/workspace/fiji
git submodule init java/linux-amd64
git submodule update java/linux-amd64
</source>

Check out the master branch of this submodule explicitly

<source lang="bash">
cd ~/workspace/fiji/java/linux-amd64
git checkout master
</source>

Check out all submodules that you want to work with e.g.

<source lang="bash">
cd ~/workspace/fiji
git submodule init mpicbg
git submodule update mpicbg
git submodule init TrakEM2
git submodule update TrakEM2
git submodule init VIB
git submodule update VIB
</source>

Check out the master branch of each of these submodules

<source lang="bash">
cd ~/workspace/fiji
cd mpicbg
git checkout master
cd ../TrakEM2
git checkout master
cd ../VIB
git checkout VIB   # yes, this is the master branch of VIB
</source>


Fiji comes with its own build system that we will later use from Eclipse.  Test, if Fiji builds properly

<source lang="bash">
cd ~/workspace/fiji
./Build.sh
./fiji
</source>

[[Image:Screenshot-New_JRE.png|thumb|New JRE|300px]]
[[Image:Screenshot-New_Java_Project.png|thumb|New Java Project|300px]]

==Create the Eclipse Project==

Launch Eclipse and create a new Java project (New -> Java Project).  As already mentioned, Fiji runs best with the included JRE that can be installed directly by the link Configure JREs.  Add a new JRE located in the submodule path, e.g. <code>~/workspace/fiji/java/linux-amd64</code>

<span style="color:#ff0000">Note:</span> Eclipse will try to set <code>fiji/bin</code> as output folder, which already contains files. We recommend to set it instead to something else, e.g. <code>fiji/build</code>

Eclipse will add all found JRE system libraries automatically.  Choose Fiji's JRE as the project specific JRE.  `Next >' brings you to a screen for selecting sources and libraries.  Eclipse automatically put into the source list everything it could find in the project folder.  In Fiji's complex directory structure, this automatic selection is inadequate.  Remove everything from the source list and put into it only what you want to edit, e.g.

* ImageJA/ij
* mpicbg
* TrakEM2
* VIB

If you want to develop a plugin without a separate submodule, put the respective folder under <code>fiji/src-plugins</code> into the source list.

Add all jars in <code>fiji/jar</code>s and all jars in <code>fiji/java/linux-amd64/jdk1.6.0_10/jre/lib/ext</code> to the Libraries.  You are safe not to forget any of the required dependencies when you also add all build targets (all jar files in fiji/plugins) whose sources you do not have in the source list.  Unfortunately, the names of the submodules do not necessarily correlate with their build targets.  Therefore, here come some examples:

{| class="wikitable"
! source path
! build target
|-
| fiji/bio-formats
| fiji/plugins/loci_tools.jar
|-
| fiji/ImageJA/ij
| fiji/ij.jar
|-
| fiji/mpicbg
| fiji/plugins/mpicbg_.jar
|-
| fiji/TrakEM2
| fiji/plugins/TrakEM2_.jar
|-
| fiji/VIB
| fiji/plugins/VIB_.jar
|-
| ...
|}

After finishing this, Eclipse once builds the Fiji project.  There should not be any error message but several thousands of warnings that mostly come from Java1.4-style code or not required imports, variables or methods in the sources of authors who do not use an IDE as Eclipse and thus have no automatic assistance at cleaning up.  All these warnings can be ignored  having not effect to the functionality of the code.

[[Image:Screenshot-Fiji_Builder.png|thumb|Add Fiji Builder|300px]]

==Add Fiji Build==

Eclipse compiles java sources to class files but Fiji requires those class files and corresponding configuration files in specific places.  For this reason, the Fiji build system was developed and we will use it as an alternative builder for the Fiji project in Eclipse.

Select the Fiji project and open the project properties dialog (Project -> Properties).  Under Builder, add a new Builder with the following properties:

;Location: <code>${workspace_loc:/fiji}/fiji</code>
;Working Directory: <code>${workspace_loc:/fiji}</code>
;Arguments: <code>--build</code>

<span style="color:#ff0000">Note:</span> If you want to build TrakEM2, you will have to explicitly build required plugins in prior, that is

;Arguments: <code>--build plugins/bUnwarpJ_.jar plugins/level_sets.jar all</code>


[[Image:Screenshot-Run.png|thumb|New Run Configuration|300px]]

==Add a Run Configuration==

Fiji can be launched conveniently from inside Eclipse.  For this purpose, create a new Run Configuration (Run -> Run Configurations...)
<dl>
<dt>Main
<dd>
;Project: fiji
;Main class: ij.ImageJ
<dt>Arguments
<dd>
;VM arguments: <nowiki>-Xms3000m -Xmx3000m -Dplugins.dir=${workspace_loc:fiji} -Dmacros.dir=${workspace_loc:fiji}</nowiki>
;Working directory: Other: ${system_property:user.home}/Desktop/
<dt>JRE
<dd>
;Runtime JRE: Alternate JRE: Fiji Java
;Java executable: Default (javaw)
<dt>Classpath
<dd>
;User Entries: <code>fiji/ij.jar</code> and all jars in <code>fiji/jars</code>, <code>fiji/plugins</code>, and <code>fiji/jars/jython2.2.1</code>

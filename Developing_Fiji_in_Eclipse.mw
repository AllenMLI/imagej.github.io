==Introduction==

[http://www.eclipse.org Eclipse] is a powerful Integrated Development Environment (a so-called ''IDE'') primarily intended to develop Java projects. It is similar to [http://netbeans.org/ NetBeans] and [http://www.jetbrains.com/idea/ IntelliJ].

The advantages of using an IDE like Eclipse for developing:

# it is easy to access documentation about classes (i.e. ''javadocs''): just point your cursor over the name of the class and hit ''Shift+F2''.
# you can use code-completion: just type the start of the class name, variable, method, etc you want to use and hit ''Ctrl+Space''.
# compile errors are listed in a concise list; double-clicking on a line in that list will move the cursor to the problem.
# you can debug your program interactively: just open the main class (i.e. a class having a ''public static void main(String[] args)'' method) and go to ''Run>Debug As>Java Application''. This will switch to a different window layout (the ''Debug perspective'') which offers you a range of views that are useful for debugging such as: local variables, thread stack traces, etc. You can interrupt the program at any time by clicking on the ''pause'' symbol and inspect the current state, single-step through the code and even to a limited amount replace code on-the-fly
# the most important version control systems can be accessed easily

Where there are advantages, there are also disadvantages. For example, Eclipse is quite big a program and requires a lot of resources, RAM and screen size in particular.

One other shortcoming -- Eclipse's unwillingness to let the developer specify that the source code is to be packaged into ''.jar'' files automatically -- was fixed by us by using [[Maven]] in conjunction with Eclipse (and luckily Netbeans and IntelliJ support Maven projects, too, so we now really only have to support one way to specify dependencies).

==Install Eclipse==

Install Eclipse using your preferred package manager or download the appropriate binaries of the [http://www.eclipse.org/downloads/ Eclipse IDE for Java Developers].  Launch Eclipse and decide for a workspace location (e.g. <code>~/worspace</code>).  Usually, current Java works just fine, but for some developers, Eclipse is not stable with Sun/Oracle Java 6.  That is, you will eventually have to install Java 5 as an alternative JRE and make a custom launcher for Eclipse, e.g.

<source lang="bash">
/usr/lib/jvm/java-1.5.0-sun/bin/java -cp /usr/lib/eclipse/startup.jar org.eclipse.core.launcher.Main
</source>

==Install Git==

Install Git using your preferred package manager or download from the [http://git-scm.com/ Git website].

==Checkout Fiji==

Go into your Eclipse workspace and clone the Fiji repository

<source lang="bash">
cd ~/workspace
git clone ssh://contrib@fiji.sc/srv/git/fiji.git
</source>

This will create the folder ~/workspace/fiji where you have the core Fiji repository. 

<span style="color:#ff0000"><b>Note:</b></span> change "contrib" for your user name in ''fiji.sc'' if you have an account there.

In order to run Fiji properly, it is suggested to use the JRE which is shipped with Fiji.  This is a platform dependent submodule of the Fiji repository. It will be automatically checked out when compiling Fiji:

<source lang="bash">
cd ~/workspace/fiji
./Build.sh
</source>

Check out all submodules that you want to work with e.g.

<source lang="bash">
cd ~/workspace/fiji
git submodule update --init modules/mpicbg
git submodule update --init modules/TrakEM2
</source>

Check out the master branch of each of these submodules

<source lang="bash">
cd ~/workspace/fiji
cd modules/mpicbg
git checkout master
cd ../TrakEM2
git checkout master
</source>

<span style="color:#ff0000"><b>Note:</b></span> if you check out blindly the ''master'' branch of all the submodules you are interested in, the compilation <u>might fail</u>. If you are interested in a compiling state, you need to stay with the state after ''git submodule update''.

Fiji comes with its own build system that we will later use from Eclipse.  Test, if Fiji builds properly

<source lang="bash">
cd ~/workspace/fiji
./Build.sh
./fiji
</source>

==Create the Eclipse Project==
[[Image:Screenshot-New_JRE.png|thumb|New JRE|300px]]

[[Image:Screenshot-New_Java_Project.png|thumb|New Java Project|300px]]

Launch Eclipse and create a new Java project (New -> Java Project).  As already mentioned, Fiji runs best with the included JRE that can be installed directly by the link Configure JREs.  Add a new JRE located in the submodule path, e.g. <code>~/workspace/fiji/java/linux-amd64</code>

<span style="color:#ff0000"><b>Note:</b></span> Eclipse will try to set <code>fiji/bin</code> as output folder, which already contains files. We recommend to set it instead to something else, e.g. <code>fiji/build</code>

Eclipse will add all found JRE system libraries automatically.  Choose Fiji's JRE as the project specific JRE.  `Next >' brings you to a screen for selecting sources and libraries.  Eclipse automatically put into the source list everything it could find in the project folder.  In Fiji's complex directory structure, this automatic selection is inadequate.  Remove everything from the source list and put into it only what you want to edit, e.g.

* ImageJA/ij
* mpicbg
* TrakEM2

If you want to develop a plugin without a separate submodule, put the respective folder under <code>fiji/src-plugins</code> into the source list.

Add all jars in <code>fiji/jar</code>s and all jars in <code>fiji/java/linux-amd64/jdk1.6.0_10/jre/lib/ext</code> to the Libraries.  You are safe not to forget any of the required dependencies when you also add all build targets (all jar files in fiji/plugins) whose sources you do not have in the source list.  Unfortunately, the names of the submodules do not necessarily correlate with their build targets.  Therefore, here come some examples:

{| class="wikitable"
! source path
! build target
|-
| fiji/bio-formats
| fiji/plugins/loci_tools.jar
|-
| fiji/ImageJA/ij
| fiji/jars/ij.jar
|-
| fiji/mpicbg
| fiji/plugins/mpicbg_.jar
|-
| fiji/TrakEM2
| fiji/plugins/TrakEM2_.jar
|-
| ...
|}

After finishing this, Eclipse once builds the Fiji project.  There should not be any error message but several thousands of warnings that mostly come from Java1.4-style code or not required imports, variables or methods in the sources of authors who do not use an IDE as Eclipse and thus have no automatic assistance at cleaning up.  All these warnings can be ignored  having not effect to the functionality of the code.

==Add Fiji Build==
[[Image:Screenshot-Fiji_Builder.png|thumb|Add Fiji Builder|300px]]
Eclipse compiles java sources to class files but Fiji requires those class files and corresponding configuration files in specific places.  For this reason, the Fiji build system was developed and we will use it as an alternative builder for the Fiji project in Eclipse.

Select the Fiji project and open the project properties dialog (Project -> Properties).  Under Builder, add a new Builder with the following properties:

;Location: <code>${workspace_loc:/fiji}/fiji</code>
;Working Directory: <code>${workspace_loc:/fiji}</code>
;Arguments: <code>--build</code>

<span style="color:#ff0000"><b>Note:</b></span> If you want to build TrakEM2, you will have to explicitly build required plugins in prior, that is

;Arguments: <code>--build plugins/bUnwarpJ_.jar plugins/level_sets.jar all</code>




==Add a Run Configuration==
[[Image:Screenshot-Run.png|thumb|New Run Configuration|300px]]
Fiji can be launched conveniently from inside Eclipse.  For this purpose, create a new Run Configuration (Run -> Run Configurations...)
<dl>
<dt>Main
<dd>
;Project: fiji
;Main class: fiji.Main
<dt>Arguments
<dd>
;VM arguments: <nowiki>-Xms3000m -Xmx3000m -Dplugins.dir=${workspace_loc:fiji} -Dmacros.dir=${workspace_loc:fiji}</nowiki>
;Working directory: Other: ${system_property:user.home}/Desktop/
<dt>JRE
<dd>
;Runtime JRE: Alternate JRE: Fiji Java
;Java executable: Default (javaw)
<dt>Classpath
<dd>
;User Entries: <code>fiji/ij.jar</code> and all jars in <code>fiji/jars</code>, <code>fiji/plugins</code>, and <code>fiji/jars/jython2.2.1</code>



[[Category:Development]]

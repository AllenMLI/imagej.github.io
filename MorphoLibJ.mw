{{Infobox
| name                   = MorphoLibJ
| software               = IJPB-plugins
| author                  = David Legland, {{Person|Iarganda}}
| maintainer             = David Legland, {{Person|Iarganda}}
| source                 = {{GitHub|org=ijpb|repo=MorphoLibJ}}
| released               = July 3<sup>rd</sup>, 2014
| latest version         = March 23<sup>rd</sup>, 2015 (MorphoLibJ v1.0.7)
| status                 = stable, active
| category               = [[:Category:Segmentation|Segmentation]], [[:Category:Mathematical_morphology|Mathematical morphology]]
}}

Collection of mathematical morphology methods and plugins for ImageJ, created at INRA-IJPB Modeling and Digital Imaging lab.

The library implements several functionalities that were missing in ImageJ, and that were not or only partially covered by other plugins. Namely:

* '''Morphological filtering''': erosion & dilation, closing & opening, morphological gradient & Laplacian, top-hat...

* '''Morphological reconstruction''', allowing fast detection of regional or extended extrema, removing of borders, or hole filling

* '''Watershed segmentation''' + GUI, making it possible to segment 2D/3D images of cell tissues

* '''2D/3D measurements''': volume, surface area, inertia ellipse/ellipsoid...

* '''Binary / label images utilities''' for removing or keeping largest connected component, perform size opening, fill holes, kill borders...

== Morphological filters ==
[[Image:MorphoLibJ-binary-dilation-erosion.png|right|thumb|400px|Some example of morphological filters. From left to right: original image (black over white), result of dilation, result of erosion.]] [[Image:MorphoLibJ-binary-gradient-close-open.png|right|thumb|400px|Some example of composed morphological filters. From left to right: result of morphological gradient, result of morphological closing, result of morphological opening.]] Morphological filters consider the neighborhood of each pixel/voxel according to a structuring element of a given size and shape.

The following filters are '''implemented both for 2D and 3D image'''s, and work for binary as well as grey level images:

* '''erosion''' keeps the minimum value within the neighborhood defined by the structuring element.

* '''dilation''' keeps the maximum value within the neighborhood defined by the structuring element.

* '''closing''' consists in the succession of a dilation with an erosion. Morphological closing makes dark structures smaller than the structuring element disappear.

* '''opening''' consists in the succession of an erosion with a dilation. Morphological opening makes bright structures smaller than the structuring element disappear.

* '''morphological gradient''' is defined as the difference of a morphological dilation and a morphological erosion with the same structuring element, and enhances edges of the original images.

* '''morphological Laplacien''' is defined as half the sum of a morphological dilation and a morphological erosion with the same structuring element, minus the original image, and enhances edges of the image.

* '''black top-hat''' consists in subtracting the original image from the result of a morphological closing, and results in the enhancement of dark structures smaller than structuring element.

* '''white top-hat''' consists in subtracting the result of a morphological opening from the original image, and results in the enhancement of bright structures smaller than structuring element.

The following structuring elements can be used for 2D images:

* disk 
* square
* octagon
* diamond
* line with angle of 0, 90, 45 or 135 degrees

For 3D images, the same structuring elements can be used (the operation is simply repeated on each slice), as well as a cubic structuring element.

== Morphological reconstruction ==
The morphological reconstruction is at the basis of many useful algorithms, such as border removing, hole filling, or detection of regional minima or maxima in grey level images.
=== Principle ===
The principle of geodesic reconstruction is to repeat '''conditional dilations''' or erosions until idempotence. Conditional dilation is the result of a dilation, combined with a mask image using a logical operation. Conditional dilations are repeated until no more modification occur (idempotence condition).
[[Image:MorphoLibJ-geodesic-reconstruction.png|thumb|right|750px|Principle of the geodesic reconstruction algorithm. From left to right: original image in gray with marker superimposed in black, and result of conditional dilations with increasing sizes.]]
=== Applications ===
[[Image:MorphoLibJ-kill-borders-fill-holes.png|thumb|400px|Some applications of geodesic reconstruction. From left to right: original image, result of kill borders, result of fill holes.]]
By choosing the marker image, several operations may be automatized. For example, computing geodesic reconstruction with image of borders, and combining with original image will remove particles or regions touching the borders. In a similar way, computing geodesic reconstruction by using the border of the complement of the image makes it possible to fill holes that may appear in particles.

=== Usage ===

The following operations are available in the {{bc | Plugins | Fast Morphology}} menu:

* '''Geodesic Reconstruction''': compute the geodesic reconstruction by erosion or dilation using a marker image and a mask image, and a specified connectivity. The same operation is available for 3D images.
* '''Kill Borders''': remove the particles touching the border of a binary or grey level image, in 2D or 3D.
* '''Fill Holes''': remove holes inside particles in binary images, or remove dark regions surrounded by bright crests in grey level images. Works for both 2D and 3D images.
* '''Regional Min / Max''': compute regional minima or extrema in grey level image, with specified connectivity.
* '''Extended Min / Max''': compute extended minima or extrema in grey level image, with specified connectivity.
* '''Impose Min / Max''': impose minima or maxima on a grey level image.

== Watershed segmentation ==
[[Image:Classic-Watershed-lines-blur-blobs.png|thumb|200px|Overlay of watershed lines on blurred blobs.]] The watershed algorithm assimilates the grey level image to a digital elevation model, and aims at detecting the different catchment basins. In the grey-level image, the catchment basins correspond to dark regions surrounded by bright structures (the "crests"). It is a very popular technique specially used to segment touching objects. The MorphoLibJ suite contains several implementations of the algorithm and plugins that make use of it:

* [[Classic Watershed]], plugin implementing the original watershed algorithm by Pierre Soille and Luc M. Vincent (1990) to segment 2D/3D grayscale images.
* [[Marker-controlled Watershed]], a plugin to perform watershed by flooding from specific seed points or markers by Meyer and Beucher (1990).
* [[Morphological Segmentation]], a plugin with a graphical user interface to segment 2D/3D images based on morphological operations and the watershed algorithm.

== Measurements ==
=== Geometric measurements ===
Several measurements are provided for '''binary or label''' 2D or 3D images. The results are provided in a ResultsTable, whose name contains the name of the original image. The plugin calculating these measurements is found under {{bc | Plugins | Analyze | Geometric Measurements 3D}}:

* '''Bounding box''' returns the minimal and maximal coordinates in each direction for each label.
* '''Volume / surface area''' computes the volume, the surface area, and a sphericity index, defined as <math>36\pi V^{2}/S^{3}</math>. Surface area is computed using a discretized version of the [https://en.wikipedia.org/wiki/Crofton_formula Crofton formula], that computes intersections with line grids of various orientations (currently either 3 or 13).
* '''Inertia ellipse / ellipsoid''' returns the centroid (center of gravity) as well as the size and the orientation of the inertia ellipse or ellipsoid of each particle. Radiuses are sorted in decreasing order. Angles are given in degrees, and correspond to the azimut ("yaw"), the elevation ("pitch"), and the roll around the main axis.

=== Intensity measurements ===

Other measurements are provided for pairs of grayscale and label 2D or 3D images ({{bc | Plugins | Analyze | Measure 3D}}). The plugin calculates the '''mean''', the '''standard deviation''', the '''maximum''' and the '''minimum intensity''' value of each labeled region in the grayscale image. The results are displayed as well in a ResultsTable.

== Installation ==

* In ImageJ, download the [https://github.com/ijpb/MorphoLibJ/releases latest released jar] into the ''plugins'' folder.

* In Fiji, you just need to [[How_to_follow_a_3rd_party_update_site#Add_update_sites | add]] the IJPB-plugins site to your list of update sites:

::: 1) Select {{bc | Help | Update...}} from the Fiji menu to start the updater.

::: 2) Click on ''Manage update sites''. This brings up a dialog where you can activate additional update sites.

::: 3) Activate the IJPB-plugins update site and close the dialog. Now you should see an additional jar file for download.

::: 4) Click ''Apply changes'' and restart Fiji.

== Binary image utilities ==
[[Image:MorphoLibJ-connected-components-distance.png|thumb|300px|Connected components labeling, and computation of distance maps for binary image.]]
MorphoLibJ has some functions specific for the processing of binary images:
* '''Connected Components Labeling''' transforms the binary image into a label image by assigning a specific number (label) to each connected component.
* '''Chamfer Distance Map''' computes an approximate distance map between each foreground pixel to the nearest background pixel.
* '''Keep / Remove Largest Region''' identifies the largest connected component, and keep it or remove it.
* '''Size Opening''' computes the size (area in 2D, volume in 3D) of each connected component, and remove all particles whose size is below the value specified by the user.

Algorithms work for both 2D or 3D images. Default connectivity 4 (resp. 6) is used for 2D (resp. 3D) images.

== Utilities for label images ==

Some functions are specific for the processing of label images, in which the pixel/voxel value is used to identify the particle it belongs to. The value 0 is assumed to correspond to the background. The number of labels that can be represented depends on the image type: 255 for byte images, 65535 for short images...
[[Image:MorphoLibJ-label-border-remove-largest-opening.png|thumb|400px|Utilities for label images. From left to right: original label image, remove border labels, remove largest region, apply size opening for keeping only regions with at least 1000 pixels.]]
* '''Remove Border Labels''' is similar to "kill borders" function, but operates faster as no morphological reconstruction is required.
* '''Select Label(s)''' enters a set of labels, and creates a new label image containing only the selected labels.
* '''Crop Label''' creates a new binary image containing only the label specified by the user. The size of the new image is fitted to the region.
* '''Replace Value''' replaces the value of a region by another value. Can be used to “clear” a label, by replacing its value by 0, or to merge to adjacent regions.
* '''Label Boundaries''' creates a new binary image containing value 255 for pixels/voxels having a neighbour with a different value.
* '''Keep / Remove Largest Label''' identifies the largest label, and keeps it or removes it.
* '''Label Size Opening''' computes the size (area in 2D, volume in 3D) of each region, and removes all labels whose size is below the value specified by the user.
* '''Assign Measure To Label''' combines a label image with a results table, and creates a new image for which each pixel/voxel is assigned the measurement value corresponding to the label it belongs to.
* '''Set Label Map''' allows to choose the color map used to display a label image. In particular, shuffling the color map and/or choosing a specific color for background allows better visualization that only grey levels.
* '''Label To RGB''' converts a label image to true RGB image. Similar to ImageJ native conversion, but this plugin avoids confusion between background pixels and regions with low labels.

== Library interoperability ==

In total, the library provides nearly two hundred classes and interfaces and the exhaustive code documentation includes use-case examples.

The library follows a logic structure of folders divided by topics aiming at their re-usability from other plugins or scripts, among others:
* <code>inra.ijpb.binary</code> contains the set of utilities for working on binary images (connected component labeling, distance transform, geodesic distance transform...)
* <code>inra.ijpb.label</code> contains the utilities for label images (cropping, size opening, remove border labels, etc)
* <code>inra.ijpb.morphology</code> contains the collection of mathematical morphology operators
* <code>inra.ijpb.watershed</code> contains the classes implementing the different versions of the watershed algorithm
* <code>inra.ijpb.plugins</code> contains the set of plugins that is accessible from ImageJ/Fiji Plugins menu

All major methods have a general class with '''static methods''' that allow calling the methods on 2D and 3D images in a transparent way.

== Documentation ==

The main source code directory is on GitHub under [http://github.com/ijpb/MorphoLibJ/tree/master/src/main/java/inra/ijpb src/main/java/inra/ijpb].

You can browse the [http://ijpb.github.io/MorphoLibJ/javadoc/ javadoc] for more information about its API.

== License ==
This program is '''free software'''; you can redistribute it and/or modify it under the terms of the '''GNU General Public License''' as published by the Free Software Foundation ([http://www.gnu.org/licenses/gpl.txt http://www.gnu.org/licenses/gpl.txt]).

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. 

[[Category:Segmentation]]
[[Category:Mathematical_morphology]]

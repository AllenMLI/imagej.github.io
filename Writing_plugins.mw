{{Development | plugins}}
== What is a "plugin"? ==

Conceptually, a '''plugin''' is a piece of Java code that extends the capabilities of ImageJ. Technically, a plugin is a Java class annotated with the <code>@Plugin</code> annotation and implementing the <code>SciJavaPlugin</code> interface.

There are many sorts of ImageJ2 plugins. The most common type is a ''Command'', which performs some operation, and is typically available in the menu structure. But there are other types too: e.g., ''Display'' and ''Tool''. It is even possible for developers to easily define new sorts of plugins. For example, the Image Calculator defines a new type of plugin called {{GitHub|org=imagej|repo=imagej-common|tag=imagej-common-0.8.0|source=net/imagej/operator/CalculatorOp.java|label=CalculatorOp}}, and displays all available such operations in the Image Calculator dialog.

== Writing an ImageJ2 command ==

The {{GitHub|org=imagej|repo=imagej-tutorials|label=ImageJ Tutorials}} project is designed to get you started writing ImageJ2 components.

ImageJ2 commands are UI-independent, and will work headless, as long as your command does not explicitly call any UI-specific code (such as <code>java.awt</code> or <code>javax.swing</code> classes). The ImageJ2 framework takes care of harvesting the command's input parameters from the user in the appropriate ways, e.g., when running as an end-user Swing application, it will display a Swing dialog.

See the [https://github.com/imagej/imagej-tutorials/tree/master/simple-commands simple-commands] examples<nowiki>: </nowiki>

<blockquote>{{GitHub|org=imagej|repo=imagej-tutorials|path=simple-commands/src/main/java/HelloWorld.java|label=HelloWorld.java}}<br />{{GitHub|org=imagej|repo=imagej-tutorials|path=simple-commands/src/main/java/GradientImage.java|label=GradientImage.java}}</blockquote>

== Calling ImageJ2 from ImageJ 1.x ==

You can use ImageJ2-specific functionality from within an ImageJ 1.x plugin. For example, ImageJ2 provides a spreadsheet-like results table that supports string cells. You can write an ImageJ 1.x plugin that produces such a spreadsheet, displaying it onscreen.

See the {{GitHub|org=imagej|repo=imagej-tutorials|path=call-modern-from-legacy|label=call-modern-from-legacy}} example of the ImageJ Tutorials:

<blockquote>{{GitHub|org=imagej|repo=imagej-tutorials|path=call-modern-from-legacy/src/main/java/DisplayATable.java|label=DisplayATable.java}}</blockquote>

== Executing commands ==

There are several ways that your command's functionality can be reused by others. See the {{GitHub|org=imagej|repo=imagej-tutorials|path=execute-commands|label=execute-commands}} example of the ImageJ Tutorials:

<blockquote>{{GitHub|org=imagej|repo=imagej-tutorials|path=execute-commands/src/main/java/ExecuteCommands.java|label=ExecuteCommands.java}}</blockquote>

== Writing a service ==

If you have multiple related operations you would like to provide, or wish to maintain persistent state between command executions, we strongly suggest exposing the functionality as a ''service''. Many core ImageJ2 commands are structured this way. E.g., ImageJ2's animation features are patterned this way, as follows:

* {{GitHub|org=imagej|repo=imagej-plugins-commands|tag=imagej-plugins-commands-0.2.3|source=net/imagej/plugins/commands/animation/StartAnimation.java|label=StartAnimation}} - starts animating the active image.
* {{GitHub|org=imagej|repo=imagej-plugins-commands|tag=imagej-plugins-commands-0.2.3|source=net/imagej/plugins/commands/animation/StopAnimation.java|label=StopAnimation}} - stops animating the active image.
* {{GitHub|org=imagej|repo=imagej-plugins-commands|tag=imagej-plugins-commands-0.2.3|source=net/imagej/plugins/commands/animation/AnimationOptions.java|label=AnimationOptions}} - sets animation options for the active image.
* {{GitHub|org=imagej|repo=imagej-common|tag=imagej-common-0.8.0|source=net/imagej/animation/AnimationService.java|label=AnimationService}} - provides a reusable API for doing all of the above and more, relating to animation. The above Animation plugins all invoke this service to perform their actions.
* {{GitHub|org=imagej|repo=imagej-common|tag=imagej-common-0.8.0|source=net/imagej/animation/DefaultAnimationService.java|label=DefaultAnimationService}} - implementation of the <code>AnimationService</code> interface.

By structuring the animation support as a service, ImageJ2 can remember whether each image is currently animating, as well as its animation settings, in a central location that can be easily queried and manipulated.

=== Minimal Service Example ===
Three files to show a skeleton service. TestService.java is the service interface, DefaultTestService.java implements the interface, Test.java uses the service. 
Copy the code to three files. 
Compile and run it in the Script Editor, or command line:

    fiji --javac -d . Test.java TestService.java DefaultTestService.java
    
    fiji -cp . Test.class

====TestService.java====
<source lang="java">
//TestService.java
import net.imagej.ImageJService;

public interface TestService extends ImageJService {

    public void sayHi();

}
</source>

====DefaultTestService.java====
<source lang=java>
// DefaultTestService.java
import org.scijava.service.AbstractService;
import org.scijava.service.Service;
import org.scijava.log.LogService;
import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;

@Plugin(type = Service.class)
public class DefaultTestService extends AbstractService implements TestService {

    @Parameter
    LogService log;

    @Override
    public void sayHi(){
        log.error("Hi");
    }
}
</source>

====Test.java====
<source lang=java>
//Test.java
import net.imagej.ImageJ;
import net.imagej.Dataset;
import java.lang.System;

import org.scijava.log.LogService;
import org.scijava.command.Command;
import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;

import org.scijava.service.Service;
import net.imagej.DatasetService;


@Plugin(type = Command.class, headless = true)
public class Test implements Command {

    @Parameter
    private TestService testService;

    @Parameter
    private LogService log;

    @Override
    public void run() {
      
      testService.sayHi();
      
    }

    public static void main(final String... args) throws Exception {
        System.out.println("Starting test");
        // Launch ImageJ as usual.
        final ImageJ ij = net.imagej.Main.launch(args);

        ij.command().run(Test.class, true);
    }

}
</source>


[[Category:Tutorials]]
[[Category:ImageJ2]]
[[Category:Development]]

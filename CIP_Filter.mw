{{TOC|limit=1}}


=gauss=

<span style="font-size:110%">'''Description'''</span><br>
gauss creates a gaussian blurred image. it convolves the image with a gaussian weighted window. Gaussian blurring is commonly used for image denoising as it smoothes out small details.

<span style="font-size:110%">'''Signature'''</span><br>
<code>outputImage = cip.gauss( inputImage* , radius* , boundary , pixelSize)</code>

<span style="font-size:110%">'''Input'''</span><br>
'''inputImage*''' : the image process
<br>'''radius*''' : a scalar or list of scalar representing the standard deviation of the gaussian kernel standard deviation along the image axis
<br>'''boundary''' : a string in {'min', 'max', 'same', 'zero', '<u>mirror</u>', 'periodic'}, default is mirror
<br>'''pixelSize''' : a scalar or list of scalar along image dimension. Default is 1.

<span style="font-size:110%">'''Output'''</span><br>
'''outputImage''': the processed image. it always as the same size as the input image.

<span style="font-size:110%">'''Implementation'''</span><br>
CIP gauss implementation wraps the gauss ops, itself relying on the [https://github.com/imglib/imglib2-algorithm/tree/master/src/main/java/net/imglib2/algorithm/gauss3 imglib2 gauss3 implementation].

=erode=

erosion shrinks the region in an image by a certain radius. It works both with binary and graylevel images. This effect is obtained by replacing each pixel value by the minimum value found in a window surrounding that pixel.

<code>outputImage = cip.erode( inputImage*, radius*, shape, boundary, output, pixelSize)</code>

;<span style="font-size:115%">'''Input'''</span>
:'''inputImage*''' : the image process
:'''radius*''' : a integer or list of integer representing the half size of the filter window along the image axis.
:'''shape''' : a string in {'<u>rectangle</u>', 'disk'} describing the shape of the window used for the processing.
:'''boundary''' : a string in {'min', 'max', 'same', '<u>mirror</u>', 'periodic'}, default is mirror
:'''output''' : a string in {<u>'same'</u>, 'full'} describing whether the output can be modified by the filter, 'full', or not, 'same'.
:'''pixelSize''' : a scalar or list of scalar along image dimension. Default is 1.

;<span style="font-size:115%">'''Output'''</span>
:'''outputImage''': the processed image.

;<span style="font-size:115%">'''Implementation'''</span>

CIP function wraps the [https://github.com/imglib/imglib2-algorithm/blob/master/src/main/java/net/imglib2/algorithm/morphology/Erosion.java imglib2 Erosion class] from the morphology package.


=dilate=

this filter dilate the region in an image by a certain radius. It works both with binary and graylevel images. This effect is obtained by replacing each pixel value by the maximum value found in a window surrounding that pixel.

<code>outputImage = cip.dilate( inputImage* , radius*, shape, boundary, output, pixelSize)</code>

;<span style="font-size:115%">'''Input'''</span>
:'''inputImage*''' : the image process
:'''radius*''' : a integer or list of integer representing the half size of the filter window along the image axis.
:'''shape''' : a string in {'<u>rectangle</u>', 'disk'} describing the shape of the window used for the processing.
:'''boundary''' : a string in {'min', 'max', 'same', '<u>mirror</u>', 'periodic'}, default is mirror
:'''output''' : a string in {<u>'same'</u>, 'full'} describing whether the output can be modified by the filter, 'full', or not, 'same'.
:'''pixelSize''' : a scalar or list of scalar along image dimension. Default is 1.

;<span style="font-size:115%">'''Output'''</span>
:'''outputImage''': the processed image.

;<span style="font-size:115%">'''Implementation'''</span>

CIP function wraps the [https://github.com/imglib/imglib2-algorithm/blob/master/src/main/java/net/imglib2/algorithm/morphology/Dilation.java imglib2 Dilation class] from the morphology package.

=opening=

This filter performs an erosion followed by a dilation. It erases small and thin  objects.

<code>outputImage = cip.opening( inputImage* , radius* , shape, boundary, output, pixelSize)</code>

;<span style="font-size:115%">'''Input'''</span>
:'''inputImage*''' : the image process
:'''radius*''' : a integer or list of integer representing the half size of the filter window along the image axis.
:'''shape''' : a string in {'<u>rectangle</u>', 'disk'} describing the shape of the window used for the processing.
:'''boundary''' : a string in {'min', 'max', 'same', '<u>mirror</u>', 'periodic'}, default is mirror
:'''output''' : a string in {<u>'same'</u>, 'full'} describing whether the output can be modified by the filter, 'full', or not, 'same'.
:'''pixelSize''' : a scalar or list of scalar along image dimension. Default is 1.

;<span style="font-size:115%">'''Output'''</span>
:'''outputImage''': the processed image.

;<span style="font-size:115%">'''Implementation'''</span>

CIP function wraps the [https://github.com/imglib/imglib2-algorithm/blob/master/src/main/java/net/imglib2/algorithm/morphology/Opening.java imglib2 Opening class] from the morphology package.


=closing=

This filter performs a dilation followed by an erosion. It closes small holes and thin gaps between or inside objects.

<code>outputImage = cip.closing( inputImage* , radius* , shape, boundary, output, pixelSize)</code>

;<span style="font-size:115%">'''Input'''</span>
:'''inputImage*''' : the image process
:'''radius*''' : a integer or list of integer representing the half size of the filter window along the image axis.
:'''shape''' : a string in {'<u>rectangle</u>', 'disk'} describing the shape of the window used for the processing.
:'''boundary''' : a string in {'min', 'max', 'same', '<u>mirror</u>', 'periodic'}, default is mirror
:'''output''' : a string in {<u>'same'</u>, 'full'} describing whether the output can be modified by the filter, 'full', or not, 'same'.
:'''pixelSize''' : a scalar or list of scalar along image dimension. Default is 1.

;<span style="font-size:115%">'''Output'''</span>
:'''outputImage''': the processed image.


=tophat=

This filter subtract an oping of the input image to the input image. It removes  object larger than the user selected radius in image while keeping smaller scale details.

<code>outputImage = cip.closing(inputImage*, radius*, shape, boundary, output, pixelSize)</code>

;<span style="font-size:115%">'''Input'''</span>
:'''inputImage*''' : the image process
:'''radius*''' : a integer or list of integer representing the half size of the filter window along the image axis.
:'''shape''' : a string in {'<u>rectangle</u>', 'disk'} describing the shape of the window used for the processing.
:'''boundary''' : a string in {'min', 'max', 'same', '<u>mirror</u>', 'periodic'}, default is mirror
:'''output''' : a string in {<u>'same'</u>, 'full'} describing whether the output can be modified by the filter, 'full', or not, 'same'.
:'''pixelSize''' : a scalar or list of scalar along image dimension. Default is 1.

;<span style="font-size:115%">'''Output'''</span>
:'''outputImage''': the processed image.



=distance=

=median=

=invert=

There are three different compilers we try to support:

# OpenJDK6 Javac
# Oracle Java SE 6 Javac
# Eclipse JDT Core

We do our best to ensure that all code in Fiji can be compiled with any of these three options. For more details, see the sections below.


== The Fiji Build System ==

The primary way to build Fiji, in whole or in part, is the [[Fiji Build System]] (a.k.a. Fake). It is a custom build system for Fiji that uses the '''[http://openjdk.java.net/projects/jdk6/ OpenJDK6] Javac compiler'''.

As of this writing, the (slightly customized) version used is:

 $ java -jar jars/javac.jar -version
 javac 1.6.0_29

And the source code can be found at:
 [https://github.com/fiji/fiji/tree/master/src-plugins/javac src-plugins/javac]

To build a particular component of Fiji, simply invoke Fake on the target JAR you wish to build. Some examples:

To build all of ImgLib1 and ImgLib2:
 $ ./Build.sh jars/imglib*.jar

To build all of ImgLib2 only:
 $ ./Build.sh jars/imglib2*.jar

To build a specific component of ImgLib:
 $ ./Build.sh jars/imglib2-algorithms.jar

You can also force a complete rebuild with:
 $ ./Build.sh jars/imglib2-algorithms.jar-rebuild

Note that in the case of ImgLib, the above commands only make sense if you have initialized the ImgLib submodule in modules/imglib as [[Downloading and Building Fiji From Source#Submodules|described here]].


== Command-line Maven ==

Increasingly, parts of Fiji are structured as [http://maven.apache.org/ Maven] projects. Ultimately, our goal is to fully Mavenize the Fiji codebase, but for the time being only certain submodules are Maven-based.

Notably, [[ImgLib2]] and [http://developer.imagej.net/ ImageJ2] use Maven to build. It is also possible to build [[Bio-Formats]] using Maven.

When building with Maven on the command line, it will use your default installed JDK (unless you tell it otherwise). For example:

 $ mvn --version
 Apache Maven 2.2.1 (rdebian-6)
 Java version: 1.6.0_26
 Java home: /usr/lib/jvm/java-6-sun-1.6.0.26/jre
 Default locale: en_US, platform encoding: UTF-8
 OS name: "linux" version: "3.0.0-17-server" arch: "amd64" Family: "unix"

 $ java -version
 java version "1.6.0_26"
 Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
 Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

On many systems, such as in the case above, the default installed JDK is '''[http://www.oracle.com/technetwork/java/javase/overview/index-jsp-136246.html Oracle's Java SE 6] platform'''. As such, we try to ensure that Fiji builds completely using Oracle's release of Javac, since it is so common.

To build a Maven-based component of Fiji from the command line, simply run the "mvn" from that component's toplevel directory. For example:

To build all of ImgLib1 and ImgLib2:
 $ cd modules/imglib
 $ mvn

Or to force a complete rebuild:
 $ mvn clean install

Maven automatically runs any unit tests associated with the project upon build; to suppress this behavior, and thus improve build times, use:
 $ mvn -DskipTests


== The Eclipse JDT compiler ==

[http://en.wikipedia.org/wiki/Eclipse_%28software%29 Eclipse] is a powerful IDE for developing code. One advantage of the Maven project structure mentioned above is automatic support for development within Eclipse via the [http://www.eclipse.org/m2e/ m2e plugin]. See the [[Using Maven with Eclipse]] page for instructions in developing a Maven-based project (such as ImgLib2) within Eclipse.

It is important to understand that Eclipse uses a ''completely different'' compiler than Javac, part of '''Eclipse's [http://www.eclipse.org/jdt/core/ JDT Core]''' component. This incremental compiler is fast and powerful, and allows the Eclipse IDE to work its magic, but it has distinct idiosyncrasies and bugs than Javac does (both OpenJDK6 and Oracle Java SE 6).

The main take-home message regarding Eclipse is: ''just because it compiles in Eclipse, does not mean it will compile with Javac'' (and vice versa, though the Eclipse compiler tends to be more lenient than Javac).


== Jenkins continuous integration system ==

To detect build failures more reliably, we have a [http://jenkins.imagej.net/ Jenkins server] (on an Ubuntu Linux 64-bit server) that automatically builds various projects in different ways. These automated builds help to detect problems with both the OpenJDK6 compiler as well as the Oracle Java SE 6 one.

=== Jobs that use Fake ===

The following jobs use Fake (see "The Fiji Build System" above), and will test compilation with OpenJDK6:

# [http://jenkins.imagej.net/job/Fiji-minimal-daily/ Fiji-minimal-daily] - Verifies that Fiji builds successfully with *no* submodules initialized.
# [http://jenkins.imagej.net/job/Fiji-daily/ Fiji-daily] - Verifies that Fiji builds successfully with *all* submodules initialized.

=== Jobs that use command-line Maven ===

The following jobs use command-line Maven (see "Command-line Maven" above), and will test compilation with Oracle Java SE 6:

# [http://jenkins.imagej.net/job/ImgLib/ ImgLib] - Verifies that ImgLib builds successfully. Runs automatically after each push to the [https://github.com/imagej/imglib remote Git repository].
# [http://jenkins.imagej.net/job/ImgLib-daily/ ImgLib-daily] - Verifies that ImgLib builds successfully, once a day.
# [http://jenkins.imagej.net/job/ImageJ/ ImageJ] - Verifies that ImageJ2 builds successfully. Runs automatically after each push to the [https://github.com/imagej/imagej remote Git repository].
# [http://jenkins.imagej.net/job/ImageJ-daily/ ImageJ-daily] - Verifies that ImageJ builds successfully, once a day.


== Fixing build problems ==

If you receive an email from Jenkins about a build failure, please take a look at the console output. If it looks related to code that you changed, try to find a fix or workaround so that all the different build mechanisms can continue to function. Broadly, the steps are as follows:

# Use the commands given above to replicate the problem on your system.
# Experiment with code changes to make the problem go away.
# Push your changes, with an explanation of what you did and why needed to do it. In many cases it is wise to provide a comment in the code ([https://github.com/imagej/imglib/commit/5748a1be here] is an example) to educate others the issue, so that no one inadvertently removes your fix.
# After sufficient time elapses, verify that the Jenkins build is working again.

If you need help, please write to [http://groups.google.com/group/fiji-devel fiji-devel] for assistance!

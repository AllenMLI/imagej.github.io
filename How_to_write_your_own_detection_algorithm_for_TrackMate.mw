== Introduction. ==

Welcome to the most useful and also unfortunately the hardest part in this tutorial series on how to extend [[TrackMate]] with custom modules. 

The detection algorithms in TrackMate are basic: they are all based or approximated from the [http://en.wikipedia.org/wiki/Blob_detection#The_Laplacian_of_Gaussian Laplacian of Gaussian] technique. They work well even in the presence of noise for round or spherical and well separated objects. As soon as you move away from these requirements, you will feel the need to implement your own custom detector. 

This is the subject of this tutorial, which I promised to be rather difficult. Not because implementing a custom detection algorithm is difficult. It ''is'' difficult, even very difficult if you are not familiar with the [[ImgLib2]]  library. But we will skip this difficulty here by not making a true detector, but just a dummy one that returns detections irrespective of the image content. This involved task is left to your Java and ImgLib2 skills. 

No, this tutorial will be difficult because contrary to the previous ones, we need to do a lot of work even for just a dummy detector. The reason for this comes from our desire to have a nice and tidy integration in TrackMate. The custom detector we will write will be a first-class citizen of TrackMate, and this means several things: Not only it must be able to provide a proper detection, but it must also
* offer the user some configuration options, in a nice GUI;
* check that the user entered meaningful detection parameters;
* enable the saving and loading of these parameters to XML.
We did not have to care when implementing a [[How to write custom actions for TrackMate|custom action]], but now we do.

Let's get started with the easiest part, the detection algorithm.



== The [https://github.com/fiji/TrackMate/blob/master/src/main/java/fiji/plugin/trackmate/detection/SpotDetector.java SpotDetector] interface. ==


=== A detector instance operates on a single frame. ===

The detection part itself is implemented in a class that implements the [https://github.com/fiji/TrackMate/blob/master/src/main/java/fiji/plugin/trackmate/detection/SpotDetector.java SpotDetector] interface. Browsing there, you will see that it is just a specialization of an output algorithm from [[ImgLib2]]. We are required to spit out a <code>List<Spot></code> that represents the list of detection (one <code>Spot</code> per detection) for a '''single frame'''. 

This is important: <u>an instance of your detector is supposed to work on a single frame</u>. TrackMate will generate as many instances of the detector per frame it has to operate on. This facilitates development, but also multithreading: TrackMate fires one detector per thread it has access to, and this is done without you having to worry about it. TrackMate will bundle the outputs of all detectors in a thread-safe manner.

It is the work of the detector factory to provide each instance with the data required to segment a specific frame. But we will see how this is done below. 


=== Detection results are represented by [https://github.com/fiji/TrackMate/blob/master/src/main/java/fiji/plugin/trackmate/Spot.java Spots]. ===

[https://github.com/fiji/TrackMate/blob/master/src/main/java/fiji/plugin/trackmate/Spot.java Spots] are used to represent detection results: one detection = one spot. By convention, a detection algorithm must provide ''at least'' the following numerical feature to each spot:
* The X, Y, Z coordinates, obviously. What is not that obvious is that TrackMate uses only image coordinates. This means that if your image has a physical calibration in µm (''e.g.'' 0.2 µm/pixels in X,Y), the spot coordinates must be in µm<ref>The reason behind this is that TrackMate wants to break free of the source data. Keeping all the coordinates in physical units allow exchanging  results without having to keep a reference to the original image.</ref>. If you have just a 2D image, use 0 for the Z position, but it must not be omitted.
* A quality value, that reflects the quality of the detection itself. It must be a real, positive number, that reflects how confident your detection algorithm is that the found detection is not spurious. The larger the more confident.
* The spot radius, representing in physical units, the approximate size of the image structure that was detected. TrackMate default detectors do not have an automatic size detection feature, so they ask the user what is the most likely size of the structures they should detect, tune themselves to this size, and set all the radius of the detections to be the one entered by the user.

Any omission will trigger errors at runtime. 


=== A dummy detector that returns spiraling spots. ===








<references/>

[[Category:Tutorials]]

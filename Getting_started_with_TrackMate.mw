== Introduction ==

This tutorial is the starting point for [[TrackMate]] users. It explains how it works by walking you through a simple case, using an easy image. 

The [[TrackMate]] plugin provides a way to semi-automatically segment spots or roughly spherical objects from a 2D or 3D image, and track them over time. It follows the classical scheme, where the segmentation step and the particle-linking steps are separated. Therefore each step is handled in the user interface by a specific panel, and you will go back in forth through them. 
Also, TrackMate has a fishing net with small holes: it will find as much spots as it can, even the ones you are not interested. So there is a step to filter them out before tracking. 
In these views, TrackMate resembles a bit to the Spot Segmentation Wizard of [http://www.bitplane.com/go/products/imaris Imaris™].


== The test image ==

Grab the image we will use for this tutorial [http://fiji.sc/tinevez/TrackMate/FakeTracks.tif here], and open it in Fiji.

[[Image:TrackMate FakeTracks.png|right|border|]]


This is 128x128 stack of 50 frames, uncalibrated. It is noisy, but is still a very easy use case: there is at most 4 spots per frame, they are well separated, they are about the same size and the background is uniform. It is such an ideal case that you would not need TrackMate to deal with it. But for this first tutorial, it will help us getting through TrackMate without being bothered by difficulties.

Also, if you look carefully, you will see that there are two splitting events - where a spot seems to divide in two spots in the next frame, one merging event - the opposite, and a gap closing event - where a spot disappear for one frame then reappear a bit further. TrackMate is made to handle these events, and we will see how. 

<br style="clear: both" />

== Starting TrackMate ==

[[Image:TrackMate MainButtons.png|right|border|]]

With this image selected, launch TrackMate from the menu ''Plugins > Tracking > Track Mate'' or from the [[Using the Command Launcher|Command launcher]]. The Track Mate GUI appears next to the image, displaying the starting dialog panel.

But first, just a few words about its look. The user interface is a single frame divided in a main panel, that displays context-dependent dialogs, and a permanent bottom panel containing  the four main buttons depicted right. 

The '''Next''' button allows to step through the tracking process. It might be disabled depending on the current panel content. For instance, if you do not select a valid image in the first panel, it will be disabled. The '''Previous''' button steps back in the process, without executing actions. For instance, if you go back on the segmentation panel, segmentation will not be re-executed. 

Pressing the '''Load''' button opens a dialog asking you for a TrackMate file (they are plain XML files). Depending on when in the process you saved it, it will load all of its data and put you at the adequate step to pursue or inspect tracking results. The '''Save''' button does of course the converse.

Now is a good time to speak strategy when it comes to saving/restoring. You can save at anytime in TrackMate. If you save just before the tracking process, you will be taken there with the data you generated so far upon loading. TrackMate saves a <u>link to the image file</u> (as an absolute file path) but not the image itself. When loading a TrackMate file, it tries first to retrieve and open this file in ImageJ. So it is a good idea to pre-process, crop, edit metadata and massage the target image first in Fiji, then save it as a .tif, then launch TrackMate. Particularly if you deal with a multi-series file, such as Leica .lif files.

The advantage of this approach is that you can launch TrackMate, immediately press the load button, and everything you need will be loaded and displayed. However, if you need to change with the target file of if it cannot be retrieved, you will have to open the TrackMate XML file and edit its 4th line.

<br style="clear: both" />

== The start panel ==

[[Image:TrackMate StartPanel.png|right|border|]]

This first panel allows you to check the spatial and temporal calibration of your data. It is very important to get it right, since everything afterwards will be based on physical units and not in pixel units (for instance μm and minutes, and not pixels and frames). In our case, that does not matter actually, since our test image has a dummy calibration (1 pixel = 1 pixel). 

What is critical is also to check the dimensionality of the image. In our case, we have a 2D time-lapse of 50 frames. If metadata are not present or cannot be read, ImageJ tends to assume that stack always are Z-stack on a single time-point. 

If the calibration or dimensionality of your data is not right, I recommend changing it in the image metadata itself, using ''Image > Properties'' (Ctrl+Shift+P). The press the 'Refresh' button on the TrackMate start panel to grab changes.

You can also define a sub-region for processing: if you are only interested in finding spots in a defined region of the image, you can use any of the ROI tools of ImageJ to draw a closed area on the image. Once you are happy with it, press the '''Refresh''' button on the panel to pass it to TrackMate. You should see that the '''X''' '''Y''' start and end values change to reflect the bounding box of the ROI you defined. The ROI needs not to be a square. It can be any closed shape. 

If you want to define the min and max '''Z''' and/ or '''T''', you have to edit manually the fields on the panel. 

Defining a smaller area to analyze can be very beneficial to test and inspect for correct parameters, particularly for the segmentation step. In this tutorial, the image is so small and parse that we need not worrying about it. Press the '''Next'''button to step forward.

<br style="clear: both" />

== Choosing a segmenter ==


[[Image:TrackMate SegmenterChoice.png|right|border|]]

You are now offered to choose a segmentation algorithm ("segmenter") amongst the currently implemented ones. 

The choice is actually quite limited. Apart from the '''Manual segmentation''', you will find 3 segmenters, but they are all based on [http://en.wikipedia.org/wiki/Blob_detection#The_Laplacian_of_Gaussian LoG (Laplacian of Gaussian) segmentation]. They are described in detail elsewhere, but here is what you need to know. 

* The '''Log segmenter''' applies a plain LoG segmentation on the image. All calculations are made in the Fourier space, which makes it optimal for intermediate spot sizes, between ≈5 and ≈20 pixels in diameter.
* The '''Dog segmenter''' uses the [http://en.wikipedia.org/wiki/Blob_detection#The_difference_of_Gaussians_approach difference of Gaussians] approach to approximate a LoG filter by the difference of 2 Gaussians. Calculations are made in the direct space, and it is optimal for small spot sizes, below ≈5 pixels.
* The '''Downsmapled LoG segmenter''' uses the LoG segmenter, but downsizes the image by an integer factor before filtering. This makes it optimal for large spot sizes, above ≈20 pixels in diameter, at the cost of localization precision.

In our case, let us just use the '''Dog segmenter'''.

<br style="clear: both" />

== The segmenter configuration panel ==

[[Image:TrackMate SegmenterConfig.png|right|border|]]

The LoG-based segmenters fortunately demand very few parameters to tune them. The only really important one is the ''Estimated blob diameter'''. Just enter the approximate size of the spots you are looking to tracks. Careful: you are expected to enter it in <u>physical units</u>. In our dummy example, there is no calibration (1 pixel = 1 pixel), so it does not appear here. 

There are extra fields that you can configure also. The '''Threshold''' numerical value aims at helping dealing with situation where a gigantic number of spots can be found. Every spot with a maximal intensity value below this threshold value will not be retained, which can help saving memory. You set this field manually, or by adjusting the threshold using ImageJ: call the ''Image > Adjust > Threshold'' menu item (Ctrl + Shit + T), adjust the upper threshold to your liking, the press the '''Refresh''' button on the panel. This will grab the value you just set. 

You can check '''Use median filter''': this will apply a 3x3 median filter prior to any processing. This can help dealing with images that have a marked salt & pepper noise which generates spurious spots. 

We hope that TrackMate will be used in experiments requiring '''Sub-pixel localization''', such as following motor proteins in biophysical experiments, so we added schemes to achieve this. The one currently implemented uses a quadratic fitting scheme (made by Stephan Saalfeld and Stephan Preibisch) based on [http://www.cs.ubc.ca/~lowe/keypoints/ David Lowe SIFT work]<ref>David G. Lowe, "Distinctive image features from scale-invariant keypoints," International Journal of Computer Vision, 60, 2 (2004), pp. 91-110.</ref>. It has the advantage of being very quick, compared to the segmentation time itself.

The two others automated segmenters share more or less the same fields in their own configuration panel. The '''Downsampled LoG segmenter''' simply asks for an extra down-sampling integer factor. 

In our case, the spots we want to track are bout 5 pixels in diameter, so this is what we enter in the corresponding field. We don't need anything else. The '''Sub-pixel localization''' option adds a very little overhead so we can leave it on.

<br style="clear: both" />

== The segmentation process ==

[[Image:TrackMate Segmenting.png|right|border|]]

Once you are happy with the segmentation parameters, press the '''Next''' button and the segmentation will start. The TrackMate GUI displays the log panel, that you will meet several times during the process. It is basically made of a text area that recapitulates your choices and send information on the current process, and of a progress bar on top. You can copy-paste the text if you want to keep track of the process somewhere. 

TrackMate takes advantage of multi-core computers, which seems to be the standard nowadays. It will segment one time-frame per core available. On computers with many cores, the progress bar will seems to move in a bulky way: if you have 16 cores, 16 time-points will be segmented at once, and it is likely that they will be finished approximately on the same time. So don't be worried if the progress bar does not move in the beginning for large images.

On our dummy image, this is clearly something we need to worry about, and the segmentation should be over in a few seconds. Typically, this is the step that takes the longer. Once the segmentation is done, the '''Next''' button is re-enabled.

<br style="clear: both" />

== Initial spot filtering == 

[[Image:TrackMate InitThresholding.png|right|border|]]

Here is a difficult step to explain, particularly because we do not need at all now. If the explanations following in this paragraph seem foggy, please feel free to press the '''Next''' button and skip to the next paragraph. This one is all related to performance, memory and disk usage in difficult cases.

TrackMate uses generic segmentation algorithms for which there is only a little number of parameters to specify. The price to pay then, is that you can get a lot of undesired spots as an outcome. And in some cases, a really large amount of those.

This is why there is spot features and feature filters. In the next steps, each spot will have a series of numerical features calculated using its location, radius and the image it is found in, such as the mean pixel intensity. You will be able to define filters on these features, to retain only the ones that are relevant to your study.

But for a very large number of spots - let's say: more than 1 million of them - performance issues can kick in. Those millions of spots will be stored in the model, and saved in the TrackMate file, in case you want to step back and change the filters, because for instance you realized you are not happy with the end results (you can do that). Some visualization tools - the 3D displayer for instance - will generate the renderings for those millions of spots at once and hide or show them depending on the filter values, because it is too expensive to recreate the renderings while tuning the filter values.

To deal with that, we added a first filter prior to any other step, that uses the '''Quality''' value. The quality value is set by the segmenter, and is an arbitrary measure of the likelihood of each spot to be relevant. This panel collects all the quality values for all spots, and display their histogram (Y-scale is logarithmic). You can manually set a threshold on this histogram by clicking and dragging in its window. All spots with a quality value below this threshold will be '''discarded'''. That is: they will be deleted from the process, not saved in the file, they won't be displayed, nor their features will be calculated. Which is what we want when meeting a gigantic number of spurious spots. Note that this step is '''irreversible''': if you step back to this panel, you will see the original histogram, but beware that the spots you have discarded cannot be recovered by changing the threshold. The only way is to step back further and restart the segmentation step. 

In our case, we see from the histogram that we could make sense of this step. There is a big peak at low quality (around a value of 1.2) that contains the majority of spots and is most likely represent spurious spots. So we could put the threshold around let's say 5.5 and probably ending in having only relevant spots. But with less than 10 000 spots, we are very very far from 1 million so we need not to use this trick. Leave the threshold bar close to 0 and proceed to the next step. 

<br style="clear: both" />


== Selecting a displayer ==

[[Image:TrackMate DisplayerChoice.png|right|border|]]

Here, you can choose between the two visualization tools that will be used to display the tracking results. The first one, '''HyerpStack displayer''', simply reuses ImageJ stack window and overlay the results non-destructively over the image. Choosing the '''3D viewer''' will open a new 3D viewer window, import that image data in it, and will display spots as 3D spheres and tracks as 3D lines.

Honestly, choose the HyperStack displayer. Unless you have a very specific and complicated case that needs to inspect results in 3D immediately, you do not need the 3D viewer. The HyperStack displayer is simpler, lighter, allow to manually edit spots, and you will be able to launch a 3D viewer at the end of the process and still get the benefits. 

<br style="clear: both" />

== Computing spot feature and rendering displayer ==

[[Image:TrackMate ComputeSpotFeatures.png|right|border|]]

We are now back to the log panel. As you pressed the '''Next''' button, two process started: 
* the features of all spots (well, those you left after the initial filtering step) are calculated;
* the displayer selected does everything it needs to prepare displaying them. 
So nothing much. When the '''Next''' button is re-enabled, press it to move to the spot filtering step. 

<br style="clear: both" />

== Spot filtering ==

[[Image:TrackMate FilterSpots 1.png|right|border|]]

The moment this panel is shown, the spots should be displayed on the ImageJ stack. They take the shape of purple circles of diameter set previously. As promised, there are quite a lot of them, and their vast majority are irrelevant. If you did not remove the irrelevant one in the initial thresholding step, you should get an overlay that resembles the image to the right. 

Trying to do particle linking on all these spots would be catastrophic, and there would be no hope to make sense of the data as it is now. This is why there is this spot filtering step, where you can use the features we just calculated to select the relevant spots only. 

The spot filtering panel is divided in two. The upper part, which is empty now, contains the filter you define, in the shape of histograms. We will come back to them soon. The bottom part contains the '''+''' and '''minus''' buttons that allow to respectively add or remove a feature filter, and a combo-box to set the display color of the spots.

Let us try it to play with it to find the best feature to filter out spurious spots. 

By default , when the combo-box is on '''Default''', all spots are purple. By clicking on it, you see that you can select amongst all the possible features calculated. For instance, if you select '''X''', the spots will be colored according to their X position. A colored bar below the combo-box indicates the range the color gradient corresponds to. 

'''X''' does not seem to be a good feature to select relevant spots. We know that '''Quality''' should be, by construction, but let us pick '''Mean intensity'''. By scrolling through the time slide you should be able to see that now all the spurious spots have a blue to turquoise color, whether the real one stands forward in red or yellow. 

We will therefore add a filter based on this feature. Click the green '''+''' button. A small orange box should appear in the upper part, containing the histogram for a given feature. Click on the orange box combo-box to select '''Mean intensity'''. Yous should have something 
similar to the image below.

[[Image:TrackMate FilterSpots 2.png|border|]]

We note that the histogram has a very desirable shape: a massive peak at low intensity represent most of the spots. There are other smaller peaks at higher intensity, and fortunately, they are very well separated from the large peak. 

To move the threshold, simply click and drag inside the histogram window. Notice how the overlay is updated to display only the remaining spots after filtering.

A filter can be set to be above or below the given threshold. You change this behavior using the radio buttons below the histogram window. In our case, we want it to be above of course. The '''Auto''' button uses [http://en.wikipedia.org/wiki/Otsu%27s_method Otsu's method] to determine automatically a threshold. In our case, we will put it manually around 33. 



<br style="clear: both" />

== References ==

<references/>

[[Category:Tutorials]]

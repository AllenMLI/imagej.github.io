It is implementation of RPCParadigm that executes commands in different instances of running Fiji. The Fiji can run in a different computer or a HPC cluster. Communication is realized through TCP/IP and data are serialized by library [https://github.com/RuedigerMoeller/fast-serialization fst].
It is possible to send as parameter in request every serializable object . Support for another types could be added through the offered extensibility. It is necessary to implement the interface ParallelizationParadigmSerializer:
<source lang="java">
public interface ''ParallelizationParadigmSerializer'' extends SciJavaPlugin {

  void writeObject(Object obj, ObjectOutput output) throws IOException;

  Object readObject(Class<?> objectClass, ObjectInput input) throws IOException;

  Class<?> getSerializedClass();

  boolean alsoForAllSubclasses();

  boolean willHandleClass(Class<?> clazz);
}

</source>

and to annotate the implementing class with @Plugin annotation with specified type ''ParallelizationParadigmSerializer''. There exists one implementation of the interface for the type Dataset in the project scijava-parallel-fst:
<source lang="java">
@Plugin(type = ParallelizationParadigmSerializer.class)
public class DatasetSerializer implements ParallelizationParadigmSerializer {

</source>

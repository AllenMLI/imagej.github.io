{{Infobox Plugin
| name                   = Advanced Weka Segmentation
| software               = Fiji
| author                 = [[User:Iarganda | Ignacio Arganda-Carreras]], [http://albert.rierol.net Albert Cardona], [http://www.kaynig.de Verena Kaynig]
| maintainer             = [[User:Iarganda | Ignacio Arganda-Carreras]]
| source                 = [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=tree;f=src-plugins/Trainable_Segmentation/trainableSegmentation;h=c38082682b56b221492a84f48fcc586d28dbd6fa;hb=HEAD on gitweb]
| released               = May 19<sup>th</sup>, 2011
| latest version         = May 19<sup>th</sup>, 2011
| status                 = '''BETA''', active
| category               = [[:Category:Segmentation|Segmentation]], [[:Category:Machine Learning|Machine Learning]]
}}

== Introduction ==
The [[Advanced Weka Segmentation]] is a Fiji plugin that combines a collection of machine learning algorithms with a set of selected image features to produce pixel-based segmentations. [http://www.cs.waikato.ac.nz/ml/weka/ Weka] (Waikato Environment for Knowledge Analysis) can itself be called from the plugin. It contains a collection of visualization tools and algorithms for data analysis and predictive modeling, together with graphical user interfaces for easy access to this functionality. As described on their wikipedia site, the advantages of [http://www.cs.waikato.ac.nz/ml/weka/ Weka] include: 

* freely availability under the GNU General Public License 

* portability, since it is fully implemented in the Java programming language and thus runs on almost any modern computing platform 

* a comprehensive collection of data preprocessing and modeling techniques 

* ease of use due to its graphical user interfaces

[http://www.cs.waikato.ac.nz/ml/weka/ Weka] supports several standard data mining tasks, more specifically, data preprocessing, clustering, classification, regression, visualization, and feature selection.

The main goal of this plugin is to work as a '''bridge between the Machine Learning and the Image Processing''' fields. It provides the framework to use and, more important, '''compare''' any available classifier to perform image segmentation based on pixel classification.

== The Graphical User Interface ==
[[Image:Advanced-Weka-Segmentation-GUI.png|thumb|400px|Example of the first look of the plugin window when using it on a TEM image]] [[Advanced Weka Segmentation]] runs on any 2D image or 2D stack of images. If the image or stack is not 8-bit grayscale, it will be converted.


By default, the plugin starts with two classes, i.e. it will produce '''binary pixel classification'''. The user can add traces to both classes using the whole set of tools for ROI (region of interest) drawing available in Fiji. That includes rectangular, round rectangular, oval, elliptical, brush polygon and freehand selections. By default, the freehand selection tool (of 1 pixel width) is automatically selected. 

The user can pan, zoom in and out, or scroll between slices (if the input image is a stack) in the main canvas as if it were any other Fiji window. On the left side of the canvas there are two panels of buttons, one for the training and one for the general options. On the right side of the image canvas we have a panel with the list of traces for each class and a button to add the current ROI to that specific class. All buttons contain a short explanation of their functionality that is displayed when the cursor lingers over the buttons.

=== Training panel ===
[[Image:AWS-GUI-after-training.png|thumb|400px|Example of the aspect of the plugin window after training on a TEM image]]
==== Train classifier ====
This button activates the training process. One trace of two classes is the minimum required to start training. The first time this button is pressed, the features of the input image will be extracted and converted to a set of vectors of float values, which is the format the [http://www.cs.waikato.ac.nz/ml/weka/ Weka] classifiers are expecting. This step can take some time depending on the size of the images, the number of features and the number of cores of the machine where Fiji is running. The feature calculation is done in a completely multi-thread fashion. The features will be only calculated the first time we train after starting the plugin or after changing any of the feature options.

If the training ends correctly, then the displayed image will be completely segmented and the result will be overlayed with the corresponding class colors.  Notice that all buttons are now enabled, since all their functionalities are possible after training.


==== Toggle overlay ====
[[Image:AWS-Probability-maps.png|thumb|300px|Example of output of the "Get probability" button]]
This button activates and deactivates the overlay of the result image. The transparency of the overlay image can be adjusted in the Settings dialog.

==== Create result ====

It creates displays the resulting image. This image is equivalent to the current overlay.

==== Get probability ====

Based on the current classifier, the probability of each pixel of belonging to each class is displayed on a 32-bit hyperstack.

==== Plot result ====

This button calls the [http://www.cs.waikato.ac.nz/ml/weka/ Weka] code to generate the model performance chart, i.e. the [http://en.wikipedia.org/wiki/Receiver_operating_characteristic ROC], [http://en.wikipedia.org/wiki/Precision_and_recall precision/recall], etc. curves based on the training data.

[[Image:AWS-Plot-result.png|thumb|300px|Weka model performance chart. Displayed after clicking on "Plot result"]]

=== Options panel ===

==== Apply classifier ====

By clicking on this button we can apply the current classifier to any 2D image or stack of images we have in our file system. A dialog will pop up to ask the user for the input image or stack and it will perform its segmentation based on the current classifier and ---consequently--- selected features. This may take a while depending on the number and size of the input images and the number of cores of the machine. After finishing, the input image (or stack) and its corresponding segmentation will be displayed.

==== Load classifier ====

Here we can load any previously saved classifier. The plugin will check and adjust the selected features with the attributes of this new classifier. The classifier file format is the one used in [http://www.cs.waikato.ac.nz/ml/weka/ Weka] (.model).

==== Save classifier ====

It save the current classifier into a file, under the standard [http://www.cs.waikato.ac.nz/ml/weka/ Weka] format (.model). This allows us to store classifiers and apply them later on different sessions (option not available in the simple [[Trainable Segmentation]] plugin).

==== Load data ====

Here we can load the data (in [http://www.cs.waikato.ac.nz/ml/weka/ Weka] format) from previous traces on the same or other image or stack. Again, the plugin will check and force the consistency between the loaded data and the current image, features and classes. The input file format is the standard Weka format: ARFF. Notice the traces (regions of interests selected by the user) are not saved but their corresponding feature vectors.

==== Save data ====

With this button we can save the current trace information into a data file that we can handle later with the plugin or the Weka Explorer itself. The plugin will save the feature vectors derived from the pixels belonging to each trace into an ARFF file at a location chosen by the user.

==== Create new class ====

The default number of classes of the plugin is two, but through this button we can increase up to 5 the classes. The name of the new classes can be changed on the Settings dialog.

==== Settings ====

The rest of tunable parameters of the plugin can be changed on the Settings dialog, which is displayed when clicking on this button.

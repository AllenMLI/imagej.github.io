{{Infobox
| software               = ImageJ
| name                   = Op Finder
| author                 = {{Person|Hinerm}}
| maintainer             = {{Person|Hinerm}}, {{Person|Ctrueden}}
| filename               = {{Maven | g=net.imagej | a=op-finder }}
| source                 = {{GitHub|org=imagej|repo=op-finder}}
| released               = April 2016
| latest version         = April 2016
| status                 = beta
| category               = [[:Category:Plugins|Plugins]]
}}
 
The Op Finder is a utility for browsing, learning about and running all available {{GitHub|org=imagej|groupId=imagej-ops|label=Ops}}. Because Ops are plugins and can be dynamically extended and specialized for particular inputs, it is not practical to have static documentation on a given Op. By using the Op Finder, you explore the actual list of Ops available in ''your'' installation. The purpose of this guide is to familiarize you with the basic capabilities of the Op Finder, to enable you to learn and experiment with Ops.

= Getting started =

There are two ways to start up the Op Finder:

# Using the shortcut: {{Key|Shift||L}}
# Using the menu path: {{Bc|Plugins|Utilities|Find Ops...}}

= Parts of the Op Finder =

[[File:LabeledOpFinder.png]]

'''Labeled components'''
# Search bar for [[#Filtering|filtering]] the list of Ops.
# Toggle button to change between a [[#For Users|user]] and [[#For Developers|developer]] view.
# Play button for [[#Running Ops|running the selected Op]].
# Copy button to copy the selected cell contents.
# Help button to open up the Wiki reference page in your browser.
# Status area showing success/failure notifications e.g., for copying or running Ops.
# Namespaces and Op types: these can be expanded to explore the tree-based organization of Ops.
# Op implementation: the leaves of this tree tell us what parameter options are available for each Op type. We interpret this particular example as "There is an Add Op in the Math namespace, that operates on an image and a numeric value".
# Progress area showing progress when performing lengthy operations, such as filtering the Ops.
# Details pane toggle. Click this button to show/hide a pane containing additional information about the currently selected Op.

'''Additional features'''
* Hover your mouse over any part of the Op Finder to get a descriptive tool-tip.
* Double-click any cell to copy its contents to your clipboard.

= Views =

There is a lot of information surrounding Ops. One goal of the Op Finder is to present this information in a way that can be easily understood. To facilitate this, multiple views are available, tailoring the content of the Op Finder to a particular audience.

== For Users ==

{{Warning|This view does not provide an accurate representation of real Ops e.g., one entry could be many Ops merged together. An Op call is ultimately defined by the combination of requested Op + parameters.}}

Ops in this view are focused on answering the question "What can I do ''right now'' with Ops?" The following guidelines are used to create this list:

* Only Ops directly involving images are displayed
* Parameter types are generalized
* Optional parameters are hidden

== For Developers ==

* Details pane open by default
* Precise Op signature
* Optional parameters are shown
* Referring class is shown

= Things to do =

== Filtering ==

TODO fuzzy, no namespaces

== Running Ops ==

TODO how does the play button work?

== Code Snippets ==

TODO take a code snippet and turn it into a script, step-by-step

1. The first thing to do is find an Op of interest. In this case, we start from the [[#For Users|User view]] and see that there is a Convolve Op we want to try:
: [[File:1-select-op.png|border]]

2. In the [[Script Editor]], we need to add a reference to the <code>OpService</code> which will be our entry point for Op usage:

<source lang="python">
# @OpService ops
</source>

: '''Note:''' this guide is written in [[Jython_Scripting|Python]] but any scripting language will work

3. Now we need the code call for our Convolve Op, so we switch to the [[#For Developers|Developer view]]. The code is long, but remember we can [[#Parts of the Op Finder|copy]]:
: [[File:2-op-snippet.png|border|1200px]]

: and paste:

<source lang="python">
# @OpService ops

ops.run("filter.convolve", Img, Img, RandomAccessibleInterval, long[], OutOfBoundsFactory, OutOfBoundsFactory, RealType, ImgFactory)
</source>

4. Looking at the Op call, we see that there are ''a lot'' of parameters. To get a better idea of what these are, we look at the <code>Op Signature</code> column of the Op Finder:
: [[File:3-op-signature.png|border|1200px]]

: All of the parameters with a {{Key|?}} are '''optional'''. For our purposes, let's just work with the input image, kernel, and returned image:

<source lang="python">
# @OpService ops

out = ops.run("filter.convolve", Img, RandomAccessibleInterval)
</source>

5. Now we need to get inputs for our Op, and ensure the output is displayed. These tasks can all be handled with additional [[Script_parameters|@Parameters]] to the script:

<source lang="python">
# @OpService ops
# @Dataset input
# @Dataset kernel
# @OUTPUT ImgPlus out

out = ops.run("filter.convolve", input, kernel)
</source>

: '''Note:''' the types we copied and pasted just represent a ''minimum requirement''. Open images will almost always be <code>Datasets</code>, which themselves have an <code>ImgPlus</code>, which has an <code>Img</code> which is a <code>RandomAccessibleInterval</code>. If you want multiple input images you should use <code>Dataset</code>. A safe alternative for single inputs is <code>ImgPlus</code>. Both of these classes contain additional metadata which can be useful in your script.

6. Our script is done! If we open a base image and kernel in ImageJ we can run our script. The <code>OpService</code> is populated automatically by the ImageJ framework, and an input window is automatically created to select the images:

[[File:4-run-op.png|border"1200px]]

ImgLib2 is a major redesign of ImgLib, and [[Changes from ImgLib1 to ImgLib2|much has changed]]. This page attempts to provide a "how-to" guide for bringing existing ImgLib1 code up to date with ImgLib2. It is intended as a "quick start" guide—for more details, see the [[Changes from ImgLib1 to ImgLib2]] page.

== Rename packages ==

All packages have changed prefix to avoid a name clash, and to conform to convention ([http://imglib2.net/ imglib2.net] now points to us):
* mpicbg.imglib -> net.imglib2

Hence, it is easiest to perform a global search and replace for all instances of the old string with the new. This holds for all renames listed below.

Some core packages have also changed further:
* mpicbg.imglib.image -> net.imglib2.img

== Rename classes ==

In general, the Image class has been replaced with Img. Many classes with "Image" in the name have thus been changed to "Img" instead:
* Image -> Img
* ImageFactory -> ImgFactory
* ImageOpener -> ImgOpener

Please note that there are cases where using Img is not appropriate, and a better alternative exists; see the [[Changes from ImgLib1 to ImgLib2]] page for a more complete explanation.

== Use long for dimensional lengths ==

All dimensional lengths are now long (and long[]) instead of int (and int[]). 

== Rename dimensional length accessor methods ==

In addition, core methods for querying dimensional lengths have changed names:
* getNumDimensions() -> numDimensions()
* getDimension(int) -> dimension(int)
* getDimensions() -> dimensions(long[])

For dimensions(long[]), note that it only populates an existing array. There is no method to allocate and return a new dimensional array. Instead, use the following code:
  final long[] dims = new long[img.numDimensions()];
  img.dimensions(dims);

== Remove references to Container and ContainerFactory ==

Containers are now built in to the Img. For instance, PlanarImg (an implementation of Img) essentially replaces PlanarContainer. Essentially, ContainerFactory and ImageFactory have been combined into ImgFactory. If you have code that creates a Container or ContainerFactory, it is no longer necessary—just create the correct kind of Img or ImgFactory instead (e.g., PlanarImgFactory).

== Update cursor logic ==

There were previously three types: Cursor, LocalizableCursor and LocalizableByDimCursor. This is still true, but the terminology has changed: a cursor can now be "localizable"—meaning you can tell where it is in the dimensional structure—and/or "positionable"—meaning you can move the cursor to somewhere else. Essentially, the three kinds of cursors are now:
# img.cursor() – returns a Cursor without "read" or "write" access to the dimensional position. Use when you don't care where you are in the structure, and want the most efficient path.
# img.localizingCursor() – returns a Cursor with "read-only" access to the dimensional position. Use when you need to know where the cursor currently sits, but don't need to change the position other than normal iteration.
# img.randomAccess() – returns a RandomAccess with "read-write" access to the dimensional position. Use when you need to change the position.

Another way of looking at it is that Cursors are similar to InputStreams and must go forward, whereas RandomAccesses are similar to RandomAccessFiles and can seek back and forth at will.

== Rename RGBLegacyType to ARGBType ==

If you were using RGBALegacyType, note that it has changed to ARGBType, but serves the same purpose.

== Use net.imglib2.display.Projector instead of mpicbg.imglib.image.display.Display ==

The Display class and corresponding packages are no longer applicable to ImgLib2. Instead, create a Projector. See the [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imglib.git;a=blob;f=imglib2/ui/src/main/java/net/imglib2/ui/ImgPanel.java;hb=refs/heads/master ImgPanel] class in the imglib-ui project for an example.

{{Infobox Plugin
| name                   = Stitching
| software               = ImageJ
| author                 = Stephan Preibisch
| maintainer             = Stephan Preibisch
| filename               = Stitching_.jar
| source                 = [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=tree;f=src-plugins/Stitching_;hb=HEAD on gitweb]
| released               = October 2008
| latest version         = January 2012
| category               = [[:Category:Stitching|Stitching]]
| website                = [http://fly.mpi-cbg.de/~preibisch Stephan Preibisch's homepage]
}}

== Citation ==
Please note that the Stitching, as well as other plugins available through Fiji, is based on a publication. If you use it successfully for your research please be so kind to cite our work:
* S. Preibisch, S. Saalfeld, P. Tomancak (2009) "Globally optimal stitching of tiled 3D microscopic image acquisitions", ''Bioinformatics'', '''25'''(11):1463-1465. [http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btp184 Webpage] [http://bioinformatics.oxfordjournals.org/cgi/reprint/25/11/1463.pdf PDF]

== Introduction ==
There is an increasing demand to image large biological specimen at high resolution. Typically those specimen do not fit in the field of view of the microscope. To overcome this drawback, motorized stages moving the sample are used to create a tiled scan of the whole specimen. The physical coordinates provided by the microscope stage are not precise enough to allow reconstruction (”Stitching”) of the whole image from individual image stacks.

The Stitching Plugin (2d-5d) is able to reconstruct big images/stacks from an arbitrary number of tiled input images/stacks, making use of the Fourier Shift Theorem that computes all possible translations (x, y[, z]) between two 2d/3d images at once, yielding the best overlap in terms of the cross correlation measure. If more than two input images/stacks are used the correct placement of all tiles is determined using a global optimization. The stitching is able to align an arbitrary amount of channels and supports timelapse registration. To remove brightness differences at the tile borders, non-linear intensity blending can be applied. 

Plase note: this is the new implementation of the Stitching plugin which is finally based on [[Imglib]] and supports a lot of new features:

* supports composite images and hyperstacks now
* it can write the stitched image slice-by-slice directly to disk (significantly reduces the RAM requirements)
* it can open the input images as Virtual Stacks (significantly reduces the RAM requirements)
* supports timelapse alignment with different stitching options
* subpixel-resolution
* supports many different types of grids (row-by-row, column-by-column, snake, ...)
* can read the approximate tile positions from the image metadata

Due to the virtual input stacks and the direct export of the result to disk It is now possible to stitch an arbitrary amount of image tiles with limited RAM resources.

The documentation of the '''old''' Stitching plugin collection can be found here: [[Stitching 2D/3D]].

== Overview of the Stitching Plugins ==

The Image Stitching package comes with 2 different plugins:

* '''[[Image Stitching#Pairwise Stitching | Pairwise Stitching]]''': Stitch two 2d-5d images, rectangular ROIs can be used to limit the area to search in.
* '''[[Image Stitching#Grid/Collection Stitching | Grid/Collection Stitching]]''': Stitch an arbitrary amount of 2d-5d input images. It supports cases where the approximate alignment is known (grid, stored in file, metadata) as well as completely unguided alignment.

Although both plugins make use of layered context-dependent Generic Dialogs, they are completely macro-scriptable.

== Pairwise Stitching ==
[[File:PairwiseStitching2.png|thumb|230px|Shows the Pairwise Stitching dialog.]]
The Pairwise Stitching first [http://fiji.sc/wiki/index.php/File:PairwiseStitching1.png queries] for two input images that you intend to stitch. They can contain rectangular ROIs which limit the search to those areas, however, the full images will be stitched together. Once you selected the input images it will show the actual dialog for the Pairwise Stitching. The dialog will depend on the dimensionality of the input images. Please note that RGB input images will be converted into 8-Bit composite images.

There are several ''fusion methods'' available (new ones can be easily added by implementing this [http://fiji.sc/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/Stitching_/mpicbg/stitching/fusion/PixelFusion.java interface]):
* '''Linear blending''': In the overlapping area the intensity are smoothly adjusted between the two images. 
* '''Average''': In the overlapping area the average intensity between all images is computed ([http://fiji.sc/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/Stitching_/mpicbg/stitching/fusion/AveragePixelFusion.java example source code]).
* '''Median''': In the overlapping area the median intensity of all images is computed.
* '''Max. Intensity''': In the overlapping area the maximum intensity between all images is used int the output image.
* '''Min. Intensity''': In the overlapping area the minimum intensity between all images is used int the output image.
* '''Overlay into Composite''': all channels of all input images will be put into the output image as separate channels.
* '''Do not fuse images''': no output images will be computed, just the overlap is computed.

The ''number of peaks'' defines the number of maxima in the Phase Correlation Matrix which are examined. If the stitching was not correct increasing this number might help.

If you do not check ''compute overlap'', the plugin will just apply the translation that can be inserted below.

If you check ''supixel accuracy'', the plugin will compute a subpixel precise alignment between the two images (it hardly costs any computation time but some RAM). Furthermore, if subpixel localization is activated, linear interpolation will be used for the fusion. Otherwise no interpolation will be applied.

{{Infobox Plugin
| software               = ImageJ
| name                   = BeanShell Interpreter
| author                 = Johannes Schindelin
| maintainer             = Johannes Schindelin
| filename               = BSH_Interpreter.jar
| source                 = [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/BeanShell_Interpreter/BSH/BSH_Interpreter.java;hb=HEAD on gitweb]
| status                 = stable
}}

[http://www.beanshell.org/ BeanShell] is the scripting language in Fiji which is similar both to the [[Introduction_into_Macro_Programming|ImageJ macro language]] and to Java. In fact, you can even execute almost verbatim Java code, but the common case is to write ''scripts'', i.e. leave out all the syntactic sugar to make your code part of a class.

BeanShell also does not require strict typing (read: you do not need to declare variables with types), making it easy to turn prototype code into proper Java after seeing that the code works.

= Quickstart =

If you are already familiar with Java or the macro language, the syntax of Beanshell will be familiar to you.

The obligatory ''Hello, World!'' example:

<source lang="java">
// This prints 'Hello, World!' to the output area
print("Hello, World!");
</source>

Variables can be assigned values:

<source lang="java">
someName = 1;
someName = "Hello";
</source>

Variables are not strongly typed in BeanShell by default; If you use a variable name without specifying the type of it, you can assign anything to it. Optionally, you can declare variables with a data type, in which case the type is enforced:

<source lang="java">
String s;
s = 1; // this fails
</source>

Note: The builtin functions of the ImageJ Macro language are <u>not</u> available in Beanshell.

= Syntax =

== Variables ==

* A variable is a placeholder for a changing entity
* Each variable has a name
* Each variable has a value
* Values can be any data type (numeric, text, etc)
* Variables can be assigned new values

=== Set variables' values ===

Variables are assigned a value by statements of the form '''name''' = '''value''' ended by a semicolon. The value can be an expression.

<source lang="java">
intensity = 255;
value = 2 * 8 + 1;
title = “Hello, World!”;
text = “title”;
</source>

=== Using variables ===

You can set a variable's value to the value of a second variable:

<source lang="java">
text = title;
</source>

Note that the variable name on the left hand side of the equal sign refers to the variable itself (not its value), but on the right hand side, the variable name refers to the current value stored in the variable.

As soon as the variables are assigned a new value, they simply forget the old value:

<source lang="java">
x = y;
y = x;
</source>

After the first statement, ''x'' took on the value of ''y'', so that the second statement does not change the value of ''y''.

The right hand side of an assignment can contain complicated expressions:

<source lang="java">
x = y * y – 2 * y + 3;
</source>

Note that the right hand side needs to be evaluated first before the value is assigned to the variable:

<source lang="java">
intensity = intensity * 2;
</source>

This statement just doubled the value of ''intensity''.

== Comments ==

It is important to use comments in your source code, not only for other people to understand the intent of the code, but also for yourself, when you come back to your code in 6 months. Comments look like this:

<source lang="java">
// This is a comment trying to help you to
// remember what you meant to do here:
a = Math.exp(x * Math.sin(y))
	+ Math.atan(x * y – a);
</source>

You should <u>not</u> repeat the code in English, but describe the important aspects not conveyed by the code. For example, there might be a bug requiring a workaround, and you might want to explain that in the comments (lest you try to "fix" the workaround).

Comments are often abused to disable code, such as debugging statements

<source lang="java">
// x = 10; // hard-code x to 10 for now, just for debugging
</source>

If you have a substantial amount of things to say in a comment, you might use multi-line comments:

<source lang="java">
/*
 Multi-line comments can be started by a slash
 followed by a star, and their end is marked
 by a star followed by a slash:
*/
</source>

== Further reading ==

For more information, see BeanShell's [http://www.beanshell.org/manual/quickstart.html Quickstart] page.

= Tips =

You can ''source'' scripts (i.e. interpret another script before continuing to interpret the current script) using this line:

<source lang="java">
this.interpreter.source("the-other-script.bsh");
</source>

[[Category:Scripting]]

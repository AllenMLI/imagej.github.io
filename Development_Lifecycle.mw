{{Notice | This page describes the [[SciJava]] software release process.
* To download software releases, see [[Downloads]].}}
{{Development}}
= Managing releases =

The SciJava [[philosophy]] is to [[Philosophy#Release_early.2C_release_often|release early, release often]]. To make doing so as painless as possible, we employ several [[project management]] resources.

Intuitively, a feature has four "phases" of development:

# '''Developed on a topic branch.''' The source code is branched and the feature is developed on the branch, to avoid interfering with anyone else's work.
# '''Merged to master.''' The feature is merged to the <code>master</code> branch of the source code repository on GitHub.
# '''Deployed to Maven.''' A new release of the project is cut and ''deployed'' to the ImageJ Maven repository. This makes the feature available for use from downstream projects, by depending on the new release.
# '''Uploaded to ImageJ.''' A release is uploaded to an ImageJ [[update site]], putting it into the hands of end users.

The following sections describe how each [[project management]] resource facilitates these phases of development.

== Jenkins ==

The [http://jenkins.imagej.net/ ImageJ Jenkins server] tests builds and performs releases. It deploys <code>SNAPSHOT</code> builds to the [http://maven.imagej.net/ ImageJ Maven repository] in response to pushes to each code repository's <code>master</code> branch. So any downstream projects depending on a version of <code>LATEST</code> for a given component will match the last successful Jenkins build—i.e., the latest code on <code>master</code>.

Because every build also runs the associated unit tests, Jenkins is instrumental in early detection of new bugs introduced to the codebase.

Jenkins also performs releases, including [http://jenkins.imagej.net/job/Synchronize-and-deploy-IJ1/ automatically deploying ImageJ 1.x] and [http://jenkins.imagej.net/job/ImageJ1-releases/ building installers for ImageJ 1.x].

Jenkins performs many other services too, such as keeping Git repository mirrors in sync, building javadocs and updating other web resources.

== Maven repositories ==

SciJava projects use the [http://maven.imagej.net/ ImageJ Maven repository] (using [http://www.sonatype.com/nexus Sonatype Nexus]) for managing SciJava libraries. Such a repository serves two main purposes:

# '''Deployment.''' It provides a place to store our JAR artifacts, including snapshot versions, without the [http://maven.apache.org/guides/mini/guide-central-repository-upload.html red tape] of submitting to the central Maven repository.
# '''Proxying.''' It acts as an on-demand mirror for the public Maven repositories, reducing load on the central Maven server and potentially reducing local build times.

The first purpose is especially important for agile development across multiple components. For more details, see [http://books.sonatype.com/nexus-book/reference/repoman-sect-reasons.html Reasons to Use a Repository Manager].

=== Deploying artifacts ===

Jenkins can be told to deploy release artifacts to the ImageJ Maven repository. It can be done in one of two ways:

# '''Double push to master.''' A push to master happens with the POM version set to a non-SNAPSHOT—e.g., {{GitHub | org=fiji | repo=Trainable_Segmentation | commit=fd92658524dd90da8d505dad295c6f6ce3e3a188 | label=this Trainable_Segmentation commit releasing version 2.2.1}}. A second push to master is then typically done to "bump to next release cycle" after Jenkins starts building the release—e.g., {{GitHub | org=fiji | repo=Trainable_Segmentation | commit= | label=this Trainable_Segmentation commit bumps to 2.2.2-SNAPSHOT}}. This second push avoids accidentally having two different commits that purport to be the same non-SNAPSHOT version (since release versions must be unique and immutable).
# '''Release-Version Jenkins job.''' The special <code>Release-Version</code> job of Jenkins (which is visible only to logged in Jenkins users) is triggered to release a particular artifact. There are several advantages to this approach: 1) it creates a tag on GitHub with an "orphaned" release commit; 2) it does the "bump to next release cycle" commit automatically; 3) the Maven POM references the correct tag rather than <code>HEAD</code>; 4) it is capable of releasing certain artifacts to OSS Sonatype as appropriate (and hence to Maven Central).

As a rule of thumb, we currently use the "double push to master" approach to release many Fiji components, and the Release-Version Jenkins job to release core SciJava software stack components (including SciJava, ImgLib2, SCIFIO and ImageJ).

== ImageJ update sites ==

ImageJ [[update sites]] are what ImageJ actually queries to check for and download updates. These update sites are versioned, but do not rely on other tools (e.g., [[Git]] or [[Maven]]) in order to function. Rather, component developers upload new versions of their component(s) using the [[ImageJ Updater]], which makes them available to end users. Typically, update sites are available as web sites via HTTP, with uploads functioning via [https://github.com/imagej/imagej-plugins-uploader-webdav WebDAV] or [https://github.com/imagej/imagej-plugins-uploader-ssh SSH/SFTP/SCP].

An update site can be hosted anywhere, though the ImageJ web server at http://sites.imagej.net/ offers a [[personal update site]] service.

See the [[Update Sites|documentation on update sites]] for further details.

== Melting pot ==

A '''melting pot''' is an application-level construct. Its goal is to provide confidence that a collection of dependencies can actually function correctly together. Ideally, a melting pot test can precede and facilitate automation of software release cascades (e.g. where many SciJava, ImageJ and Fiji components are released in order). Releases of this sort have to progress in "bottom-up", so we need confidence that things will actually work as intended when we get to the "top."

A melting pot should be:

* Automated - e.g. via [[#Jenkins|Jenkins]]
* BOM-driven - to ensure dependency convergence is respected
* Test-based - to warn of failures, be it in behavior or dependency incompatibilities

For the start of a sample melting pot script designed for ImageJ, see [https://github.com/scijava/scijava-scripts/blob/aab7cfe805638efc25615fdd7c78cedaae3c7197/melting-pot.sh melting-pot.sh].

[[Category:Development]]

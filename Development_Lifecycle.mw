{{Notice | This page describes the [[SciJava]] software release process.
* To download software releases, see [[Downloads]].}}
{{Development}}
The SciJava [[philosophy]] is to [[Philosophy#Release_early.2C_release_often|release early, release often]]. To make doing so as painless as possible, we employ several [[project management]] resources, according to a specific software release process, as described below.

= Phases of development =

Intuitively, a feature has four "phases" of development:

# '''Developed on a topic branch.''' The source code is branched and the feature is developed on the branch, to avoid interfering with anyone else's work.
# '''Merged to master.''' The feature is merged to the <code>master</code> branch of the source code repository on GitHub.
# '''Deployed to Maven.''' A new release of the project is cut and ''deployed'' to the ImageJ Maven repository. This makes the feature available for use from downstream projects, by depending on the new release.
# '''Uploaded to ImageJ.''' A release is uploaded to an ImageJ [[update site]], putting it into the hands of end users.

== Phase 1: topic branch ==

Use [[Git]] and [[GitHub]] to [[Git_topic_branches|create a topic branch]]. The new feature is then developed and tested on this branch.

== Phase 2: merge to master ==

Once ready, file a [https://help.github.com/articles/using-pull-requests/ pull request] (PR) on [[GitHub]], inviting code review from other interested developers. Reviewers might ask for changes to the code, to address any issues. After any needed revisions have been made, a [[Governance|project maintainer]] will merge the feature to the master branch.

Alternately, if you have push access to the repository and are confident in your changes, then you can merge the topic branch yourself without a PR.

As soon as the work is merged to master, the ImageJ [[Jenkins]] server will pick up the change, build it, test it, and deploy it to the [[ImageJ Maven repository]].

== Phase 3: release to Maven ==

The next step is to cut a ''release'' version of the artifact. Normally, the version on master is a ''SNAPSHOT'' version, meaning it is [[Reproducible builds|unstable]] and not yet released. However, a [[Reproducible_builds|stable]] ''release'' artifact can be deployed to the ImageJ Maven repository in one of three ways:

# '''Double push to master.''' A push to master happens with the POM version set to a non-SNAPSHOT—e.g., {{GitHub | org=fiji | repo=Trainable_Segmentation | commit=fd92658524dd90da8d505dad295c6f6ce3e3a188 | label=this Trainable_Segmentation commit releasing version 2.2.1}}. A second push to master is then typically done to "bump to next release cycle" after Jenkins starts building the release—e.g., {{GitHub | org=fiji | repo=Trainable_Segmentation | commit= | label=this Trainable_Segmentation commit bumps to 2.2.2-SNAPSHOT}}. This second push avoids accidentally having two different commits that purport to be the same non-SNAPSHOT version (since release versions must be unique and immutable).
# '''Release-Version Jenkins job.''' The special <code>Release-Version</code> job of Jenkins (which is visible only to logged in Jenkins users) is triggered to release a particular artifact. There are several advantages to this approach: 1) it creates a tag on GitHub with an "orphaned" release commit; 2) it does the "bump to next release cycle" commit automatically; 3) the Maven POM references the correct tag rather than <code>HEAD</code>; 4) it is capable of releasing certain artifacts to OSS Sonatype as appropriate (and hence to Maven Central).
# '''release-version.sh script.''' The [https://github.com/scijava/scijava-scripts/blob/aab7cfe805638efc25615fdd7c78cedaae3c7197/release-version.sh release-version.sh] script is what the Release-Version Jenkins job uses under the hood to perform releases. It relies on the [http://maven.apache.org/maven-release/maven-release-plugin/ Maven Release plugin] to do most of the heavy lifting, but also does some extra work (e.g., to ensure releases are deployed to the correct repository).

See [[#Cutting_a_new_release|Cutting a new release]] below for more details on using these three approaches.

As a rule of thumb, SciJava developers currently use:
* The Release-Version Jenkins job to release core SciJava software stack components—including SciJava, ImgLib2, SCIFIO and ImageJ.
* The release-version.sh script to release most [[Fiji]] components.
* The "double push to master" approach to release other [[Fiji]] components.

== Phase 4: Upload to ImageJ ==

Deploying to the Maven repository creates a stable release version of a software component. But for ImageJ-related components, that alone does not put it into the hands of users. To do that, the component must then be ''uploaded'' to an ImageJ [[update site]].

ImageJ [[update sites]] are what ImageJ actually queries to check for and download updates. These update sites are versioned, but do not rely on other tools (e.g., [[Git]] or [[Maven]]) in order to function. Rather, component developers upload new versions of their component(s) using the [[ImageJ Updater]], which makes them available to end users. Typically, update sites are available as web sites via HTTP, with uploads functioning via [https://github.com/imagej/imagej-plugins-uploader-webdav WebDAV] or [https://github.com/imagej/imagej-plugins-uploader-ssh SSH/SFTP/SCP].

An update site can be hosted anywhere, though the ImageJ web server at http://sites.imagej.net/ offers a [[personal update site]] service.

See the [[Update Sites|documentation on update sites]] for further details.

= Cutting a new release =

As summarized above, there are three different release workflows we use, depending on the scenario.

== Release-Version Jenkins job ==

You can release a component using the Release-Version Jenkins job, but you must first log in with your ImageJ Jenkins account in order to see it.

=== Prerequisites ===

# You will need an ImageJ Jenkins account. If you haven't set this up yet, contact the [[Mailing_Lists|ImageJ-devel list]] and ask for an account. A maintainer will send you instructions.

=== Steps to release ===

# Visit the [http://jenkins.imagej.net/job/Release-Version/ Release-Version Jenkins job] web page.
# Click "Build with Parameters" from the left-hand menu.
# Select your component from the dropdown list.
# Enter the commit hash corresponding to the current tip of the master branch.
# Enter the desired version number of the release.
# Click the Build button.
# Grab a coffee.

Jenkins will take care of all the steps, including pushing the relevant commits and tags, building the code, and deploying the resultant artifact to the ImageJ Maven repository.

== release-version.sh ==

You can release a component using the [https://github.com/scijava/scijava-scripts/blob/aab7cfe805638efc25615fdd7c78cedaae3c7197/release-version.sh release-version.sh] script.

=== Prerequisites ===

# Install the release-version.sh script. The best way to do this is to clone the complete [https://github.com/scijava/scijava-scripts SciJava-scripts] repository. That will give you access to other useful scripts and help keep them all up to date.
# ('''optional''') If you want to easily use these scripts from any directory, you can [http://askubuntu.com/q/97897 add the scijava-scripts folder to your PATH].
# You will need an account for [http://maven.imagej.net maven.imagej.net] and the local Maven configuration to deploy to this repository. If you haven't set this up yet, contact the [[Mailing_Lists|ImageJ-devel list]] and ask for an account. A maintainer will send you instructions.

=== Steps to release ===

# From your project's directory, simply run:

  release-version.sh <NEW_VERSION>

{{Notice | If your project is a [https://maven.apache.org/guides/mini/guide-multiple-modules.html multi-module build], first make a commit commenting out any modules that should not be released. Then run the script from the aggregator pom directory.}}

== Double push to master ==

Historically, the "double push to master" approach was the recommended way to release—but it has now been replaced by the other two approaches. Nonetheless, there are a few components of Fiji that still use it to do their releases.

=== Prerequisites ===

* Your project needs to be tracked by a [http://jenkins.imagej.net/ Jenkins job] that will build and deploy Maven artifacts in response to changes on GitHub. If you aren't sure if such a job exists or not for your project, send a mail to the [[Mailing_Lists|ImageJ-devel]] list.
* Familiarize yourself with the concept of [[Maven]], and in particular the idea of [http://stackoverflow.com/q/5901378 SNAPSHOT and release artifacts]. When Jenkins deploys to Maven, it is actually uploading to a separate release or SNAPSHOT repository based on the version defined in the project's pom.xml. SNAPSHOTs can be changed; releases cannot.
* Familiarize yourself with the [http://git-scm.com/book/en/v2/Git-Basics-Tagging Git tagging process]. You will need to tag a commit and push the tag to a remote repository for the release process. Although Git tags can be changed or deleted over time, the convention of creating a tag to match each release creates a nice "bookmark" system for developers when they check out the code.

=== Steps to release ===

# Make a commit '''on master''' that changes the version of your project to a non-SNAPSHOT.
# Push your commit to GitHub to trigger the deployment of a Maven release.
# Tag the release commit with an appropriate named. Core projects use a standard "component name"-"version" naming scheme, e.g. <code>mysoftware-1.2.3</code>.
# Make a second commit incrementing the version to the next SNAPSHOT version.
# Push again to GitHub—both the SNAPSHOT-version master branch '''and the release tag'''.

The disadvantage to this method is that, since the steps are not automated, there is room for error and inconsistency—not pushing the tag, not making a commit to go back to a SNAPSHOT version, etc.

{{Warning | This process works because Jenkins automatically builds the project in response to commits on master. Whether they are deployed as [[Maven]] releases or SNAPSHOTs is determined entirely by the version number in the pom.xml for the project. This is why it is especially important to change the version back to a SNAPSHOT after the release: only one release for a given version can exist, and once it exists it cannot be overwritten. If you create multiple git commits at the same release version, it becomes unclear which one is the [[Reproducible builds|"real" release in Maven terms]].}}

= After a release =

Once the release has been made, in the case of ImageJ and Fiji components it is likely that you want it uploaded to an ImageJ [[update site]]:

* If you manage [[How to set up and populate an update site|your own update site]], you can upload it yourself.
* If your project is a [[Fiji_contribution_requirements|core Fiji project]], it is tracked on [http://status.imagej.net/ status.imagej.net] and the Fiji maintainers will likely pick it up with a few days.
** To help move things along faster, you can [https://help.github.com/articles/using-pull-requests/ submit a pull request] to update the version of your project in the appropriate place—e.g., in {{GitHub | org=fiji | repo=pom-fiji | label=pom-fiji}}.

= Further reading =

* The SciJava [[Architecture#Versioning|versioning guidelines]] will help you choose appropriate version numbers for your software.

[[Category:Development]]

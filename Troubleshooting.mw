{{BugReporting}}
= How to troubleshoot problems =

== Launching ImageJ in debug mode ==

To debug problems with ImageJ, it is often helpful to launch it in debug mode. There are several ways:

<ol>
<li>'''Launch with the <code>--debug</code> flag.'''
<ul>
<li>On Linux 64-bit (from a console):
<source lang="bash">$HOME/ImageJ.app/ImageJ-linux64 --debug</source>
</li>
<li>On OS X (from Terminal):
<source lang="bash">/Applications/ImageJ.app/Contents/MacOS/ImageJ-macosx --debug</source>
</li>
<li>On Windows 64-bit (from Command Prompt):
<source lang="bash">%HOMEPATH%\ImageJ.app\ImageJ-win64.exe --debug</source>
</ul>
</li>
<li>'''Set the <code>DEBUG</code> environment variable.''' E.g., on Linux:
<source lang="bash">DEBUG=1 $HOME/ImageJ.app/ImageJ-linux64</source>
</li>
<li>'''Rename the launcher.''' You can rename the executable from <code>ImageJ-xxx</code> to <code>debug</code> (<code>debug.exe</code> on Windows) before launching, and the launcher will be more verbose about what it is doing.
</li>
<li>'''Set <code>scijava.log.level</code>.''' You can control the log level more precisely by setting the <code>scijava.log.level</code> system property. E.g., on Linux:
<source lang="bash">$HOME/ImageJ.app/ImageJ-linux64 -Dscijava.log.level=trace --</source>
Valid levels include: <code>none</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code> and <code>trace</code>.
</li>
</ol>

== ImageJ 1.x's debug mode ==

ImageJ 1.x has its own debug mode, which can be enabled in the ''Edit {{arrow}} Options {{arrow}} Misc...'' menu, by checking ''Debug mode''.

= Common issues =

== The image I loaded is displayed all black! But it is not black! ==

This problem usually arises when 12-bit or 14-bit images are loaded into ImageJ without autoscaling. In that case, they are treated as if they were 16-bit images, and therefore the dynamic range is all wrong. You can fix this by clicking on ''Image {{arrow}} Adjust {{arrow}} Brightness/Contrast...'' and hitting the ''Auto'' button.

== The image colors do not match what I see in other programs! ImageJ is wrong! ==

In many cases, ImageJ performs autoscaling by default, to improve the contrast of your image. Otherwise, in many cases with scientific images you might see only a black square (see previous question).

You can override the autoscaling using the [http://imagej.net/docs/guide/146-28.html#sub:Adjust Brightness/Contrast] dialog.

It is important to understand that your image is a collection of samples, each of which has a numerical intensity value. The unit of these values is rather arbitrary and unspecified, depending on the type and calibration of your detector. Your file is stored with a certain [http://imagej.net/docs/guide/146-7.html#toc-Section-7 bit depth], meaning these intensities can range from 0 (no light detected) to a particular maximum value (the most light the detector is capable of detecting). For example, 8-bit images have a maximum value of 255, whereas 16-bit images have a maximum of 65535. In practice though, especially with higher bit depths, your detector will not typically record sample intensities across that entire range of values (and if it does record a significant number of values at the maximum, you probably oversaturated your detector, which will skew your analysis!).

Because the full range of values is typically much less than the maximum—e.g., in the case of a 12-bit detector the actual maximum range is 0-4095, and often even smaller in practice—ImageJ performs '''autoscaling''' to show you a meaningful or "pretty good" image by default, which is not just a black square (see previous question). That is: it maps the darkest actual intensity in your data to black, and the brightest actual intensity in your data to white. You can override this mapping using the [http://imagej.net/docs/guide/146-28.html#sub:Adjust Brightness/Contrast] dialog under the ''Image {{arrow}} Adjust'' menu (shortcut: {{Key | shift}}+{{Key | C}}).

Alternately, to disable autoscaling during initial import, you can use the [[Bio-Formats]] plugin to import your data with the "Autoscale" option turned off:

* File {{arrow}} Import {{arrow}} Bio-Formats
* Choose your file
* Uncheck the "Autoscale" box
* Click OK
* The data will be scaled to match the maximum of the bit depth, rather than autoscaled.

Further reading:
* [[Image Intensity Processing]]
* [[IP Principles]]

= [[3D Viewer]] issues =

== The 3D Viewer opens a window saying ''An unexpected exception occurred.'' ==

If in the same window, it also says:

 java.lang.NullPointerException:Canvas3D: null GraphicsConfiguration

the reason is most likely that your graphics setup does not have any hardware 3D acceleration. This can happen e.g. when you run ImageJ via a remote X11 connection (3D acceleration works only when the graphics are displayed on the same machine as the program runs).

Unfortunately, there is not workaround/fix for this situation yet, except to use ImageJ locally when you want to use the 3D Viewer.

== Problem with Intel graphics cards ==

There is a known problem with older Windows drivers for some Intel graphics cards. Usually, this is fixed by installing new drivers. If you would like to help make ImageJ nicer by detecting faulty driver versions, please [[Contact|contact us]].

== The 3D Viewer simply crashes ==

Unfortunately, there are quite a large number of possible reasons. Please help us by [[Debugging_intro#Debugging_Java3D_issues|debugging the issues]] and [[Contact|contacting us]] (mailing list or IRC) with the information. You can also [[Report a Bug|report a bug]], which will provide a lot of additional, potentially useful information.

== Only a gray rectangle is shown by the 3D Viewer ==

As with 3D Viewer crashes, there are quite a large number of possible reasons. Please help us by [[Debugging_intro#Debugging_Java3D_issues|debugging the issues]] and [[Contact|contacting us]] (preferably via mailing list) with the information. You can also [[Report a Bug|report a bug]], which will provide a lot of addidtional, potentially useful information.

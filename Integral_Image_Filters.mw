{{Infobox
| name                   = Integral Image Filters
| software               = Fiji
| author                  = [[User:Saalfeld|Stephan Saalfeld]] ([mailto:saalfeld@mpi-cbg.de])
| maintainer             = [[User:Saalfeld|Stephan Saalfeld]]
| source                 = [https://github.com/axtimwalde/mpicbg/tree/master/mpicbg/src/main/java/mpicbg/ij/integral GitHub]
| released               = March 21<sup>st</sup>, 2011
| latest version         = February 22<sup>nd</sup>, 2012
| status                 = stable, active
| category               = [[:Category:Plugins|Plugins]], [[:Category:Filtering|Filtering]]
}}<include iframe class="youtube-player" type="text/html" width="400" height="280" src="http://www.youtube.com/embed/p1mhZqj2VTY" frameborder="0" />

Integral images have been introduced in by Crow (1984)<ref>{{cite conference
 | last = Crow
 | first = Franklin C.
 | title = Summed-area tables for texture mapping
 | booktitle = Proceedings of the 11<sup>th</sup> annual conference on Computer graphics and interactive techniques
 | series = SIGGRAPH '84
 | year = 1984
 | pages = 207&ndash;212
 | publisher = ACM
 | address = New York, NY, USA
 | isbn = 0-89791-138-5
 | url = http://doi.acm.org/10.1145/800031.808600
 | doi = 10.1145/800031.808600
}}
</ref> as a technique to improve texture rendering speed at multiple scales in perspective projections.  The technique has since then been used for a number of applications.  The most popular examples are fast normalized cross-correlation<ref>{{cite conference
 | first = J. P.
 | last = Lewis
 | booktitle = Vision Interface
 | volume = 95
 | pages = 120&ndash;123
 | publisher = Canadian Image Processing and Pattern Recognition Society
 | title = Fast template matching
 | year = 1995
}}</ref>, the [http://en.wikipedia.org/wiki/Viola%E2%80%93Jones_object_detection_framework Viola-Jones object detection framework]<ref>{{cite journal
 | first1 = Paul
 | last1 = Viola
 | first2 = Michael J.
 | last2 = Jones
 | title = Robust Real-Time Face Detection
 | journal = International Journal of Computer Vision
 | pages = 137&ndash;154
 | volume = 57
 | number = 2
 | year = 2004
}}</ref>, and the [http://en.wikipedia.org/wiki/SURF Speeded Up Robust Feature (SURF)] transform<ref>{{cite journal
 | first1 = Herbert
 | last1 = Bay
 | first2 = Andreas
 | last2 = Ess
 | first3 = Tinne
 | last3 = Tuytelaars
 | first4 = Luc
 | last4 = Van Gool
 | title = SURF: Speeded Up Robust Features
 | journal = Computer Vision and Image Understanding (CVIU)
 | volume = 110
 | number = 3
 | pages = 346&ndash;359
 | year = 2008
}}</ref>.  In Fiji, we currently use Integral Images for a number of basic statistic block filters.

==Basic Block Statistics with Integral Images (Summed-Area Tables)==

===Mean===
The mean <math>\mu(X)</math> of a discrete set of random variables <math>X=\{x_1,\dots,x_n\}</math> is defined as

<math>
\mu=\sum_{i=1}^np_ix_i
</math>

Let <math>X</math> be the set of pixel values in a rectangular block with all pixel values having the same probability <math>p_i=\frac{1}{n}</math>, then

<math>
\mu=\frac{1}{n}\sum_{i=1}^nx_i
</math>

The sums can be generated from an Integral Image over <math>I(\vec{x})</math> .  For a two-dimensional image, the table can be generated in a single loop with, on average, 3~sums for calculation and 5~sums for data access per pixel.  Using that table, the mean of an arbitrary rectangular block of pixels can be generated in constant time with 1 product and 3 sums for calculation and 2 products and 6 sums for data access.

===Variance===

The variance <math>\text{Var}(X)</math> of a discrete set of random variables <math>X=\{x_1,\dots,x_n\}</math> is defined as

<math>
\text{Var}(X) = \sum_{i=1}^np_i(x_i-\mu)^2 \quad\text{with}\quad \mu=\sum_{i=1}^np_ix_i
</math>

Let <math>X</math> be the set of pixel values in a rectangular block with all pixel values having the same probability <math>p_i=\frac{1}{n}</math>, then

<math>
\text{Var}(X) = \frac{1}{n}\sum_{i=1}^n(x_i-\mu)^2 \quad\text{and}\quad \mu=\frac{1}{n}\sum_{i=1}^nx_i
</math>

which expands to

<math>
\text{Var}(x) = \frac{1}{n}\sum_{i=1}^n\left(x_i^2-2x_i\mu+\mu^2\right)
</math>

<math>
        = \frac{1}{n}\sum_{i=1}^nx_i^2 - \frac{1}{n}\sum_{i=1}^n2x_i\mu + \mu^2 </math>

<math>
        = \frac{1}{n}\sum_{i=1}^nx_i^2 - \frac{1}{n}\sum_{i=1}^n2x_i\mu + \frac{1}{n^2}\left(\sum_{i=1}^nx_i\right)^2
</math>

<math>
        = \frac{1}{n}\sum_{i=1}^nx_i^2 - \frac{2\mu}{n}\sum_{i=1}^nx_i + \frac{1}{n^2}\left(\sum_{i=1}^nx_i\right)^2
</math>

<math>
        = \frac{1}{n}\sum_{i=1}^nx_i^2 - \frac{2}{n^2}\left(\sum_{i=1}^nx_i\right)^2 + \frac{1}{n^2}\left(\sum_{i=1}^nx_i\right)^2
</math>

<math>

        = \frac{1}{n}\sum_{i=1}^nx_i^2 - \frac{1}{n^2}\left(\sum_{i=1}^nx_i\right)^2
</math>

<math>
        = \frac{1}{n}\sum_{i=1}^nx_i^2 - \left(\frac{1}{n}\sum_{i=1}^nx_i\right)^2
</math>

<math>
        = \frac{1}{n}\left(\sum_{i=1}^nx_i^2 - \frac{1}{n}\left(\sum_{i=1}^nx_i\right)^2\right)
</math>

Both sums can be generated from two Integral Images over <math>I(\vec{x})</math> and <math>I(\vec{x})^2</math> respectively.  For a two-dimensional image, both tables can be generated in a single loop with, on average, 1 product and 6 sums for calculation and 5 sums for data access per pixel.  Using those, the variance of an arbitrary rectangular block of pixels can be generated in constant time with 3 products and 9 sums for calculation and 2 products and 6 sums for data access.


<div style="float:right; margin-left:2em; margin-bottom:2em"><include iframe class="youtube-player" type="text/html" width="340" height="280" src="http://www.youtube.com/embed/MZfnTL9e_fA" frameborder="0" /></div>

===Block Matching with Integral Images===

We may deal with a situation where the intensities in two overlapping image regions <math>X</math> and <math>Y</math> might vary in brightness and contrast.  Then, a simple estimator like e.g. the ''Mean Square Error'' (MSE) cannot be used as a similarity measure because it is not invariant with respect to a linear transformation.  Instead, an appropriate measure for linear dependency would serve the purpose.  The ''Pearson Product-Moment Correlation Coefficient'' (PMCC) <math>\rho_{X,Y}</math> is an appropriate measure for linear dependency

<math>
\rho_{XY} = \frac{\sigma_{XY}}{\sigma_{X}\sigma_{Y}}
</math>

which, for <math>X</math> and <math></math> being a finite sample with <math>n</math>~elements each gives the ''Correlation Coefficient'' <math>r_{XY}</math>

<math>
r_{XY} = \frac{\sum_{i=1}^n(x_i-\mu_X)(y_i-\mu_Y)}{\sqrt{\sum_{i=1}^n(x_i-\mu_X)^2}\sqrt{\sum_{i=1}^n(y_i-\mu_Y)^2}}\quad\text{with}\quad\mu_X = \frac{1}{n}\sum_{i=1}^nx_i
</math>

that can be transformed yielding a set of independent sums.  For the numerator, that is

<math>
\begin{align}
\sum_{i=1}^n(x_i-\mu_X)(y_i-\mu_Y) &= \sum_{i=1}^nx_iy_i-\sum_{i=1}^nx_i\mu_Y-\sum_{i=1}^ny_i\mu_X+\sum_{i=1}^n\mu_X\mu_Y \\
 &= \sum_{i=1}^nx_iy_i-\mu_Y\sum_{i=1}^nx_i-\mu_X\sum_{i=1}^ny_i+n\mu_X\mu_Y \\
 &= \sum_{i=1}^nx_iy_i-\frac{1}{n}\sum_{i=1}^ny_i\sum_{i=1}^nx_i
\end{align}
</math>

For the denominator, it is handy to multiply with <math>\frac{n}{n}</math> first

<math>
\begin{align}
r_{XY} &= \frac{\sum_{i=1}^nx_iy_i-\frac{1}{n}\sum_{i=1}^ny_i\sum_{i=1}^nx_i}{\sqrt{\sum_{i=1}^n(x_i-\mu_X)^2}\sqrt{\sum_{i=1}^n(y_i-\mu_Y)^2}} \\
 &= \frac{n\sum_{i=1}^nx_iy_i-\sum_{i=1}^ny_i\sum_{i=1}^nx_i}{n\sqrt{\sum_{i=1}^n(x_i-\mu_X)^2}\sqrt{\sum_{i=1}^n(y_i-\mu_Y)^2}} \\
 &= \frac{n\sum_{i=1}^nx_iy_i-\sum_{i=1}^ny_i\sum_{i=1}^nx_i}{\sqrt{n\sum_{i=1}^n(x_i-\mu_X)^2}\sqrt{n\sum_{i=1}^n(y_i-\mu_Y)^2}}
\end{align}
</math>

because

<math>
\begin{align}
n\sum_{i=1}^n(x_i-\mu_X)^2 &= n\sum_{i=1}^n(x_i^2-2x_i\mu_X+\mu_X^2) \\
 &= n\sum_{i=1}^nx_i^2 - 2n\mu_X\sum_{i=1}^nx_i + \left(\sum_{i=1}^nx_i\right)^2 \\
 &= n\sum_{i=1}^nx_i^2 - 2\left(\sum_{i=1}^nx_i\right)^2 + \left(\sum_{i=1}^nx_i\right)^2 \\
 &= n\sum_{i=1}^nx_i^2 - \left(\sum_{i=1}^nx_i\right)^2
\end{align}
</math>

yielding

<math>
 r_{XY} = \frac{n\sum_{i=1}^nx_iy_i - \sum_{i=1}^nx_i\sum_{i=1}^ny_i}{\sqrt{n\sum_{i=1}^nx_i^2 - \left(\sum_{i=1}^nx_i\right)^2}\sqrt{n\sum_{i=1}^ny_i^2 - \left(\sum_{i=1}^ny_i\right)^2}}
</math>

which means that we can calculate <math>r_{XY}</math> for each block at a fix offset of two images from five summed-area tables at constant time.  In some situations (e.g. finding an extremum), it is sufficient to estimate <math>r_{XY}^2</math> and the sign of <math>r_{XY}</math>.  Then, the calculation of the two square roots can be avoided

<math>
r_{XY}^2 = \frac{a^2}{\left(n\sum_{i=1}^nx_i^2 - \left(\sum_{i=1}^nx_i\right)^2\right)\left(n\sum_{i=1}^ny_i^2 - \left(\sum_{i=1}^ny_i\right)^2\right)}
</math>

with

<math>
a = n\sum_{i=1}^nx_iy_i - \sum_{i=1}^nx_i\sum_{i=1}^ny_i\quad\text{and}\quad{}\sgn(r_{XY}) = \sgn(a)
</math>

==References==

<references />

[[Category:Plugins]]
[[Category:Filtering]]
[[Category:Integral Image]]

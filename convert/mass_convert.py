import os
import markdown_link_extractor
from ij_mw_preprocess_debo import *
import re
from shutil import copyfile

reader_failing = ["DiameterJ",
                  "Description_of_ImageJ's_plugin_architecture",
                  "Shape_Index_Map",
                  "VisBio_Fiji_plugin",
                  "2014-07-11_-_Fiji_won't_quit!",
                  "2014-07-11_-_Fiji_won't_quit",
                  "2010-06-14_-_Fiji_\"Heidelberg\"_is_out",
                  "Overview_of_Fiji's_source_code",
                  "2010-08-04_-_The_Script_Editor's_font_and_tab_size_are_now_adjustable",
                  "Fiji's_Menu",
                  "GSoC_2011_Ideas",
                  "Adelson's_Squares",
                  "2010-04-27_-_Fiji's_Script_Editor_now_understands_ImageJ_Macros"]

pandoc_failing = ["Versioning",
               "2012-03-20_-_Unit_tests_for_ImageJ_1.46",
               "Deconvolution",
               "Fiji_Contribution_requirements",
               "BigDataServer",
                "2D_Histogram",
                "Alida"]

liquid_syntax_error = ["Batch_Processing", # has an include tag in a title which doesn't work, needs to be solved manually
                       "Ops_Deconvolution", # has formulas messing with liquid
                       "2010-06-14_-_Fiji_\"Heidelberg\"_is_out", # one bc template is not closed
                       "2010-06-14_-_Fiji_Heidelberg_is_out", # one bc template is not closed
                       "MATLAB_Scripting", "Sholl_Analysis", "TrakEM2_Scripting",
                    "Hackathon", "Image_Intensity_Processing", "Miji", "Strahler_Analysis",
                    "ImageJ", "Test_Block_Matching_Parameters", "Feature_Extraction", "Developing_ImageJ_in_Eclipse",
                       "Developing_Plugins_for_ImageJ_1.x"]


def delete_autogenerated_media(root_out):
    media_dir = images_dir(root_out)
    for filename in os.listdir(media_dir):
        file = os.path.join(media_dir, filename)
        os.remove(file)


def images_dir(root_out):
    return os.path.join(os.path.join(root_out, "images"), "pages")


def catch_media(path_in, root_out):
    content = read_file(path_in)
    pattern = re.compile(r'\[\[File\:([^ |]*)[ ]*\|[ ]*[^ |]*[ ]*\|[ ]*link=[^\]]*[ ]*\]\]')
    for (file_name) in re.findall(pattern, content):
        copy_media(file_name, path_in, root_out)
    pattern = re.compile(r'\[\[Image:([^\|\]]*)[^\]]*\]\]')
    for (file_name) in re.findall(pattern, content):
        copy_media(file_name, path_in, root_out)


def copy_media(file_name, path_in, root_out):
    file_out = os.path.join(root_out, file_name)
    file_in = os.path.join(os.path.dirname(path_in), file_name)
    found = True
    if not os.path.exists(file_in):
        print("Could not find media " + file_in)
        found = False
    if os.path.exists(file_out):
        found = False
    if found:
        print("Copying " + file_name)
        copyfile(file_in, file_out)


def delete_autogenerated_pages(root_out):
    pages_dir = os.path.join(root_out, "pages")
    for filename in os.listdir(pages_dir):
        if filename.endswith(".md"):
            file = os.path.join(pages_dir, filename)
            with open(file, 'r') as f:
                lines = f.readlines()
                if lines[1] == autogenerated_line:
                    print("Deleting " + file)
                    os.remove(file)


def _convert(root_in, root_out, page_title, recursive=False):
    layout = "page"
    metapage = False
    title = page_title
    if "#" in page_title:
        parts = page_title.split("#", 1)
        if parts[0].strip():
            _convert(root_in, root_out, parts[0], recursive)
        return
    if "(" in page_title:
        print("Cannot process names with parentheses: " + page_title)
        return
    if ":" in page_title:
        if "Special:" in page_title:
            # print("Cannot create mediawiki special pages")
            return
        if "File:" in page_title:
            return
        if "Template:" in page_title:
            return
        if "Category:" in page_title:
            layout = "category"
            metapage = True
            page_title = page_title.replace(":Category:", "Category:")
            title = page_title.replace("Category:", "")
        else:
            print("Cannot convert pages with colon in title: " + page_title)
            return
    if page_title in reader_failing:
        print("Cannot process, reader fails: " + page_title)
        return
    if page_title in pandoc_failing:
        print("Cannot process, pandoc fails: " + page_title)
        return
    if page_title in liquid_syntax_error:
        print("Cannot process, creates invalid syntax: " + page_title)
        return
    path_in = None
    if not metapage:
        path_in = os.path.join(root_in, page_title + ".mw")
        if not os.path.exists(path_in):
            print("Could not find " + page_title)
            return
        title = get_title(path_in)
        catch_media(path_in, images_dir(root_out))
    path_out = os.path.join(os.path.join(root_out, "pages"), page_title + ".md")
    if os.path.exists(path_out):
        return
    convert(path_in, path_out, layout, title)
    if recursive:
        convert_links(path_out, root_in, root_out)


def convert_links(path_out, root_in, root_out):
    output = read_file(path_out)
    links = markdown_link_extractor.getlinks(output)
    for link in links:
        if link.startswith("http"):
            continue
        if link.startswith("wikipedia"):
            continue
        _convert(root_in, root_out, link)


def convert_all(root_in, root_out):
    for filename in os.listdir(root_in):
        if filename.endswith(".mw"):
            path_in = os.path.join(root_in, filename)
            title = filename.replace(".mw", "")
            # print("trying to convert " + title + "...")
            _convert(root_in, root_out, title, recursive=True)


root_in = "/home/random/Development/imagej/imagej/imagej-net-temp/"
root_out = "/home/random/Development/imagej/imagej/imagej.github.io/"

delete_autogenerated_pages(root_out)
# _convert(root_in, root_out, "Development", recursive=True)
# _convert(root_in, root_out, "News", recursive=True)
# _convert(root_in, root_out, "Introduction", recursive=True)
# _convert(root_in, root_out, "Upcoming_Events", recursive=True)
# _convert(root_in, root_out, "Help", recursive=True)
convert_all(root_in, root_out)

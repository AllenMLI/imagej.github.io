{{Infobox
| name                   =  Scijava-parallel
| software               = Fiji
| author                 = Petr Bainar, Jan Kožusznik
| maintainer             = Jan Kožusznik
| released               = November 2019
| latest version         = November 2019
| category               = [[:Category:Development]]
| source               = [https://github.com/fiji-hpc/scijava-parallel on github]
}}

Scijava-parallel is a framework that should provide an access point for using computational resources such are remote computers or HPC clusters. It hides details about configuration and initialisation of such resources.

== Types of users ==
Scijava-parallel is designed to be used be three type of users and we call them: ''developers'', ''Fiji users'' and ''parallel paradigm providers''.

Developer is a user who uses its defined API for accessing to configured  computational resources. 
Remote computational resources are accessible through components that implements interface derived from interface ParallelParadigm. 
These components are called ''parallel paradigm implementations'' and specialised interfaces are called ''parallel paradigms''. 

A Fiji user provides configurations for parallel paradigm implementations. 
The configurations are called profiles. 
Users also selects one configuration that is used when some code requests for parallel paradigm.

A parallel paradigm provider offers new parallel paradigm implementations or new types of parallel paradigm.

== Developers ==
Developers obtain parallel paradigm implementation that is in selected profile by method getParadigmOfType. Desired parallel paradigm is specified when the method is used and when parallel paradigm implementation does not implement the type ''null'' value is returned.
[[File:ParallelService.png]]

Base type ParallelParadimg contains three methods: 
* ''init'' - initializes resources required for and used by parallel paradigm; 
* ''close'' - disposes initialized resource;
* ''getStatus'' - returns status indicating whether is paradigm initialized or disposed.

First parallelization paradigm was type ''RPCParadigm'' that has methods:
<source lang="java">
  List<Map<String, Object>> runAll(String commandName, List<Map<String, Object>> parameters)
  List<CompletableFuture<Map<String, Object>>> runAllAsync(String commandName, List<Map<String, Object>> parameters);
</source>

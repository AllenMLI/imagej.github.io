{{Development}}
==Some things that I wouldn't remember otherwise==

<dl>
<dt><source lang="bash">git init --shared=group</source>
<dd>Tell the repository that it should always set the permissions to g+w.
<dt><source lang="bash">git init --bare --shared=group</source>
<dd>Idem, but a bare repository (that is, no files checked out, so you can push to it.) This is meant for a remote server repository that all your coworkers push into and pull/fetch from.
<dt><source lang="bash">git branch -m <new branch name></source>
<dd>Rename the current branch.
<dt><source lang="bash">git reset --hard HEAD^</source>
<dd>Roll back.
<dt><source lang="bash">git reset --hard HEAD@{1}</source>
<dd>Roll back.
<dt><source lang="bash">git checkout HEAD@{1} -- <file></source>
<dd>Cherry pick one file revision from the previous commit.
<dt><source lang="bash">git diff <branch1> <branch2> -- <file></source>
<dd>Diff a file between two branches.
<dt><source lang="bash">git log -p --color-words</source>
<dd>Display a log with colored word diffs.  Say "-S" to less to virtually wrap long lines.
<dt><source lang="bash">git diff <commit a>:<file> <commit b>:<file> --color-words</source>
<dd>Display a diff with colored words between a file in one commit and a file in another commit.  Say "-S" to less to virtually wrap long lines.
<dt><source lang="bash">git log --format='%aN <%ae&>' | sort -u</source>
<dd>Display all contributing authors of a project including their e-mail.  Respects .mailmap.
</dl>

==Tutorials==

===How to create a shared remote repository?===

<dl><dt><source lang="bash">
ssh you@server
mkdir repos/remote.git
cd repos/remote.git
git --bare init --shared=group
logout

cd ~/local
git remote add origin ssh://you@server/home/you/remote.git
git push origin master
git config branch.master.remote origin
git config branch.master.merge refs/heads/master
</source>
<dd>Creates a bare remote repository at <code>ssh://server/home/you/remote.git</code> that tracks your local repository in <code>/home/you/local</code>.  Adopted from [[http://toolmantim.com/articles/setting_up_a_new_remote_git_repository Tim Lucas]].
</dl>

===How to display a filtered set of commits?===

Assume you want to see commits in branch ''stephan'', but only those that are <u>not</u> part of the history of branch ''saalfeld'':

<source lang="bash">
git log stephan ^saalfeld
</source>

More realistically, if you want to see all the commits which are in a topic branch, but not yet merged into master:

<source lang="bash">
git log --all ^master
</source>

If you want to see the changes which come from a topic branch which was merged in commit ''deadbeef'', use this command line:

<source lang="bash">
git log deadbeef^..deadbeef^2
</source>

Explanation: ''deadbeef'' is a merge commit, so its first parent (''deadbeef^'', can also be written as ''deadbeef^1'') was the current HEAD when the merge was performed, and the second parent (''deadbeef^2'') is the tip of the branch which was merged.  The argument ''A..B'' is short form of ''^A B'', i.e. all commits reachable from B excluding those which are also reachable from A.

[[Category:Git]]

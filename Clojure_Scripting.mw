<h1>Clojure tutorial for ImageJ</h1>

<p>Check out [http://clojure.sourceforge.net clojure web site] and particularly the chapter on [http://clojure.sourceforge.net/reference/java_interop.html Java interoperability].</p>

<h3>Language basics</h3>
<p>A ';' defines the start of a comment, just like '//' does in Java.</p>
<p>A function definition declares parameters within [].</p>
<p>Local variables are declared with <i>let</i>, and global variables with <i>def</i>.</p>
<p>Functions are defined with <i>defn</i>, and are visible globally. Hence a function declared within a <i>let</i> statement has access to variables declared in it. This method enables closures.</p>
<p></p>

<h3>Calling methods and variables on a java object</h3>
<p>There are two ways, the second syntactic sugar of the first. Below, <b>imp</b> is a pointer to an ImagePlus:</p>
<pre>
; java-ish way:
(. imp (getProcessor))

; lisp-ish way:
(.getProcessor imp)
</pre>

<p>To call a method on an object returned by a method call, there is a simplified way:</p>
<pre>
; double way:
(. (. imp (getProcessor)) (getPixels))

; simplified double way:
(.. imp (getProcessor) (getPixels))

; or lisp-ish way:
(.getPixels (.getProcessor imp))
</pre>

<p>To call a variable or 'field', just do it like a method call but without the parentheses:</p>
<pre>
(. imp changes)
</pre>

<p>To enhance readability, use <i>import</i> when appropriate. Imports remain visible throughout the current namespace:</p>
<pre>
(import '(java.awt Color Rectangle)
        '(ij.plugin.filter PlugInFilter))

(new Rectangle 0 0 500 500)

(. PlugInFilter DOES_ALL)
</pre>

<p>Choose whatever matches your mental schemes best.</p>

<h3>Calling static fields and methods: namespace syntax</h3>

<p>To call a <b>static</b> field or method, use namespace syntax:</p>
<pre>
(ij.plugin.filter.PlugInFilter/DOES_ALL)

(ij.IJ/log "Some logged text")
</pre>

<p>Above, notice how a class name is used instead of a pointer to call static fields and methods. Static fields and methods are just variables and functions that exist within the namespace of the class in which they are declared. Hence Clojure's namespace syntax makes way more sense than java code, that doesn't do such distinction and allows for loads of confusion (java allows invoking static methods and fields using a pointer to an instance of the class in which such static methods and fields are declared).</p>

<h3>Defining variables: obtaining the current image</h3>
As a local variable <b>imp</b> declared within a <i>let</i> statement:
<pre>
(let [imp (. ij.WindowManager (getCurrentImage))]
    ; print its name
    (println (. imp (getTitle))))

; Variable imp NOT visible from outside let statement:
(println (. imp (getTitle)))
---&gt; ERROR
</pre>
<p>As a general variable visible from the entire namespace:</p>
<pre>
(def *imp* (. ij.WindowManager (getCurrentImage)))

(println (. *imp* (getTitle)))

; Alternative syntax
(println (.getTitle *imp*))
</pre>
<p>By convention, in lisp global variables are written with asterisks in the name.</p>
<br />
<p>A <i>let</i> statement lets you declare any number of paired variable name / values, even referring to each other in sequence:</p>
<pre>
(let [imp (. ij.WindowManager (getCurrentImage))
      ip (. imp (getProcessor))
      pix (. ip (getPixels))
      pix2 (.. imp (getProcessor) (getPixels))]
    ; do some processing ...
    (println (str "number of pixels: " (count pix))))
</pre>
<p>Any number of <i>let</i> statements may be nested together:</p>
<pre>
(let [imp (. ij.WindowManager (getCurrentImage))]
    ; do whatever processing here
    (let [ip (. imp (getProcessor)]
        ; print first pixel
	(println (str (. ip (getPixel 0 0)))))))
</pre>


<h3>Defining a closure</h3>
<p>In the following a function is declared within the scope of the local variable <b>rand</b>, which contains an instance of java.util.Random. All calls to the function <i>rand-double</i> will use the same random number generator instance with seed 69997.</p>
<p>The <i>dotimes</i> loop will then print 10 different pseudo-random numbers. If the <b>rand</b> was a new Random with seed 69997 every time, all 10 numbers would be exactly the same.</p>
<p>You can think of a function inside a closure as a static function using a static variable (in Java), but it's more than that, since the function will be able to access parameters on the global namespace and also in any other local namespace in which the <i>let</i> is declared. For example, another <i>let</i>, or even another <i>defn</i>!</p>
<pre>
(let [rand (new java.util.Random 69997)]
    (defn rand-double []
        (. rand (nextDouble))))

(dotimes i 10
    (println (rand-double)))
</pre>

<h3>Looping an array of pixels</h3>
<p>For example, to find the min and max values:</p>
<pre>
; Obtain the pixels array from the current image
(let [imp (. ij.WindowManager (getCurrentImage))
      pixels (.. imp (getProcessor) (getPixels))
      min (apply min pixels)
      max (apply max pixels)]
    (println (str "min: " min ", max: " max)))
</pre>

<p>The above code does not explicitly loop the pixels: it simply applies a function to an array.</p>
<p>To loop pixels one by one, use any of the following:</p>
<pre>
(let [imp (.getCurrentImage ij.WindowManager)
      pixels (.. imp (getProcessor) (getPixels))]

      ; First loop with "dotimes"
      (dotimes i (count pixels)
          (println (aget pixels i)))

      ; Second loop: with "loop -- recur"
      (loop [i 0
             len (count pixels)]
         (if (&lt; i len)
            (let [pix (aget pixels i)]
                (println (str i ": " pix))
                (recur (inc i)
                       len))))

</pre>                                                                                                                                                                                                                
<p>Above, notice that the <i>loop -- recur</i> construct is essentially a <i>let</i> declaration, with a second call (<i>recur</i>) to reset the variables to something else. In this case, the next index in the array. Note how the len is simply given the same value over and over, just to avoid calling <i>(count pixels)</i> at each iteration.</p>

<p>Of course, there are lispier ways to loop an array of pixels. For example, to obtain the average of all pixels, we can use function <i>reduce</i>, which takes the first two elements of a list, applies a function to them, and then applies the function to the result and the next element, etc:</p>

<pre>
(let [fp (.getProcessor (.getImage ij.IJ))
      pix (.getPixels fp)]
   (if (instance? ij.process.FloatProcessor fp)
      (println "Average pixel intensity" (/ (reduce + pix) (count pix)))
      (println "Not a 32-bit image")))
</pre>

<p>Above, notice that one could have used also <i>apply</i> to apply <i>+</i> to all element of an array, with the same result:</p>
<pre>
      (println "Average pixel intensity" (/ (apply + pix) (count pix)))
</pre>

<p>To sum all pixels in an 8-bit image, one needs first to bit-and all bytes to 255, so they become integers and can be summed. But of course we should not <i>bit-and</i> the sum! To solve this, <i>reduce</i> accepts a first value (in this case, zero):</p>

<pre>
(let [bp (.getProcessor (.getImage ij.IJ))
      pix (.getPixels bp)]
  (if (instance? ij.process.ByteProcessor bp)
    (println "Average intensity: " (float (/ (reduce (fn [x1 x2] (+ x1 (bit-and x2 255))) 0 pix) (count pix))))
    (println "Not an 8-bit image")))
</pre>

<p>It could even be done using a local variable, but it's ugly and undesirable (why create it when it's not really needed)? Notice we need to create the local variable "sum" because variables declared by <i>let</i> are immutable.</p>

<pre>
(let [bp (.getProcessor (.getImage ij.IJ))
      pix (.getPixels bp)]
  (if (instance? ij.process.ByteProcessor bp)
    (with-local-vars (sum 0)
      (doseq pixel pix
        (var-set sum (+ (var-get sum) (bit-and pixel 255))))
      (println (float (/ (var-get sum) (count pix)))))
    (println "Not an 8-bit image")))
</pre>

<h3>Executing commands from the menus</h3>                                                                                                                                                                            
<p>Any ImageJ menu command may be run on the active image:</p>                                                                                                                                                        
<pre>                                                                                                                                                                                                                 
(.doCommand ij.IJ "Add Noise")                                                                                                                                                                                        
</pre>                                                                                                                                                                                                                
<p>Be aware that the above starts a new Thread and forks. For reliable control, try the run method, which will wait until the plugin finishes execution.</p>
<pre>
(.run ij.IJ "Add Noise")                                                                                                                                                                                              
</pre>

<h3>Creating and using Clojure scripts as ImageJ plugins</h3>
<p>Simply create a text file with the script inside, and place it in the plugins menu or any subfolder. Then call Plugins - Scripting - Refresh Clojure Scripts to make it appear on the menus.</p>

<p>If the macros/StartupMacros.txt includes a call to the Refresh Clojure Scripts inside the AutoRun macro, then all your Clojure scripts will appear automatically on startup.</p>

<p>To modify an script which exists already as a menu item, simply edit its file and run it by selecting it from the menus. No compiling necessary, and no need to call Refresh Clojure Scripts either (ther latter only for new scripts or at start up.)</p>

<p><b>Very important:</b> all scripts and commands from the interpreter will run within the same thread, and within the same clojure context.</p>

<h3>Using java beans for quick and convenient access to an object's fields</h3>
<p>Essentially it's all about using <i>get</i> methods in a trivial way. For example:</p>
<pre>
(let [imp (. ij.WindowManager (getCurrentImage))
      b (bean imp)]
   (println (:title b)
            (:width b)  
            (:height b)))
</pre>                                                                                                                                                                                                                
<p>Eventually Clojure may add support for <i>set</i> methods as well.</p>


<h1>Examples</h1>

<h3>Fixing overexposed images: setting a pixel value to a desirable one for all overexposed pixels</h3>

The problem: [http://ami.scripps.edu/software/leginon/ Leginon] or the Gatan TEM camera acquired an overexposed image, and set all pixels beyond range to zero.

The solution: iterate all pixels; if the pixel is zero then set it to a desirable value, such as the maximum value of the main curve in the histogram (push 'auto' on the Brightness and Contrast dialog to see it.)

In the example below, the <i>fix</i> function is called with the current image and the value 32500 as a floating point number. Notice also the type definition (which is optional) of the float pixel array, to enhance execution speed:

 ; Assumes a FloatProcessor image
 (defn fix [imp max]
 (let [#^floats pix (.getPixels (.getProcessor imp))]
   (loop [i (int 0)]
     (if (< i (alength pix))
       (do
         (if (= 0 (aget pix i)) (aset pix i (float max)))
         (recur (inc i)))))))
 
 (let [imp (.getImage IJ)]
   (fix imp (float 32500))
   (.updateAndDraw imp))

<h1>Appendix</h1>

* The default output stream is at variable <i>*out*</i>. The Clojure Interpreter binds it to the PrintWriter that prints to the interpreter text area, by executing any typed in code within the following binding:
<pre>
(binding [*out* (. getStdOut Clojure.Clojure_Interpreter)]
   ; any typed input here
   )
</pre>                                                                                                                                                                                                                

* To list all existing namespaces:
<pre>
>>> (all-ns)
(#<Namespace: xml> #<Namespace: zip> #<Namespace: clojure> #<Namespace: set> #<Namespace: user>)
</pre>                                                                                                                                                                                            

* To list all functions and variables of a specific namespace, first get the namespace object by name:
<pre>
(ns-map (find-ns 'xml))
</pre>
Note above the quoted string "xml" to avoid evaluating it to a (non-existing) value.

* To list all functions and variables of all namespaces:
<pre>
(map ns-map (all-ns))
</pre>

* To get the arguments passed to the JVM, see contents of variable *command-line-args*

* To list all methods of an object:

<pre>
(defn print-java-methods [obj]
  (doseq method (seq (.getMethods (if (= (class obj) java.lang.Class)
                                    (identity obj)
                                    (class obj))))
    (println method)))
 
 ; Inspect an object named imp, perhaps an image
 (print-java-methods imp)

 public synchronized boolean ij.ImagePlus.lock()
 public void ij.ImagePlus.setProperty(java.lang.String,java.lang.Object)
 public java.lang.Object ij.ImagePlus.getProperty(java.lang.String)
 ...
</pre>

To list constructors, just use <i>.getConstructors</i> instead of <i>.getMethods</i>.

(Thanks to Craig McDaniel for posting the above function to Clojure's mailing list.)

[[Category:Scripting]]

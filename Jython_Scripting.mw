== The Jython interpreter plugin ==

The interpreter provides a screen and a prompt. Type any jython code on the prompt to interact with ImageJ.

Launch it from plugins - Scripting - Jython Interpreter. See [[Scripting Help]] for all keybindings, and also [[Scripting comparisons]].

Within the interpreter, all ImageJ, java.lang.* and TrakEM2 classes are automatically imported. So creating new images and manipulating them is very straighforward.


=== Language basics ===

* Any text after a # is commented out.
* There are no line terminators (such as ';' in other languages), neither curly braces to define code blocks.
* Indentation defines code blocks.
* Functions are defined with <i>def</i>, and classes with <i>class</i>.
* Functions are objects, and thus storable in variables.
* Jython (and python in general) accepts a mixture of procedural and object-oriented code.
* Jython currently implements the Python language at its 2.5 version. All [http://www.python.org/doc/2.5.2/ documentation for python 2.5] applies to Jython bundled with Fiji (with the remarks listed later).


=== Workflow for creating Jython scripts === 

The recommended setup is the following:

* Edit a file in your favorite text editor, and save it with a an underscore in the name and a .py extension anywhere under ImageJ plugins folder.
* Run Plugins - Scripting - Refresh Jython scripts <b>only</b> the very first time after newly creating the file under any folder or subfolder of ImageJ's plugins folder. A menu item will appear with its name, from which it can be run.
* Keep editing (and saving) the file from your editor. Just select the menu item to execute it over and over. Or use the "Find..." command window to launch it easily (keybinding 'l').

The next time Fiji is run, automatic commands in macros/StartupMacros.txt will setup all your scripts in the Plugins menu.


=== Some limitations of jython === 

Though jython tries to be as close as possible as python, there are some differences you may experience during scripting.

* <u>Float "special numbers" such as ''NaN'' and ''Inf'' are not handled.</u>
For instance, 
<source lang="python"> a = float('nan') </source>
will create the correct float number in python, but will throw an exception in jython.

Instead, to create a NaN in jython, use:
<source lang="python">
>>> a = Double.NaN
>>> print a
NaN 
</source>
To test if a number is NaN:
<source lang="python">
>>> if Double.isNaN(a):
        print "a is NaN!"
a is NaN! 
</source>

* <u>Some existing python modules can't be imported in jython.</u>
This is for instance the case of the module ''numpy'', which would have been really convenient for analysing data and results.

But see these java numerical libraries: http://math.nist.gov/javanumerics/#libraries , of which:

*JaMa (Java Matrix Package)
*Java3D (particularly its [http://java.sun.com/products/java-media/3D/forDevelopers/j3dapi/javax/vecmath/package-summary.html vecmath] package provides general matrix and vector classes ([http://java.sun.com/products/java-media/3D/forDevelopers/j3dapi/javax/vecmath/GMatrix.html GMatrix], [http://java.sun.com/products/java-media/3D/forDevelopers/j3dapi/javax/vecmath/GVector.html GVector]).

... are already included in Fiji.

== Jython tutorials for ImageJ ==

=== Defining variables: obtaining the current image ===

<source lang="python">
imp = IJ.getImage()
</source>

Which is the same as:
<source lang="python">
imp = WindowManager.getCurrentImage()
</source>

Since calling the above is long and tedious, one can declare a variable that points to the above static methods:

<source lang="python">
c = WindowManager.getCurrentImage
</source>

Above note the lack of parentheses.

To execute the function, just use parentheses on it:

<source lang="python">
 imp = c()
</source>

The above gets the value of <i>c</i>, which is the method named getCurrentImage in class WindowManager, and executes it, storing its returned object in <i>imp</i>.


=== Manipulating pixels ===

==== Creating a grayscale ramp image ====
First create an image and obtain its pixels:

<source lang="python">
imp = ImagePlus("my new image", FloatProcessor(512, 512))
pix = imp.getProcessor().getPixels()
</source>

The length of an array:

<source lang="python">
n_pixels = len(pix)
</source>

Then loop to modify them:
 
<source lang="python">
# catch width
w = imp.getWidth()
 
# create a ramp gradient from left to right
for i in range(len(pix)):
   pix[i] = i % w
 
# adjust min and max, since we know them
imp.getProcessor().setMinAndMax(0, w-1)
</source>

... and show the new image:

<source lang="python">
imp.show()
</source>


==== Creating a random 8-bit image ====

First import necessary packages: Random, from standard java util library, and [http://www.jython.org/docs/jarray.html jarray], the Jython module for native java arrays:

<source lang="python">
from java.awt import Random
from jarray import zeros
</source>

Then create the array and fill it with random bytes:

<source lang="python">
width = 512
height = 512
 
pix = zeros(width * height, 'b')
Random().nextBytes(pix)
</source>

(See the [http://www.jython.org/archive/21/docs/jarray.html jarray documentation] where the 'b'-byte, 'd'-double, etc. are explained.)

Now make a new IndexColorModel (that's what ImageJ's ij.process.LUT class is) for 8-bit images:

<source lang="python">
channel = zeros(256, 'b')
for i in range(256):
    channel[i] = (i -128) 
cm = LUT(channel, channel, channel)
</source>

... and compose a ByteProcessor from the pixels, and assign it to an ImagePlus:

<source lang="python">
imp = ImagePlus("Random", ByteProcessor(width, height, pix, cm)
imp.show()
</source>

==== Creating a random image, the easy way ====

All the above can be summarized like the following:

<source lang="python">
from java.util import Random
imp = IJ.createImage("A Random Image", "8-bit", 512, 512, 1)
Random().nextBytes(imp.getProcessor().getPixels())
imp.show()
</source>

=== Running a watershed plugin on an image ===

<source lang="python">
# 1 - Obtain an image
imp = IJ.openImage("http://rsb.info.nih.gov/ij/images/blobs.gif")
ip = imp.getProcessor()

# 2 - Apply a threshold: only zeros and ones
# Set the desired threshold range: keep from 0 to 74
ip.setThreshold(147, 147, ImageProcessor.NO_LUT_UPDATE)
# Call the Thresholder to convert the image to a mask
IJ.run(imp, "Convert to Mask", "")

# 3 - Apply watershed
# Create and run new EDM object, which is an Euclidean Distance Map (EDM)
# and run the watershed on the ImageProcessor:
EDM().toWatershed(ip)

# 4 - Show the watersheded image:
imp.show()
</source>

The EDM plugin that contains the watershed could have been indirectly applied to the currently active image, which is <i>not</i> recommended:

<source lang="python">
IJ.run("Watershed")
</source>

If you had called <i>show()</i> on the image at any early stage, just update the screen with:

<source lang="python">
imp.updateAndDraw()
</source>


=== Creating an image from a text file ===

A data file containing rows with 4 columns:

 ...
 399 23 30 10.12
 400 23 30 12.34
 ...

... where the columns are X, Y, Z and value, for every pixel in the image.
We assume we know the width and height of the image.
From this sort of data, we create an image, read out all lines and parse the numbers:

<source lang="python">
width = 512
height = 512
stack = ImageStack(width, height)

file = open("/home/albert/Desktop/data.txt", "r")

try:
  fp = FloatProcessor(width, height)
  pix = fp.getPixels()
  cz = 0
  # Add as the first slice:
  stack.addSlice(str(cz), fp)
  # Iterate over all lines in the text file:
  for line in file.readlines():
    x, y, z, value = line.split(" ")
    x = int(x)
    y = int(y)
    z = int(z)
    value = float(value)
    # Advance one slice if the Z changed:
    if z != cz:
      # Next slice
      fp = FloatProcessor(width, height)
      pix = fp.getPixels()
      stack.addSlice(str(cz), fp)
      cz += 1
    # Assign the value:
    pix[y * width + x] = value
  # Prepare and show a new image:  
  imp = ImagePlus("parsed", stack)
  imp.show()
# Ensure closing the file handle even if an error is thrown:
finally:
  file.close()
</source>


=== Obtain/View histogram and measurements from an image ===

The easiest way is to grab an image and call an ImageJ command to show its histogram:

<source lang="python">
imp = IJ.openImage("http://rsb.info.nih.gov/ij/images/blobs.gif")
IJ.run(imp, "Histogram", "")
</source>

How ImageJ does it, internally, has to do with the [http://rsb.info.nih.gov/ij/developer/api/ij/process/ImageStatistics.html ImageStatisics] class:

<source lang="python">
stats = imp.getStatistics()
print stats.histogram
</source>

 array('i',[0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 304,
            0, 0, 0, 0, 0, 0, 0, 1209, 0, 0, 0, 0, 0, 0, 0, 3511, 0,
            0, 0, 0, 0, 0, 0, 7731, 0, 0, 0, 0, 0, 0, 0, 10396, 0, 0,
            0, 0, 0, 0, 0, 7456, 0, 0, 0, 0, 0, 0, 0, 3829, 0, 0, 0,
            0, 0, 0, 0, 1992, 0, 0, 0, 0, 0, 0, 0, 1394, 0, 0, 0, 0,
            0, 0, 0, 1158, 0, 0, 0, 0, 0, 0, 0, 1022, 0, 0, 0, 0, 0,
            0, 0, 984, 0, 0, 0, 0, 0, 0, 0, 902, 0, 0, 0, 0, 0, 0,
            0, 840, 0, 0, 0, 0, 0, 0, 0, 830, 0, 0, 0, 0, 0, 0, 0,
            926, 0, 0, 0, 0, 0, 0, 0, 835, 0, 0, 0, 0, 0, 0, 0, 901,
            0, 0, 0, 0, 0, 0, 0, 1025, 0, 0, 0, 0, 0, 0, 0, 1180, 0,
            0, 0, 0, 0, 0, 0, 1209, 0, 0, 0, 0, 0, 0, 0, 1614, 0, 0,
            0, 0, 0, 0, 0, 1609, 0, 0, 0, 0, 0, 0, 0, 2220, 0, 0, 0,
            0, 0, 0, 0, 2037, 0, 0, 0, 0, 0, 0, 0, 2373, 0, 0, 0, 0,
            0, 0, 0, 1568, 0, 0, 0, 0, 0, 0, 0, 1778, 0, 0, 0, 0, 0,
            0, 0, 774, 0, 0, 0, 0, 0, 0, 0, 1364, 0, 0, 0, 0, 0, 0, 0])


The histogram, area and mean are computed by default. Other values like the median need to be specified.

To calculate other parameters, specify them by bitwise-or composition (see flags in [http://rsb.info.nih.gov/ij/developer/api/ij/measure/Measurements.html Measurements]):

<source lang="python">
stats = imp.getStatistics(Measurements.MEAN | Measurements.MEDIAN | Measurements.AREA)
print "mean:", stats.mean, "median:", stats.median, "area:", stats.area
</source>

 mean: 103.26857775590551 median: 64.0 area: 65024.


If we set a ROI to the image, then we are measuring only for the inside of the ROI. Here we set an oval ROI of radius 50 pixels, centered:
<source lang="python">
radius = 50
roi = OvalRoi(imp.width/2 - radius/2, imp.height/2 -radius/2, radius, radius)
imp.setRoi(roi)
stats = imp.getStatistics(Measurements.MEAN | Measurements.MEDIAN | Measurements.AREA)
print "mean:", stats.mean, "median:", stats.median, "area:", stats.area
</source>

 mean: 104.96356275303644 median: 64.0 area: 1976.0



To display the histogram window ourselves, we may use the [http://rsb.info.nih.gov/ij/developer/api/ij/gui/HistogramWindow.html HistogramWindow] class:

<source lang="python">
hwin = HistogramWindow(imp)
</source>

... of which we may grab the image (the plot itself) and save it:

<source lang="python">
plotimage = hwin.getImagePlus()
IJ.save(plotimage, "/path/to/our/folder/plot.tif")
</source>


=== Removing bleeding from one channel to another ===

The technique to use is to divide one channel by the other: the channel to denoise divided by the channel that bled through.

The relatively high-level way to do it is to split the channels and call the ImageCalculator with a "Divide" argument:

<source lang="python">
# 1 - Obtain an RGB image stack
imp = WindowManager.getCurrentImage()
if imp.getType() != ImagePlus.COLOR_RGB:
  IJ.showMessage("The active image is not RGB!")
  raise RuntimeException("The active image is not RGB!")

if 1 == imp.getNSlices():
  IJ.showMessage("Not a stack!")
  raise RuntimeException("Not a stack!")

# 2 - Split channels
red_stack = ImageStack(imp.width, imp.height)
green_stack = ImageStack(imp.width, imp.height)

# 3 - Iterate all slices -- notice slices are 1<=i<=size
for i in range(1, imp.getNSlices()+1):
  slice = stack.getProcessor(i)
  red_stack.addSlice(str(i), slice.toFloat(0, None))
  green_stack.addSlice(str(i), slice.toFloat(1, None))

# 4 - Apply "divide" via ImageCalculator to the red_stack, which is a new 32-bit stack
# Don't use the parameters "create" or "float" or "32" in the parameters string
# of the calc.calculate call--then the result of the operation would be
# in a new stack that opens beyond our control. Without them, results are
# applied to the red_stack
calc = ImageCalculator()
calc.calculate("Divide stack", ImagePlus("red", red_stack), ImagePlus("green", green_stack))

# 5 - Compose a new color stack
new_stack = ImageStack(imp.width, imp.height)
for i in range(1, imp.getNSlices()+1):
  cp = stack.getProcessor(i).duplicate()
  cp.setPixels(0, red_stack.getProcessor(i))
  new_stack.addSlice(stack.getSliceLabel(i), cp)

# 6 - Show the new image
ImagePlus("Normalized " + imp.title, new_stack).show()
</source>


Alternatively and as an example of direct pixel manipulation, we'll iterate all slices of the image stack, divide the red channel by the green channel, and compose a new stack:

<source lang="python">
# 1 - Obtain an RGB image stack
imp = WindowManager.getCurrentImage()
if imp.getType() != ImagePlus.COLOR_RGB:
  IJ.showMessage("The active image is not RGB!")
  raise RuntimeException("The active image is not RGB!")

if 1 == imp.getNSlices():
  IJ.showMessage("Not a stack!")
  raise RuntimeException("Not a stack!")

stack = imp.getStack()

# 2 - Create a new stack to store the result
new_stack = ImageStack(imp.width, imp.height)

# 3 - Iterate all slices -- notice slices are 1<=i<=size
for i in range(1, imp.getNSlices()+1):
  # Get the slice i
  slice = stack.getProcessor(i)
  # Get two new FloatProcessor with the green and red channel data in them
  red = slice.toFloat(0, None)
  green = slice.toFloat(1, None)
  pix_red = red.getPixels()
  pix_green = green.getPixels()
  # Create a new FloatProcessor for the normalized result
  new_red = FloatProcessor(imp.width, imp.height)
  pix_new_red = new_red.getPixels()
  # Iterate and set all normalized pixels
  for k in range(len(pix_red)):
    if 0 != pix_green[k]:
      pix_new_red[k] = pix_red[k] / pix_green[k]
  # Create a ColorProcessor that has the normalized red and the same green and blue channels
  cp = slice.duplicate()
  cp.setPixels(0, new_red)   # at channel 0, the red
  # Store the normalized slice in the new stack, copying the same slice label
  new_stack.addSlice(stack.getSliceLabel(i), cp)

# 4 - Show the normalized stack
new_imp = ImagePlus("Normalized " + imp.title, new_stack)
new_imp.show()
</source>

Notice that this second approach is much slower: accessing every pixel from jython has a high cost. If you would like to do very fast pixel-level manipulations, use java or [[Clojure Scripting|Clojure]].


[[Category:Scripting]]

<h1>Jython tutorial for ImageJ</h1>

<h3>Language basics</h3>
<p>Any text after a # is commented out.</p>
<p>There are no line terminators (such as ';' in other languages), neither curly braces to define code blocks.</p> 
<p>Indentation defines code blocks.</p>
<p>Functions are defined with <i>def</i>, and classes with <i>class</i>.
<p>Functions are objects, and thus storable in variables.</p>
<p>Jython (and python in general) accepts a mixture of procedural and object-oriented code.</p>


<h3>Defining variables: obtaining the current image</h3>

 imp = IJ.getImage()

Which is the same as:

 imp = WindowManager.getCurrentImage()

Since calling the above is long and tedious, one can declare a variable that points to the above static methods:

 c = WindowManager.getCurrentImage

Above note the lack of parentheses.

To execute the function, just use parentheses on it:

 imp = c()

The above gets the value of <i>c</i>, which is the method named getCurrentImage in class WindowManager, and executes it, storing its returned object in <i>imp</i>.

<h3>Manipulating pixels</h3>

<h4>Creating a grayscale ramp image</h4>
First create an image and obtain its pixels:

 imp = ImagePlus("my new image", FloatProcessor(512, 512))
 pix = imp.getProcessor().getPixels()
 
The length of an array:

 n_pixels = len(pix)

Then loop to modify them:
 
 # catch width
 w = imp.getWidth()
 
 # create a ramp gradient from left to right
 for i in range(len(pix)):
   pix[i] = i % w
 
 # adjust min and max, since we know them
 imp.getProcessor().setMinAndMax(0, w-1)

... and show the new image:

 imp.show()


<h4>Creating a random 8-bit image</h4>

<h3>The Jython interpreter plugin</h3>

Launch it from plugins - Scripting - Jython Interpreter. 

<h3>Creating jython scripts</h3>

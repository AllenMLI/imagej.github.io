== The Jython interpreter plugin ==

The interpreter provides a screen and a prompt. Type any jython code on the prompt to interact with ImageJ.

Launch it from plugins - Scripting - Jython Interpreter. See [[Scripting Help]] for all keybindings, and also [[Scripting comparisons]].

Within the interpreter, all ImageJ, java.lang.* and TrakEM2 classes are automatically imported. So creating new images and manipulating them is very straighforward.


=== Language basics ===

* Any text after a # is commented out.
* There are no line terminators (such as ';' in other languages), neither curly braces to define code blocks.
* Indentation defines code blocks.
* Functions are defined with <i>def</i>, and classes with <i>class</i>.
* Functions are objects, and thus storable in variables.
* Jython (and python in general) accepts a mixture of procedural and object-oriented code.
* Jython currently implements the Python language at its 2.5 version. All [http://www.python.org/doc/2.5.2/ documentation for python 2.5] applies to Jython bundled with Fiji (with the remarks listed later).


=== Workflow for creating Jython scripts === 

The recommended setup is the following:

* Edit a file in your favorite text editor, and save it with a an underscore in the name and a .py extension anywhere under ImageJ plugins folder.
* Run Plugins - Scripting - Refresh Jython scripts <b>only</b> the very first time after newly creating the file under any folder or subfolder of ImageJ's plugins folder. A menu item will appear with its name, from which it can be run.
* Keep editing (and saving) the file from your editor. Just select the menu item to execute it over and over. Or use the "Find..." command window to launch it easily (keybinding 'l').

The next time Fiji is run, automatic commands in macros/StartupMacros.txt will setup all your scripts in the Plugins menu.


=== Some limitations of jython === 

Though jython tries to be as close as possible as python, there are some differences you may experience during scripting.

* <u>Float "special numbers" such as ''NaN'' and ''Inf'' are not handled.</u>
For instance, 
<source lang="python"> a = float('nan') </source>
will create the correct float number in python, but will throw an exception in jython.

Instead, to create a NaN in jython, use:
<source lang="python">
>>> a = Double.NaN
>>> print a
NaN 
</source>
To test if a number is NaN:
<source lang="python">
>>> if Double.isNaN(a):
        print "a is NaN!"
a is NaN! 
</source>

* <u>Some existing python modules can't be imported in jython.</u>
This is for instance the case of the module ''numpy'', which would have been really convenient for analysing data and results.

But see these java numerical libraries: http://math.nist.gov/javanumerics/#libraries , of which:

*JaMa (Java Matrix Package)
*Java3D (particularly its [http://java.sun.com/products/java-media/3D/forDevelopers/j3dapi/javax/vecmath/package-summary.html vecmath] package provides general matrix and vector classes ([http://java.sun.com/products/java-media/3D/forDevelopers/j3dapi/javax/vecmath/GMatrix.html GMatrix], [http://java.sun.com/products/java-media/3D/forDevelopers/j3dapi/javax/vecmath/GVector.html GVector]).

... are already included in Fiji.

== Jython tutorials for ImageJ ==

=== Defining variables: obtaining the current image ===

<source lang="python">
imp = IJ.getImage()
</source>

Which is the same as:
<source lang="python">
imp = WindowManager.getCurrentImage()
</source>

Since calling the above is long and tedious, one can declare a variable that points to the above static methods:

<source lang="python">
c = WindowManager.getCurrentImage
</source>

Above note the lack of parentheses.

To execute the function, just use parentheses on it:

<source lang="python">
 imp = c()
</source>

The above gets the value of <i>c</i>, which is the method named getCurrentImage in class WindowManager, and executes it, storing its returned object in <i>imp</i>.


=== Manipulating pixels ===

==== Creating a grayscale ramp image ====
First create an image and obtain its pixels:

<source lang="python">
imp = ImagePlus("my new image", FloatProcessor(512, 512))
pix = imp.getProcessor().getPixels()
</source>

The length of an array:

<source lang="python">
n_pixels = len(pix)
</source>

Then loop to modify them:
 
<source lang="python">
# catch width
w = imp.getWidth()
 
# create a ramp gradient from left to right
for i in range(len(pix)):
   pix[i] = i % w
 
# adjust min and max, since we know them
imp.getProcessor().setMinAndMax(0, w-1)
</source>

... and show the new image:

<source lang="python">
imp.show()
</source>


==== Creating a random 8-bit image ====

First import necessary packages: Random, from standard java util library, and [http://www.jython.org/docs/jarray.html jarray], the Jython module for native java arrays:

<source lang="python">
from java.awt import Random
from jarray import zeros
</source>

Then create the array and fill it with random bytes:

<source lang="python">
width = 512
height = 512
 
pix = zeros(width * height, 'b')
Random().nextBytes(pix)
</source>

(See the [http://www.jython.org/archive/21/docs/jarray.html jarray documentation] where the 'b'-byte, 'd'-double, etc. are explained.)

Now make a new IndexColorModel (that's what ImageJ's ij.process.LUT class is) for 8-bit images:

<source lang="python">
channel = zeros(256, 'b')
for i in range(256):
    channel[i] = (i -128) 
cm = LUT(channel, channel, channel)
</source>

... and compose a ByteProcessor from the pixels, and assign it to an ImagePlus:

<source lang="python">
imp = ImagePlus("Random", ByteProcessor(width, height, pix, cm)
imp.show()
</source>

==== Creating a random image, the easy way ====

All the above can be summarized like the following:

<source lang="python">
from java.util import Random
imp = IJ.createImage("A Random Image", "8-bit", 512, 512, 1)
Random().nextBytes(imp.getProcessor().getPixels())
imp.show()
</source>

=== Running a watershed plugin on an image ===

<source lang="python">
# Obtain an image
imp = IJ.openImage("http://rsb.info.nih.gov/ij/images/AuPbSn40.jpg")
ip = imp.getProcessor()
  
# apply a threshold: only zeros and ones
ip.setThreshold(0, 74)
Thresholder().run("mask")
ip.invert()
 
# apply watershed
edm = EDM()
edm.setup("watershed", imp)
edm.run(ip)
  
imp.show()
</source>

The EDM plugin that contains the watershed could have been indirectly applied to the currently active image, which is <i>not</i> recommended:

<source lang="python">
IJ.run("Watershed")
</source>

If you had called <i>show()</i> on the image at any early stage, just update the screen with:

<source lang="python">
imp.updateAndDraw()
</source>

[[Category:Scripting]]

[http://jruby.codehaus.org/ JRuby] is a marvellous project created a complete implementation of Ruby that runs in the JVM.  The excellent work of the authors of JRuby has made it very simple for us to add JRuby scripting into ImageJ.

JRuby scripting in ImageJ is a nice alternative to scripting using ImageJ's macro language.  It has the following advantages:

* You don't have to learn a new language to script ImageJ (assuming you know Ruby)
* You're not limited to using the functionality exposed by the macro language: you can use any class in ImageJ, one of its plugins or standard Java
* Developing JRuby scripts is very fast compared to developing plugins in Java

(These advantages, of course, are shared by the [[Jython Scripting]], [[Clojure Scripting]], Beanscript and [[Javascript Scripting]] bundled in Fiji.)

== Tutorial ==

Let's start writing some JRuby right away - start up the interpreter by going to "Plugins > Scripting > JRuby Interpreter".  The interpreter window will pop up, but it may take a little time for the JRuby runtime to be ready.  You should initially see the message:

  Starting JRuby ...

... and when it's ready, the line:

  Done.

Now you can start typing Ruby expressions into that window, such as:

  >>> "hello there".upcase[1..4]
  ELLO

It would be a good idea to take a quick look at the page on [[Scripting Help]] for tips on using this interpreter window.l

Try loading one of the ImageJ sample images by going to "File > Open Samples > T1 Head (2.4M, 16-bits)".  Once you've done that we'll examine the image using JRuby.  You can get a reference to the current image with ij.IJ.getImage.  Try assigning the result to a variable, like this:

  >>> i = ij.IJ.getImage
  imp[t1-head.tif 256x256x129]

Now we can find out the width and the depth of the stack like this:

  >>> w = i.getWidth
  256
  >>> d = i.getStackSize
  129

Many of the operations that you might want to perform on the image are available via the ImageProcessor associate with a slice.  For example, to invert the current slice do:

  i.getProcessor.invert

That won't actually produce a visible effect on the image until you also call i.updateAndDraw on the image:

  i.updateAndDraw

If you scroll through the stack now you should find that one of the slices is inverted.

=== Note On Names ===



== Example: Generating a Plasma Cloud ==


== Example: Batch Converting File Formats ==



== Example: Generating Red/Cyan Anaglyphs ==



=== Converting ImageJ Macros to JRuby ===

''FIXME: complete this section''


[You may want to first have a quick look at the [[Scripting Help]] page for generic instructions in using the interpreter and script interfaces, and the [[Scripting comparisons]] page for an example written in several of the different scripting languages available.]

= Why Macros? =

Macros can be used to

* automate repetitive tasks
* document what you did
* share common procedures
* add tools to the toolbar
* add keyboard shortcuts

= Variables =

The most important concept when starting to program macros are ''variables''. A variable is a placeholder for a changing entity. It has a ''name'' and a ''value'', which can be ''numeric'' or ''text'' (so-called ''strings'').

Variables are needed whenever you want to execute the same code several times, but for different images, parameters, etc

Variables can also be used to store user input obtained through a dialog.

A variable can be assigned like this:

 factor = 1024;

In this example, ''factor'' is the name of the variable, ''1024'' is the value assigned to the variable. The semicolon tells ImageJ that the assignment is done.

Example: assign text to a variable:

 message = "Hello, World!";

In this case, the variable is named ''message'', and the text ''Hello, World!'' is assigned to it; Text is specified inside double quotes.

== Using variables ==

You can use variables in ''expressions'': you can calculate with numeric variables, and you can concatenate text and text variables. Example:

 x = 2;
 y = 3;
 result = x * x + y + y;

This assigns the variable ''x'' the value 2, the variable ''y'' the value 3, and then assigns the variable ''result'' the square of ''x'' plus the square of ''y''.

This example shows how to concatenate a fixed text with the value of a variable:

 name = "Bob";
 msg = "Those days are over, " + name;

= Functions =

Most of the time, you will call ''functions'' which implement the actions you want to execute. Functions have names, like variables, but they also have ''parameters'' that you can pass to the functions. ImageJ comes with many [http://rsbweb.nih.gov/ij/developer/macro/functions.html predefined functions] that you can call to perform specific calculations or other operations.

This example writes ''Hello, World!'' to the ''Log'' window:

 write("Hello, World!");

As before, a semicolon signifies the end of the statement. The name of the function is ''write'', and the parameter list is enclosed in parentheses. In the case of ''write'', there is only one parameter. If there are more parameters to be passed, they have to be separated by commas:

 newImage("My pretty new image", "8-bit black", 640, 480, 1);

Like ''write'', ''newImage'' is a builtin function of ImageJ. The order of the parameters is relevant, this is the way the function knows what each parameter means.

== Defining functions ==

For recurring tasks, you can define your own functions:

 function closeImageByTitle(title) {
         selectWindow(title);
         close();
 }

Note that the ''title'' is just another [[#Variables|variable]], which is implicitly assigned when the function is called. In other words, this call will execute the code in above definition, with the variable ''title'' set to ''My pretty new image'':

 closeImageByTitle("My pretty new image");

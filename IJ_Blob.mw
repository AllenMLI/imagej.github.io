{{Infobox
| software               = ImageJ/Fiji
| name                   = IJBlob
| author                 = Thorsten Wagner
| maintainer             = Thorsten Wagner (wagner@biomedical-imaging.de)
| filename               = ij-blob.jar [https://github.com/thorstenwagner/ij-blob/releases/latest [1]]
| source                 = Github [https://github.com/thorstenwagner/ij-blob [2]]
| latest version         = v1.4.0 (16 July 2015)
| status                 = active 

}}
== Purpose ==
The IJBlob library indentifying connected components in binary images. The algorithm used for connected component labeling is:

''Chang, F. (2004). A linear-time component-labeling algorithm using contour tracing technique. Computer Vision and Image Understanding, 93(2), 206–220. doi:10.1016/j.cviu.2003.09.002''

A connected component is a set of pixels which are connected by its 8-neigherhood and is often called a "blob". An Example:

[[File:Ijblob 1.jpg]]

The image above contains 8 marked blobs. Also the holes (and the contours of the holes) of the two Bs and the O are identified. It is also possible to get a color labeled image:

[[File:Ijbloblabeled.jpg]]

In addition ijblob identifies nested objects:

[[File:Ijblob nested.jpg]]

If you are using IJBlob in a scientific publication, please cite:


''Wagner, T and Lipinski, H 2013. IJBlob: An ImageJ Library for Connected Component Analysis and Shape Analysis. Journal of Open Research Software 1(1):e6, DOI: http://dx.doi.org/10.5334/jors.ae''

==Features of IJBlob==

IJBlob 1.1 introduces a filter and extension framework! Please see the wiki page for more information

* Extract the outer contour of each blob.
* Extracts also all inner contours of each blob (holes).
* Detects nested objects (blob in blob).
* Calculates basic features of the blob for shape characterization.

=Examples=
==Example 1: Extract the Blobs of an Image and Read the Perimeter of a Blob==
<code>
    import ij.blob.*;
    ...
    private ManyBlobs allBlobs;
    ...
    public void someMethod(ImagePlus imp) {
        ManyBlobs allBlobs = new ManyBlobs(imp); // Extended ArrayList
        allBlobs.findConnectedComponents(); // Start the Connected Component Algorithm
        allBlobs.get(0).getPerimeter(); // Read the perimeter of a Blob
    }
</code>

==Example 2: Example 2: Filter blobs by blob features==
In IJBlob 1.1 a filter framework was introduced. Each build-in blob feature has a static identifier (in this example "GETENCLOSEDAREA") which contains the method name.

<code>
    import ij.blob.*;
    ...
    private ManyBlobs allBlobs;
    ...
    public void someMethod(ImagePlus imp) {
        /* Extended ArrayList */
        ManyBlobs allBlobs = new ManyBlobs(imp); 
  
        /* Start the Connected Component Algorithm */
        allBlobs.findConnectedComponents(); 

        /* Return all blobs with an area between 20 and 100 pixel² */
        ManyBlobs filteredBlobs = allBlobs.filterBlobs(20,100,        
        Blob.GETENCLOSEDAREA); 
    }
</code>

==Example 3: ==
IJBlob 1.1 is easily expandable by your own features. First you have to derive a feature class from the "CustomBlobFeature" class. The feature class can also contain multiple features. With the "getBlob()" method you get the reference to the Blob and have full access to the contour data and the other features.
'''Please note: If your feature method have primitive data types (int/float/double) as parameters you have to use the wrapper classes (Integer/Float/Double).'''

<code>
    import ij.blob.*;

    public class ExampleBlobFeature extends CustomBlobFeature {

	public double myFancyFeature(Integer a, Float b){
		double feature = b*getBlob().getEnclosedArea()*a;
		return feature;
	}
	
	public int mySecondFancyFeature(Integer a, Double b){
		int feature = (int)(b*getBlob().getAreaToPerimeterRatio() *a);
		return feature;
	}
	
	
    }
</code>

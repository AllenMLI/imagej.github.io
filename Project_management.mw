{{Development}}{{TOC}}
The [[ImageJ]] and related [[SciJava]] projects take advantage of several project management tools.

== Git ==

ImageJ uses the [[Git]] revision control system to manage its [[source code]].

See the [[Git]] pages for more information, tutorials, etc.

== Maven ==

ImageJ uses [[Maven]] for its project infrastructure.

SciJava projects use the [http://maven.imagej.net/ ImageJ Maven repository] (using [http://www.sonatype.com/nexus Sonatype Nexus]) for managing SciJava libraries. Such a repository serves two main purposes:

=== Deployment ===

The main purpose of the ImageJ Maven repository is to serve the artifacts that are not yet ready to be deployed to OSS Sonatype. Typically, these components are [[Versioning|versioned at 0.x]]—i.e., still in incubation. Once components reach 1.0.0, we try to [http://maven.apache.org/guides/mini/guide-central-repository-upload.html release them to the central Maven repository via OSS Sonatype].

This purpose is also crucial for agile development across multiple components. For more details, see [http://blog.sonatype.com/2008/11/nine-reasons-to-use-a-repository-manager-sonatype-nexus/ Nine Reasons to Use a Repository Manager] and [http://books.sonatype.com/nexus-book/reference/repoman.html Repository Management with Nexus].

=== Proxying ===

The ImageJ Maven repository's secondary purpose is to serve as a fast, local mirror of Maven Central as well as several useful third-party repositories.

It acts as a unified, on-demand mirror for these public Maven repositories, reducing load on the remote servers and potentially reducing local build times.

Developers can benefit from the mirror by adding the following section to their <code>$HOME/.m2/settings.xml</code> file:

<source lang="xml">
<settings>
        ...
        <mirrors>
                <mirror>
                        <id>imagej-mirror</id>
                        <name>ImageJ's public mirror repository</name>
                        <url>http://maven.imagej.net/content/groups/public</url>
                        <mirrorOf>*</mirrorOf>
                </mirror>
        </mirrors>
</settings>
</source>

== Continuous integration ==

ImageJ has a [http://jenkins.imagej.net/ Jenkins server], which automatically checks the code for build and test errors. External developers can look at [[Travis]] for an open-source CI tool, with build configurations stored in the source repository itself.

Jenkins tests builds and performs [[releases]] for [[SciJava]] projects. It deploys <code>SNAPSHOT</code> builds to the [http://maven.imagej.net/ ImageJ Maven repository] in response to pushes to each code repository's <code>master</code> branch. So any downstream projects depending on a version of <code>LATEST</code> for a given component will match the last successful Jenkins build—i.e., the latest code on <code>master</code>.

Because every build also runs the associated [[wikipedia:Unit testing|unit tests]], Jenkins is instrumental in early detection of new bugs introduced to the codebase.

You can access Jenkins's last successful build artifacts from the [[Downloads]] page.

Jenkins also performs [[releases]], including [http://jenkins.imagej.net/job/Synchronize-and-deploy-IJ1/ automatically deploying ImageJ 1.x] and [http://jenkins.imagej.net/job/ImageJ1-releases/ building installers for ImageJ 1.x].

Jenkins performs many other services too, such as keeping Git repository mirrors in sync, building javadocs and updating other web resources.

== Issue tracking ==

{{Tip | tip=You can search for existing issues at http://search.imagej.net/ using the GitHub button!}}SciJava software projects manage tasks and priorities using [https://github.com/organizations/imagej/dashboard/issues/repos GitHub Issues]:

{| class="wikitable nicetable"
| '''Logo'''
| '''Project'''
| '''Issues'''
| '''Milestones'''
|-
| [[File:Scijava-icon.png|48px]]
| [[SciJava]]
|
* [https://github.com/issues?q=is%3Aopen+user%3Ascijava open]
* [https://github.com/issues?q=is%3Aclosed+user%3Ascijava closed]
|
* [https://github.com/scijava/scijava-common/milestones scijava-common]
|-
| [[File:Imagej2-icon.png|48px]]
| [[ImageJ]]
|
* [https://github.com/issues?q=is%3Aopen+user%3Aimagej open]
* [https://github.com/issues?q=is%3Aclosed+user%3Aimagej closed]
|
* [https://github.com/imagej/imagej/milestones imagej]
* [https://github.com/imagej/imagej-common/milestones imagej-common]
* [https://github.com/imagej/imagej-legacy/milestones imagej-legacy]
* [https://github.com/imagej/imagej-omero/milestones imagej-omero]
* [https://github.com/imagej/imagej-ops/milestones imagej-ops]
* [https://github.com/imagej/imagej-ui-swing/milestones imagej-ui-swing]
|-
| [[File:Imglib2-icon.png|48px]]
| [[ImgLib2]]
|
* [https://github.com/issues?q=is%3Aopen+user%3Aimglib open]
* [https://github.com/issues?q=is%3Aclosed+user%3Aimglib closed]
|
* [https://github.com/imglib/imglib2/milestones imglib2]
|-
| [[File:Scifio-icon.png|48px]]
| [[SCIFIO]]
|
* [https://github.com/issues?q=is%3Aopen+user%3Ascifio open]
* [https://github.com/issues?q=is%3Aclosed+user%3Ascifio closed]
|
* [https://github.com/scifio/scifio/milestones scifio]
|-
| rowspan=3 style="vertical-align: middle" | [[File:Fiji-icon.png|48px]]
| [[Fiji]]
|
* [https://github.com/issues?q=is%3Aopen+user%3Afiji open]
* [https://github.com/issues?q=is%3Aclosed+user%3Afiji closed]
|
* [https://github.com/fiji/fiji/milestones fiji]
|-
| [[BigDataViewer]]
|
* [https://github.com/issues?q=is%3Aopen+user%3Abigdataviewer open]
* [https://github.com/issues?q=is%3Aclosed+user%3Abigdataviewer closed]
| -
|-
| [[TrakEM2]]
|
* [https://github.com/issues?q=is%3Aopen+user%3Atrakem2 open]
* [https://github.com/issues?q=is%3Aclosed+user%3Atrakem2 closed]
| -
|-
| [[File:Slim-curve-icon.png|48px]]
| [[SLIM Curve]]
|
* [https://github.com/issues?q=is%3Aopen+user%3Aslim-curve open]
* [https://github.com/issues?q=is%3Aclosed+user%3Aslim-curve closed]
|
* [https://github.com/slim-curve/slim-curve/milestones slim-curve]
* [https://github.com/slim-curve/slim-plugin/milestones slim-plugin]
|-
| [[File:loci-logo.png|48px]]
| [[LOCI]]
|
* [https://github.com/issues?q=is%3Aopen+user%3Auw-loci open]
* [https://github.com/issues?q=is%3Aclosed+user%3Auw-loci closed]
|
* [https://github.com/uw-loci/visbio/milestones visbio]
|}

Previously, some projects used [http://trac.imagej.net/ Trac] for issue tracking and roadmapping, but all Trac issues are now being migrated to GitHub. See these links:

* [http://trac.imagej.net/roadmap ImageJ Trac roadmap] - early [[ImageJ2]] milestones
* [http://trac.imagej.net/report/1 ImageJ Features report] - a high-level list of features slated for each release
* [http://trac.imagej.net/timeline ImageJ Trac timeline] - a fine-grained list of changes to ImageJ

=== What are issues for? ===

Issues and milestones are public-facing entities, yet their content can be highly technical to serve as a roadmap and implementation guide for developers. As we see it, the various audiences for issues and milestones, and their needs, are as follows:

{| class="wikitable nicetable"
| '''Who'''
| '''What'''
| '''How?'''
|-
| rowspan=4 | '''Users<br>want...'''
| to know what's already been reported
| Browse and search [https://github.com/issues?q=is%3Aopen+no%3Amilestone+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci all open SciJava software stack issues].
|-
| to keep track of issues of interest
| Subscribe to desired issues using [https://guides.github.com/features/issues/#notifications notifications].
|-
| to know which issues were fixed in a release
| Browse issues at a particular [https://guides.github.com/features/issues/#filtering milestone]<br>(e.g., [https://github.com/issues?q=milestone%3A1.0.0+is%3Aclosed+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci 1.0.0 issues], [https://github.com/issues?q=milestone%3A1.0.0+is%3Aclosed+label%3Abug+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci 1.0.0 bugs], [https://github.com/issues?q=milestone%3A1.0.0+is%3Aclosed+label%3Aenhancement+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci+ 1.0.0 enhancements]).
|-
| to ask questions and report new issues
| Report new issues using the big green "New issue" button,<br>or via ImageJ's [[Report a Bug]] plugin.
|-
| rowspan=3 | '''Developers<br>want...'''
| to track their current tasks
| Browse issues assigned to a particular developer<br>(e.g., [https://github.com/issues?q=is%3Aopen+assignee%3Actrueden+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci ctrueden], [https://github.com/issues?q=is%3Aopen+assignee%3Ahinerm+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci hinerm]).
|-
| to find new tasks to work on
| Browse the [https://github.com/issues?q=is%3Aopen+label%3A%22help+wanted%22+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci "help wanted" label] or [https://github.com/issues?q=is%3Aopen+no%3Aassignee+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci unassigned issues].
|-
| a place to discuss implementation details, etc.
| Use [https://help.github.com/articles/using-pull-requests/ pull requests].
|-
| rowspan=4 | '''Maintainers<br>want...'''
| to easily see what needs attention
| Browse [https://github.com/issues?q=is%3Aopen+no%3Amilestone+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci issues without a milestone].
|-
| to ignore inactive issues without closing them
| Use the [https://github.com/issues?q=is%3Aopen+milestone%3Aunscheduled+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci "unscheduled" milestone].
|-
| to plan development timelines
| Use future [https://guides.github.com/features/issues/#filtering milestones] (e.g., [https://github.com/imagej/imagej/milestones imagej], [https://github.com/scifio/scifio/milestones scifio]).
|-
| to report completed features
| Use completed [https://guides.github.com/features/issues/#filtering milestones] (e.g., [https://github.com/imagej/imagej/milestones?state=closed imagej], [https://github.com/scifio/scifio/milestones?state=closed scifio]).
|}

To meet these needs, we use the following conventions with GitHub issues:

'''Milestones'''
* For short-term active development, use names m1, m2, etc.
** These milestones themselves have no due date and never close, and contain only open issues
** When an issue is closed, it is moved to match its corresponding release milestone.
* Future planned breaking changes should go in [[Versioning|SemVer]]-named milestones.
* All projects should have an "unscheduled" milestone.
** Issues in "unscheduled" are things that core developers and maintainers cannot make time to address.

'''Issues'''
* Use the standard GitHub labels.
* For repositories with multiple components (e.g., [https://github.com/imagej/imagej-ui-swing imagej-ui-swing]) add "component:XXXX" labels, in orange, as needed.
* Every issue must belong to a milestone.
** Use the "unscheduled" milestone for inactive issues.
* If you are currently working on an issue, assign it to yourself.
* All issues in near-term milestones should have an assignee.

Using these conventions gives rise to a workflow where new issues come in with no assignee and no milestone, and the project maintainers either assign them to a developer who will carry out the work, or put the issue in "unscheduled" with no assignee.

As issues are closed, they are sorted into milestones which match each project's release tags, making it easy to browse which issues were addressed as part of each release.

The high-level topics of interest (i.e., [https://github.com/issues?q=is%3Aopen+label%3Abug+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci bugs] and [https://github.com/issues?q=is%3Aopen+label%3Aenhancement+user%3Abigdataviewer+user%3Afiji+user%3Aimagej+user%3Aimglib+user%3Amaven-nar+user%3Ascifio+user%3Ascijava+user%3Aslim-curve+user%3Atrakem2+user%3Auw-loci enhancements]) can easily be filtered by label, while milestones establish the timeline and functional development.

Note that the relationship between milestones and software releases can be one-to-many: e.g., bug-fix releases, or even the addition of new features, may not necessitate their own milestones. Good milestone structure should read similarly to a good [http://chris.beams.io/posts/git-commit/ git] [https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message history]: informative without being overly verbose.

== Patch submissions ==

The preferred mechanism to contribute improvements to [[ImageJ]] and other [[SciJava]] components is using [https://help.github.com/articles/using-pull-requests/ GitHub pull requests]! See the [[Contributing]] page for details.
 
== Roadmap links ==

* [[News]] about ImageJ and Fiji developments, including status updates, observations and comments about ImageJ programming.
* [[Special:RecentChanges|Recent changes]] to this web site (''not'' the ImageJ code itself).
* [http://fiji.sc/bugzilla BugZilla] database of user-reported bugs from the [[Report a Bug]] plugin.

== Citable code ==

Many of these tools are employed to facilitate [[Reproducible builds|reproducibility]] from a technical perspective. From a social perspective, we are writing software for science - in which [[Citations|scholarly citations]] provide another currency for reproducibility.

To this end, developers can now use [https://guides.github.com/activities/citable-code/ digital archives like Zenodo] to provide consistent methods for citation.

== See also ==

* The [[Releases]] page, for more about how these resources are used to release SciJava software artifacts.

[[Category:Development]]

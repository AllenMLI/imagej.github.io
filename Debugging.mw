= Debugging hard JVM crashes with gdb =

There are substantial problems with gdb when starting the Java VM; either gdb gets confused by segmentation faults (used by the JVM to handle NullPointerExceptions in an efficient manner), or it gets confused by the threading system -- unless you compile gdb yourself.

But there is a very easy method to use gdb to inspect serious errors such as segmentation faults or trap signals nevertheless:

<source lang="bash">
./fiji -XX:OnError="gdb - %p" --
</source>

= Debugging Java code with jdb =
== How to attach the Java debugger jdb to a running fiji process ==
This requires two separate processes, fiji itself and the debugger.  You can do this either in one shell, backgrounding the first process or in two shells, this is recommended.  In the two shells do the following:

;Shell 1
:In the first shell, start fiji with special parameters to open a port (8000 in this case) to which jdb can connect afterwards:
<source lang="bash">
./fiji -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y --</source>
:(Tested with Java 1.5.0, ymmv)
;Shell 2
:In the second shell, tell jdb to attach to that port:
<source lang="bash">
jdb -attach 8000
</source>

== This is an ultra quick start to jdb, the default Java debugger ==

Hopefully you are a little familiar with gdb, since jdb resembles it lightly.

Notable differences:
* a breakpoint is set with "stop in <class>.<method>" or "<class>:<line>".  Just remember that the class must be fully specified, i.e. <package>.<subpackages...>.<classname>
* no tab completion
* no readline (cursor up/down)
* no shortcuts; you have to write "run", not "r" to run the program
* no listing files before the class was loaded
* much easier method to specify the location of the source: "use <dir>"
* "until" is "step", "step" is "stepi"

Okay, so here you go, a little demonstration:

(If you attach jdb to a running fiji process, you have to use the line from the previous section instead.)

 $ jdb -classpath ij.jar ij.ImageJ
 > stop in ij.ImageJ.main
 Deferring breakpoint ij.ImageJ.main.
 It will be set after the class is loaded.
 > run
 run ij.ImageJ
 Set uncaught java.lang.Throwable
 Set deferred uncaught java.lang.Throwable
 >
 VM Started: Set deferred breakpoint ij.ImageJ.main
 
 Breakpoint hit: "thread=main", ij.ImageJ.main(), line=466 bci=0
 
 main[1] use .
 main[1] list
 462             //prefs.put(IJ_HEIGHT, Integer.toString(size.height));
 463     }
 464
 465     public static void main(String args[]) {
 466 =>          if (System.getProperty("java.version").substring(0,3).compareTo("1.4")<0) {
 467                     javax.swing.JOptionPane.showMessageDialog(null,"ImageJ "+VERSION+" requires Java 1.4.1 or later.");
 468                     System.exit(0);
 469             }
 470             boolean noGUI = false;
 471             arguments = args;
 main[1] print args[0]
 java.lang.IndexOutOfBoundsException: Invalid array range: 0 to 0
  args[0] = null
 main[1] print args.length
  args.length = 0
 main[1] step
 >
 Step completed: "thread=main", ij.ImageJ.main(), line=470 bci=28
 470             boolean noGUI = false;
 
 main[1] step
 >
 Step completed: "thread=main", ij.ImageJ.main(), line=471 bci=30
 471             arguments = args;
 
 main[1] set noGUI = true
  noGUI = true = true
 main[1] cont
 >
 The application exited

= Debugging Java3D issues =

When Java3D does not work, the first order of business is to use ''Plugins>Utilities>Debugging>Test Java3D''. If this shows a rotating cube, but the [[3D Viewer]] does not work, please click on ''Help>Java3D
Properties...'' in the [[3D Viewer]]'s menu bar.

== Command line debugging ==

If this information is not enough to solve the trouble, or if ''Test Java3D'' did not work, then you need to call Fiji from the command line to find out more.

From the command line, you have several options to show more or less information about Java3D.

=== Windows ===
On Windows, you <u>must</u> pass the ''--console'' option in any case. Example:

<source lang="bash">
cd Desktop\Fiji.app
fiji-win32 --console
</source>

'''Note:''' you may have unpacked Fiji somewhere else than the Desktop. If so, you have to use a different ''cd'' call.
'''And note, too:''' on Windows 64, the executable is called ''fiji-win64'', of course.

=== MacOSX ===
On MacOSX, you need to remember that any application is just a directory with a special layout. So you can call Fiji like this from the ''Terminal'' (which you will find in the Finder by clicking on ''Go>Utilities''. Example command line:

<source lang="bash">
cd /Applications/Fiji.app
Contents/MacOS/fiji-macosx
</source>

'''Note:''' on Tiger, you need to call ''fiji-tiger'' instead of ''fiji-macosx''.

=== Linux ===

As you might have guessed, on Linux it is a simple matter of

<source lang="bash">
cd /path/to/Fiji.app
./fiji-linux
</source>

'''Note:''' on 64-bit Linux, the executable is called ''fiji-linux64'' instead.

== Show Java3D debug messages ==

<source lang="bash">
./fiji -Dj3d.debug=true --
</source>

(Of course, you need to substitute the ''./fiji'' executable name with the appropriate name for your platform.)

'''Note:''' do not forget the trailing ''--''; without them, Fiji mistakes the first option for an ImageJ option rather than a Java one.
'''Note, too:''' on Windows, you <u>must not</u> forget to pass the ''--console'' option (this can be anywhere on the command line).

== Windows-specific stuff ==

On Windows, you can choose between OpenGL and Direct3D by passing ''-Dj3d.rend=ogl'' or ''-Dj3d.rend=d3d'', respectively.

Further, some setups require enough RAM to be reserved, so you might need to pass an option like ''--mem=1200m'' (make sure that you have enough RAM free before starting Fiji that way, though!). If it turns out that memory was the issue, you can make the setting permanent by clicking Fiji's ''Edit>Options>Memory & Threads...'' menu entry.

[[Category:Development]]

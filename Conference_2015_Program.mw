= Program =

{{#widget:Google Spreadsheet
|key=1xl0owZ1kAJDLrA2XtNjlvKwhO5ZsS5_CMmw-dU64sFk
|width=100%
|height=700
}}
<div style="clear: both"></div>

= Abstracts =

== Lightning talks ==

=== Anne Alerding - Quantifying soybean stem tissues using common tools in ImageJ & Fiji ===

Plant organs such as stems are composed of tissues containing thick and thin-walled cells that are easily viewed using histological microscopy. Two dyes commonly used to differentiate between cell types are safranin, which stains the lignin in secondary walls of thick-walled cells red and fastgreen, which turns cellulose in thin, primary cell walls blue. Cells with walls containing both lignin and cellulose appear purple. Complicating successful image analysis and quantification of different cell and tissue types is that each plant differentially absorbs dye, yielding dynamic RGB values with overlapping values for each color group. Thus, quantifying plant tissues via image analysis requires outlining tissues one at a time and saving overlays using the ROI manager. We have perfected this technique to quantify soybean stem tissues using common tools in ImageJ-FIJI and with zoom-in mouse technology.

=== John Bogovic - The Thin Plate Spline method for smooth non-rigid transformations ===

The Thin Plate Spline is an established method to yield a smooth non-rigid transformation from a sparse set of control points. It is attractive compared to other geometric interpolation schemes because it is independent of the number of dimensions, parameterless, yields a deformation with minimal bending energy, and has a closed form solution. We implemented the n-dimensional Thin Plate Spline in pure Java adapting and extending the open source C++ implementation in ITK. In addition to a standalone open source library, we made the implementation accessible through the transformation interfaces of the mpicbg-library, TrakEM2, and ImgLib2 such that it can be easily integrated into existing and new ImageJ-based software. Finally, we developed end-user plugins that use the BigDataViewer and the Thin Plate Spline for manual interactive landmark-based registration of 2- and 3- dimensional images. We made our tools and library available through the ImageJ distribution Fiji.

=== Jean-Marie Burel - The Open Microscopy Environment (OME) ===

Despite significant advances in biological imaging and analysis, major informatics challenges remain unsolved: file formats are proprietary, storage and analysis facilities are lacking, as are standards for sharing image data and results. The [[Open Microscopy Environment]] (OME) [1] is an open-source software framework developed to address these challenges. OME has three components—an open data model for biological imaging: OME data model; standardised file formats (OME-TIFF) and software libraries for file conversion (Bio-Formats [2]); and a software platform for image data management and analysis (OMERO [3]). The Java-based OMERO client-server platform [3] comprises an image metadata store, an image repository, visualization and analysis by remote access, enabling sharing and publishing of image data. OMERO’s model-based architecture has enabled its extension into a range of imaging domains, including light and electron microscopy, high content screening and recently into applications using non-image data from clinical and genomic studies [4] Our current version, OMERO-5 improves support for large datasets and reads images directly from their original file format, allowing access by third party software. OMERO and Bio-Formats run the JCB DataViewer [5], the world’s first on-line scientific image publishing system and several other institutional image data repositories (e.g. [6], [7]).

* [1] http://openmicroscopy.org
* [2] http://openmicroscopy.org/site/products/bio-formats
* [3] http://openmicroscopy.org/site/products/omero
* [4] http://www.openmicroscopy.org/site/products/partner
* [5] http://jcb-dataviewer.rupress.org/
* [6] http://odr.stowers.org
* [7] http://emdatabank.org/

=== Fabrice du Chaumont - Yet another ImageJ friend: Icy ===

[[Icy]] is a free open-source bio-image analysis software. During its 3 years of life it has been continuously improved and continuously brings new features to users and developers. Today Icy is used by more than one thousands of regular users which appreciate its intuitive GUI, its ray-traced 3D visualization and its cutting-edge analysis methods. Users can also adapt and create new algorithms with script and the graphical programming protocol designer and store them on the Icy website which centralize all resources (http://icy.bioimageanalysis.org). Thus it makes available plug-ins, protocols and scripts to everybody. Centralization also allows searching directly from within the application for specific features and enables it in a one-click install. During the last months, Icy has received news exciting features: revisited 3D rendering based on latest VTK version and a new powerful Undo framework. Finally, Icy is always evolving, thanks to the feedback of all its users on http://icy.bioimageanalysis.org/support !

=== Jesus Manuel Falagan - Plugins to import, visualize, process & write astronomical FITS files ===

This abstract summarizes the progress on the development of tools for astronomical data cube (stack) visualization and spectral analysis (MABCUBA_IJ) using the ImageJ infrastructure we are carrying out at the Centro de Astrobiologia (INTA-CSIC) in Spain. We will present the development of plugins to import, visualize, process and write multi-axis astronomical FITS files. We have developed a new class, the AstronomicalImagePlus, which extends ImagePlus with the astronomical "calibration" (WCSGlobal). This allows applying the full potential of ImageJ data processing and the managing of the FITS header to properly account for the processing applied to the stack. All axes, spatial, spectral, polarization and intensity are fully "calibrated" allowing visualization and processing with their associated astronomical units and their conversion to other related units. Implementation of the new classes/plugins will extend the use of ImageJ to astronomical FITS files with properly updated header.

=== Tiago Ferreira - Alternative approaches for neuronal morphometry ===

Fully automated systems capable of comprehensive characterization of neuronal arbors remain unavailable. As a consequence, quantitative neuroanatonomy relies on onerous reconstruction of individual cells. Here, I introduce alternative approaches to cellular morphometry that bypass time-consuming manual reconstructions. I will demonstrate the utility of such approaches by providing several case studies: First, I show how the Sholl technique (http://imagej.net/Sholl) can be performed directly on segmented images to classify highly-related cortical interneurons and to quantify complex arbors from Brainbow-expressing cerebellum. Second, I show how skeletonization (http://imagej.net/Strahler) can be used to unravel the genetics of dendritic arborization in Drosophila sensory neurons. Third, I discuss preliminary data on how the three-dimensional anatomy of ensembles of networked glia can be quantified in the human brain. To conclude, I will discuss how these approaches could be generalized in the neurosciences, and how these efforts could pave the way to an ImageJ toolbox dedicated to neuronal morphometry.

=== Bill Heeschen - Quantitative characterization of cellular irregularities in extruded polystyrene foam using digital image processing and analysis ===

Flow-induced banding patterns in extrusion-based foams can lead to aesthetic issues, or, in severe cases, to compromised product performance. Image collection and analysis procedures are described that allow the pattern to be captured with good contrast and quantitatively analyzed in a manner that is consistent with human perception. The procedure for pattern characterization and classification will be discussed. The key component is isolating the bright/dark banding in the context of the cellular structure where the size of the individual cells can be on the order of the width of the bands. Cell-by-cell contrast is often greater than the humanly-perceived contrast from bands of correlated cell size within an area. Removing this ambiguity in the assignment of bright/dark patterns to cells versus bands allows the foam pattern to be analyzed directly. Image analysis results are shown to be consistent with human panel ratings for a series of several foam samples."

=== Mark Hiner - MATLAB and ImageJ: Reunited (and it feels so good) ===

ImageJ and MATLAB both provide powerful scientific development paradigms. To lower the barrier between these tools, ImageJ now offers a MATLAB script language plugin, making it possible to execute parameterized MATLAB scripts from within ImageJ’s script editor. In the other direction, the ability to call ImageJ from MATLAB has been improved with an enhanced MIJ.m script, which supports the full range of installed plugins, and supports the use of both ImageJ1 and ImageJ2 data structures from the MATLAB command prompt. This bidirectional support facilitates the sharing and reuse of efforts from both communities.

=== Irene Landrum - SWAMP – a no-cost, open, high-performance computing platform for continuous software assurance ===

The Software Assurance Marketplace (SWAMP) is a no-cost, open, high-performance computing platform for continuous software assurance. It includes an array of open-source and commercial software security testing tools, a library of applications with known vulnerabilities, and a comprehensive results viewer (CodeDx) for vulnerability remediation throughout the software development lifecycle.

=== Melissa Linkert - OME Bio-Formats: 10 years of proprietary image data ===

Despite significant advances in biological imaging and analysis, major informatics challenges remain unsolved: file formats are proprietary, storage and analysis facilities are lacking, as are standards for sharing image data and results. The Open Microscopy Environment (OME) [2] is an open-source software framework developed to address these challenges. OME has three components—an open data model for biological imaging: OME data model; standardised file formats (OME-TIFF) and software libraries for file conversion (Bio-Formats [3]); and a software platform for image data management and analysis (OMERO [4]). OME has now been developing the Bio-Formats library for 10 years, during which time it has seen rapid advances in the number of file formats and imaging modalities that are supported. In recognition of this milestone, we will discuss the history of Bio-Formats, notable improvements in the recent 5.1.x releases, and plans for supporting the next generation of imaging technology.

* [1] http://glencoesoftware.com
* [2] http://openmicroscopy.org
* [3] http://openmicroscopy.org/site/products/bio-formats
* [4] http://openmicroscopy.org/site/products/omero

=== Michael Majurski - Accurate and scalable Microscopy Image Stitching Tool (MIST) ===

With new microscope technologies scientists are acquiring terabyte-sized datasets to cover large areas. An automated optical microscope images a large sample by generating a grid of partially overlapping images. This is required because its field of view is much smaller than the dimensions of the specimen being imaged. This process generates a great number of images that need to be stitched into a large mosaic in order to derive meaningful information. A stitching tool is required to generate these large mosaics. The resulting image can have tens of thousands of pixels per side. Stitching one large image mosaic is computationally taxing and the computation becomes overwhelming when stitching repeated frames of live cell experiments.

Optical microscopy often has to process feature-poor images (e.g., sparsely populated cell cultures) and may be used to derive measurements (quantitative information such as counts, densities, intensities, etc.) from such images. We developed a new stitching technique that minimizes the uncertainty due to the lack of features between overlapping areas while being faster than the leading alternative tool in the field. This method optimizes the translations computed by a pairwise image registration method, like the Fourier-based phase correlation image alignment method [1], using the mechanical stage system model. The computed translations are optimized using the Hill Climbing algorithm constrained to a square area of 4x the stage repeatability per side. The optimization function is normalized cross correlation between images.

Our algorithm is implemented in Java as an ImageJ plugin which runs on both CPUs and/or GPUs taking advantage of compiled native libraries from FFTW [2], the NVIDIA CUDA toolkit [3] using JCuda [4], and CuFFT [5] using JCufft [6]. The implementation is cognizant of the available computer memory and scales the execution based on the number of CPUs and GPUs on a system. The algorithm can run using as little as 200 MB (on 1040x1392 pixel image tile), though using less memory incurs longer execution times. A representative test case consisting of 16x22 image tiles (1040x1392 pixels) stitches in 24 s on the CPU and 12 s on the GPU using an Intel Xeon CPU E5-2620 @ 2.0 GHz with NVIDIA Quadro 4000 GPU (2048 MB GPU memory). This test case produces a stitched image roughly 20 000 x 21 000 pixels as shown in Figure 1. Figure 2 shows the stitching tool’s ImageJ plugin gui. Acknowledgments This work has been supported by NIST. We would like to acknowledge the team members of the computational science in biological metrology project at NIST for providing invaluable inputs to our work.

* [1] C. Kuglin and D. Hines, "The Phase Correlation Image Alignement Method," in Proceedings of the 1975 IEEE International Conference on Cybernetics and Society, 1975, pp. 163–165.
* [2] M. Frigo and S. Johnson, "The Design and Implementation of {FFTW3}," Proc. IEEE, vol. 93, no. 2, pp. 216–231, 2005.
* [3] NVIDIA, "CUDA Toolkit," 2014. [Online]. Available: https://developer.nvidia.com/cuda-toolkit. [Accessed: 30-Jun-2015].
* [4] NVIDIA, "JCuda." [Online]. Available: http://www.jcuda.org/jcuda/JCuda.html. [Accessed: 30-Jun-2015].
* [5] NVIDIA, "cuFFT Library," 2014. [Online]. Available: https://developer.nvidia.com/cuFFT. [Accessed: 30-Jun-2015].
* [6] NVIDIA, "JCufft." [Online]. Available: http://www.jcuda.org/jcuda/jcufft/JCufft.html. [Accessed: 30-Jun-2015].

=== Pariksheet Nanda - Sharing the value of software freedom with non-programmers ===

The liberating benefits of software like ImageJ are self-evident to free and open source software developers. Yet many scientists opt for proprietary software for their data analysis needs. Why is this? Proprietary software companies create their own gated communities, offering convenience, and guarantees of support and expertise. In recent years, major hardware companies no longer treat imaging software as a commodity, and have instead recreated it as an all-in-one-experiment solution. The growth of open scientific computing would benefit from a stronger local presence. Proprietary software companies rely on personal interaction, including face-to-face lab presence, to build and maintain their community. The null hypothesis is for free and open software to continue to rely heavily on online communication, which leaves neophytes vulnerable to supplier lock-in, and isolation from the free software community. This lightning talk will discuss specific approaches of empowering and culturalizing scientists into the open scientific computing community."

=== Benjamin Nanes - Slide Set: Simplified batch processing with ImageJ2 ===

Most imaging studies in the biological sciences rely on analyses that are relatively simple. However, manual repetition of analysis tasks across even a modestly sized data set can be tedious, error prone, and difficult to reproduce. While fully automated image analysis solutions are useful for very large data sets, they are sometimes impractical for the small- and medium-sized data sets common in biology. A significant gap exists between fully interactive image analysis workflows, which are easy to establish, but difficult to reproduce, and fully automated analysis workflows, which are easy to reproduce, but difficult to establish. Slide Set, a framework for reproducible image analysis and batch processing with ImageJ, bridges this gap by organizing images and related metadata, recording region of interest selections and analysis parameters, and automating analysis tasks across multiple images. Slide Set includes many built-in analysis tasks and is easily extended to automate other ImageJ plugins."

=== Brian Northan - Flexible deconvolution using ImageJ Ops ===

This lightning talk will describe the implementation of deconvolution into the ImageJ2 platform. We will go over the basics of deconvolution and introduce concepts such as noise handling, edge handling, algorithm acceleration and point spread functions. We will review strengths and weaknesses of existing ImageJ deconvolution plugins. We will then describe the design of re-usable and extensible deconvolution components, that have been implemented within the imagej-ops framework. Where possible previous open source components have been re-used and/or re-implemented. We consider the potential need for a native library bridge in order to re-use existing C and GPU based libraries. Preliminary results will be presented that have been generated using the Richardson-Lucy Algorithm with total variation regularization, non-circulant edge handling, and vector extrapolation acceleration. All code is open source and has been placed in publicly available git repositories.

=== Stephan Saalfeld - Seamless stitching without blending ===

In modern science, images of large samples are often acquired as mosaics of overlapping tiles that are then stitched to yield a single high resolution image. Photomoetric differences across tiles can arise from both the imaging system and varying properties of the sample leading to visible seams and abrupt intensity variation in the stitched image. We have developed a method that calculates a smooth intensity correction field for each individual tile that minimizes the differences of corresponding intensities in overlapping image areas and by that leads to seamless montages. Our method performs well in setups that include uncalibrated acquisition devices and sample-dependent intensity variances and does not require blending. Our method guarantees minimal deviation from original acquisitions and thus enables quantitative comparison of intensities across stitched images. We have implemented the method in Java using the ImgLib2 and mpicbg-libraries and published the open source code on GitHub. For end-users, the method is available as an extension of the TrakEM2 software and included in the ImageJ distribution Fiji."

=== Raghavender Sahdev - TimeLapseReg – An imageJ plugin for drift correction of video sequence in time-lapse microscopy ===

The main functionality of the Turboreg plugin allows for aligning or matching two images. The plugin is widely used in Neuroscience for pre-processing of both static and time-lapse imaging data. In this project we develop an ImageJ's plugin to be used by an end-user to correct for the drift in very long sequences of noisy multi-channel fluorescence images. TimeLapseReg uses the well-known TurboReg/StackReg engine method to register frames to a reference image. It computes and applies rigid transformations of the user-selected channel and stores them for subsequent use. The geometrical transformations are further applied to all channels. We present the user with a drift trajectory over the entire image sequence. The user has the option of choosing the reference image and discarding corrupted images. We have applied our software to calcium imaging data for helping neuroscientists to better infer neuronal network spiking activity."

=== Benjamin Schmid - Real-time multi-view deconvolution of time-lapse data on the GPU ===

State-of-the-art multi-view (MV) fusion algorithms simultaneously fuse and deconvolve data acquired by MV imaging techniques such as Selective Plane Illumination Microscopy (SPIM). MV deconvolution, however, has so far been too computationally demanding to be carried out in real-time. Here, we approximated the full 3D transfer function with a 2D PSF by neglecting one lateral component. This enabled us to process planes orthogonal to the rotation axis independently. Memory consumption was thereby reduced by 2-3 orders of magnitude, so that the entire deconvolution could be performed on the GPU. While achieving similar results as established 3D MV deconvo-lution, we thereby reduced processing times by a factor of up to 75, allowing us finally to apply MV deconvolution in real-time during time-lapse acquisition.

=== Amitabh Verma - Acquisition, processing & re-processing using OpenPolScope plugin for Micro-Manager ===

OpenPolScope software (www.openpolscope.org) provides a suite of plugins for Micro-Manager and extends its capabilities of acquisition and adds features of processing and reprocessing. The plugin also provides a wrapper to the ImageJ macro language which can then be applied to a Micro-Manager acquisition stream. OpenPolScope architecture is based on plugins called Mode Plugins and is thus extensible and can be applied to a number of imaging techniques that require processing like Ratiometric imaging. The reprocessing plugin is ImageJ based using Micro-Manager libraries to access datasets. The OpenPolScope API provides a common processing pipeline for both the Micro-Manager acquisition and ImageJ re-processing plugin. OpenPolScope plugin was designed to support Lc-PolScope based Birefringence imaging where consecutive images are acquired (as channels) modulating a liquid crystal between the microscopes light-path. A resultant Retardance image is then computed on-the-fly and inserted in the acquisition stream as an additional channel."

=== Thorsten Wagner - NanoTrackJ – An open-source multi-modal size characterization tool for nanoparticle tracking analysis based on ImageJ ===

Nanoparticle tracking analysis is a widely known method to determine the hydrodynamic diameter of nanoparticles (NP) in liquids. Commercial systems have been built for convenient measurements and ease of use. However, they rely on a multitude of analysis algorithms and statistical calculations which are not disclosed to the user. To give a better understanding of what is calculated, making the method applicable for other experimental setups and additionally extending the method for exploiting color information we developed a free plugin for ImageJ called NanoTrackJ. It is an open-source software where all algorithms are documented and freely accessible. The talk will give an overview of the functionalities of nanotrackj by presenting analysis of different video sequences from various devices."

=== Jay Warrick - JEX – a platform for data management and batch processing with standard tools ===

ImageJ/FIJI, SciJava, SCIFIO, and ImgLib2 provide a host of capabilities for enabling advanced image analysis and have been integrated into many notable softwares including CellProfiler, KNIME Image Processing, and Icy to name just a few. This talk provides a vignette of another option in that growing list, JEX. Although `reinventing the wheel' should be avoided when possible, the base java / image analysis libraries actually allow each of these separate but related softwares to enhance each other and further strengthen the common bases. In this vignette, a brief overview of JEX will be provided with the goal of highlighting one of the primary focuses of JEX, keeping your experimental data organized in a simple fashion in a context that enables batch processing with established ImageJ functionalities, java libraries, and statistical analysis / modeling softwares such as R and Octave for more streamlined workflows and objective analysis across experimental conditions.

=== Aryeh Weiss - Automated processing of telomeres with ImageJ and R ===

Telomeres are regions of repetitive nucleotide sequences located at the ends of chromosomes, which protect them from fusion and degradation. In every cell division, the telomeres are shortened until they reach a critical length that signals the cell to go into senescence. Abnormally short or long telomeres are common phenomenon in cancer cells, as compared to healthy controls. Manual characterization of telomere length distribution is at best difficult. Here we present an image processing workflow which was developed in ImageJ and R to enable automated processing of telomere count and length distribution in thousands of cells. Over 3000 cells were imaged, each containing 30-150 visible telomeres. This could not have been done manually. The ImageJ environment provided us with the ability to acquire and analyze large quantities of data in a reproducible manner, and demonstrated the spread in data that resulted from the fundamental biology and physiology that were being studied.

== Workshops ==

=== Marcel Austenfeld - Bio7 – Statistical image analysis and reproducible reports with ImageJ and R ===
In this workshop an overview is given about Bio7 which is an Integrated Development Environment for Ecological Modeling, Scientific Image Analysis and Statistical Analysis based on the Eclipse Rich Client Platform. The dynamic compilation and execution of Java code, integration of the Eclipse Java Development tools and the embedded JavaFX SceneBuilder to create and run JavaFX interfaces at runtime are some highlights of the latest development efforts which will be presented in this session. The main part of the workshop with practical exercises will be concentrated on the recently improved embedded Graphical User Interface to the statistical software R and the powerful 'spatstat' package for spatial point pattern analysis. Concomitantly a package for reproducible R reports will be used to document the different analysis steps of ImageJ data in R.

=== Jan Brocher - Image processing, feature extraction and analysis using the BioVoxxel Toolbox ===
The workshop will give a short introduction on the influence of contrast adjustments, shading correction, different background subtraction methods and a few basic convolution filters. This includes some considerations about user bias and good scientific practice. Furthermore, it builds the basis for the main part which will focus on object extraction from grayscale images. The latter includes the usage of automatic thresholds and emphasizes the "Threshold Check" as possibility for an easier determination of suitable threshold algorithms. In the final part, the workshop will give an overview over several analysis possibilities on extracted binary objects including functions from the [[BioVoxxel Toolbox]]. Examples will include absolute counting, size and shape measurements, relative comparison of object features, object-based object extraction and differential analysis according to shape descriptors. One additional aim is to learn methods which enable the final automation of processing and analyses in a script e.g. the [[Macros|ImageJ macro language]].

=== Jean-Marie Burel and Petr Walczysko - The OMERO platform for management of microscopy data and beyond ===
In this workshop, we will outline and demonstrate the [[OMERO]] platform, and show how you can use it to work with your microscopy and/or HCS data. In addition we will demonstrate some of the applications that have been released by OME and some of the integration with 3rd party tools, including:
* OMERO.figure - fast figures from your OMERO images
* ImageJ - improved interaction with OMERO
* [[Micro-Manager]] - how to import directly images to OMERO
We've designed OMERO to be as flexible as possible, and this has enabled its use in a range of imaging domains, including light and electron microscopy, high content screening. Come along to the workshop and bring your favourite data.

=== Fabrice du Chaumont and Stephane Dallongeville - Hands on Icy ! ===
In this practical workshop, discover how to use [[Icy]] to watch and analyse your images ! During this session, we will see the different functionalities of Icy in action, from visualization (2D/3D) to analysis based on a real biologic case with a lot of analysis traps ! Let's investigate !

=== Tiago Ferreira - Scripting with BAR ===

The scripting capabilities of ImageJ (IJ) play a pivotal role in its success because they empower users with the ability to perform efficient and reproducible scientific image processing. Here I present Broadly Applicable Routines (BAR), a curated collection of plugins and multi-language scripts aimed at streamlining ImageJ workflows. The main goal of BAR is help users that want to extend IJ's core functionality by 1) Providing tools that help users create, access and organize their own routines, 2) Providing source code templates and customizable scripting libraries, and 3) Bridging the gap between IJ1 and IJ2 by modernizing IJ1 built-in commands. BAR is open source and well documented (http://imagej.net/BAR). The project encourages community contributions and is available through an IJ update site.

=== Matt McCormick - SimpleITK ===
To quantitatively compare the contents of two images, they must be spatially aligned. Image registration finds the spatial transformation that aligns two images. This workshop presents SimpleITK, the simplified interface to the Insight Toolkit, to perform 2D and 3D image registration. With this programming library, which interoperates with ImageJ/Fiji, a spatial transformation between two images can be estimated. This spatial transformation can be quantified to learn about movement or deformation in the images, or it can be used to resample one of the images so that pixel-to-pixel content can be compared. Through interactive examples in IPython notebooks, we will explore and learn about the components of the registration framework and how they work together: transforms, interpolators, similarity metrics, and optimizers.

=== Curtis Rueden and Brian Northan - Parameterized scripting with ImageJ Ops ===
The [[ImageJ2]] project updates ImageJ with powerful new features. Two especially useful improvements are: 1) the [[ImageJ Ops]] library, which provides a powerful, unified, extensible and performant collection of image processing routines; and 2) [[Scripting parameters|parameterized scripts]] and macros, which may now declare typed input and output parameters. This mechanism allows scripts to be prototyped more quickly and succinctly, and makes them compatible with other tools beyond ImageJ, including the [[KNIME]] data mining platform, [[CellProfiler]] image analysis tool, and [[OMERO]] image database. This workshop will walk users through how to write parameterized macros and scripts using ImageJ's [[Script Editor]], which leverage image processing routines from ImageJ Ops. It will demonstrate how to execute them [[Headless|headlessly]] from the command line, and briefly illustrate how these scripts can be used from other tools in the [[SciJava]] software ecosystem.

=== Aryeh Weiss - Introduction to image processing with ImageJ ===
(Forthcoming.)

{{Infobox
| name                   = Script Editor
| software               = ImageJ
| author                 = Johannes Schindelin, Sumit Dubey (Google Summer of Code 2009)
| maintainer             = Johannes Schindelin
| source                 = {{GitHub|org=imagej|repo=imagej-ui-swing|source=net/imagej/ui/swing/script/ScriptEditor.java}}
| released               = 11 Sep 2008
| status                 = active
}}{{Scripting}}

The script editor is an invaluable help when writing scripts in any of ImageJ's supported [[Scripting comparisons|languages]].

=== Starting the editor ===

To get started, start up the script editor:

[[Image:Script-Editor-new.jpg|500px]]

There is also the keyboard shortcut {{key|{}} (open curly bracket) to open the editor.

=== Choosing a language ===

Then choose a language from the language menu:

[[Image:Script-Editor-choose-language.jpg]]

Now you can write your script. In this tutorial, Jython was chosen as scripting language, but the process is really the same for all scripting languages.

[[Image:Script-Editor-first-script.jpg]]

=== Running the script ===

Once you are satisfied with the script, run it.  This does not require saving, but of course you should save your script later when it works.

[[Image:Script-Editor-run.jpg]]

Note that while the script is running, the window title shows the tell-tale ''(Running)''.

You can use all of ImageJ's classes right away.  Here is an example that shows a dialog where the user can input a number.
For details how to  write dialogs in the different scripting languages, see [[Scripting comparisons]]

[[Image:Script-Editor-dialog.jpg]]

=== Script Parameters ===

There is a universal <code>@ parameter</code> notation available across all scripts for declaring inputs and outputs. The rules for their use is as follows:

<ol>
<li>All parameter declarations must appear in comments. Each comment line contains a single parameter declaration and nothing else.</li>
<li>Any parameters after the first non-parameter line will not be recognized.</li>
<li><code>@type variableName</code> will declare an input of the indicated type, assigned to the specified name.</li>
<li><code>@OUTPUT type outputName</code> will declare the variable of the specified name as an output parameter with the given type.</li>
</ol>

For example, if we look at the Greeting.py template supplied with Fiji:

<source lang="Python">
# @String name
# @OUTPUT String greeting

# A Jython script with parameters.
# It is the duty of the scripting framework to harvest
# the 'name' parameter from the user, and then display
# the 'greeting' output parameter, based on its type.

greeting = "Hello, " + name + "!"
</source>

We see that an input parameter <code>name</code> of type <code>String</code> is declared. This will automatically be harvested via a pop-up dialog when the script is run.

When the script is completed, we expect to have a <code>String</code> variable named <code>greeting</code> which will be displayed as appropriate, based on the variable type.

Note that if we added an extra comment to the top of our script as such: 

<source lang="Python">
# A simple python script
# @String name
# @OUTPUT String greeting

# A Jython script with parameters.
# It is the duty of the scripting framework to harvest
# the 'name' parameter from the user, and then display
# the 'greeting' output parameter, based on its type.

greeting = "Hello, " + name + "!"
</source>

We would actually break the script, as the parameters would not be harvested or displayed due to violation of the second parameter rule.

=== Further reading ===

See the [[Scripting Help]] page for an introduction to scripting.

For more information about each specific language, see the Languages section of top right sidebar.

[[Category:Plugins]]
[[Category:Tutorials]]
[[Category:Scripting]]

{{DevelopMenu | tools}}{{Minibox | logo=Travis.png | blurb='''Travis CI:''' Build your code in the cloud!}}[https://travis-ci.org/ Travis] is a tool for [[Project_management#Continuous_integration|continuous integration]]. It has excellent integration with [[GitHub]], and is very useful for automating builds, deployment and other tasks.
{{TOC}}
= Automatic Deployment of Maven Artifacts =

Deploying your library to [[Maven]] makes it available for other developers. It is also a [[Fiji/Contribution_requirements|contribution requirement for the Fiji project]].

== Requirements ==
* Host your [[open-source]] project on [[GitHub]].
* Log in to [https://travis-ci.org/auth Travis CI] with your corresponding GitHub account and enable your repository.
* Contact an ImageJ admin in [[Chat#Gitter|Gitter]] or [http://forum.imagej.net/ the ImageJ forum] and request that they file a PR which adds Travis support to your repository.

== Instructions ==
{{Notice | These instructions describe much of the technical process of adding Travis metadata to your repository. Normally, an ImageJ admin—not the plugin developer—will follow these instructions.}}
<div style="overflow: hidden">
<tabs>
<tab name="Maven">
<ol>
<li>Use the following code for your repository's <code>.travis.yml</code>:
<br>{{GitHubEmbed|org=scijava|repo=scijava-common|path=.travis.yml}}
</li>
<li>From the command line in your repository, create an [https://docs.travis-ci.com/user/environment-variables/#Encrypting-Variables-Using-a-Public-Key encrypted environment variable] for <code>MAVEN_PASS</code> which defines the Maven password of the [[ImageJ Maven repository]]'s <code>travis</code> account. Then do the same for the <code>TOKEN_NAME</code> of the [[ImageJ Jenkins]] <code>Travis-Success</code> and <code>Travis-Failure</code> jobs.

<source lang="bash">
$ travis encrypt MAVEN_PASS=travis_maven_password --add env.global
$ travis encrypt TOKEN_NAME=imagej_jenkins_token --add env.global
</source>

Note that this will automatically modify your <code>.travis.yml</code> file.
</li>
<li>Add the following script as <code>.travis/build.sh</code>:
<br>{{GitHubEmbed|org=scijava|repo=scijava-common|path=.travis/build.sh}}
</li>
<li>Add the following script as <code>.travis/notify.sh</code>:
<br>{{GitHubEmbed|org=scijava|repo=scijava-common|path=.travis/notify.sh}}
</li>
<li>Create a <code>settings.xml</code> in your repository with the following contents:
<br>{{GitHubEmbed|org=scijava|repo=scijava-common|path=.travis/settings.xml}}
</li>
<li>Commit all your files with Git and push them back to your repository. If everything works as intended, you should start seeing new builds in your [https://travis-ci.org Travis dashboard] with each new commit, with corresponding SNAPSHOT artifacts automatically deployed to [http://maven.imagej.net/index.html#view-repositories maven.imagej.net].
</li>
</ol>
</tab>
<tab name="Gradle">
<ol>
<li>Add the following code to your <code>build.gradle</code> file:
<source lang="Groovy">
// this _must_ be at the top, with the other plugins
apply plugin: 'maven'
apply plugin: 'maven-publish'

// more towards the end
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://maven.imagej.net/content/repositories/releases") {
                authentication(userName: "$System.env.MAVEN_USER", password: "$System.env.MAVEN_PASS")
            }
            snapshotRepository(url: "http://maven.imagej.net/content/repositories/snapshots") {
                authentication(userName: "$System.env.MAVEN_USER", password: "$System.env.MAVEN_PASS")
            }
        }
    }
}
</source>

If you also want your Javadoc JAR to be published, also add the following:
<source lang="Groovy">
task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
}

artifacts
{
        archives sourcesJar
        archives javadocJar
    archives testsJar
}

publishing {
        publications {
                maven(MavenPublication) {
                        from components.java
                        artifact sourcesJar { classifier "sources" }
                }
        }
}
</source>
</li>
<li>From the command line in your repository, create an [https://docs.travis-ci.com/user/environment-variables/#Encrypting-Variables-Using-a-Public-Key encrypted environment variable] for your [http://maven.imagej.net maven.imagej.net] username and password—be careful with escaping special characters correctly:

<source lang="bash">
$ travis encrypt MAVEN_USER=my_maven_username --add env.matrix
$ travis encrypt MAVEN_PASS=my_maven_password --add env.matrix
</source>

Note that this will automatically modify your <code>.travis.yml</code> file.
</li>
<li>Commit all your files with Git and push them back to your repository. If everything works as intended, you should start seeing new builds in your [https://travis-ci.org Travis dashboard] with each new commit, with corresponding SNAPSHOT and release artifacts immediately deployed automatically to [http://maven.imagej.net/index.html#view-repositories maven.imagej.net].
</li>
</ol>
</tab>
</tabs>
</div>

== Testing things which cannot run headless ==

If your tests require a display (i.e.: they do not pass when run [[headless]]), you can use [[Xvfb]] as follows:
<source lang="yml">
before_script:
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - sleep 3 # give xvfb some time to start
</source>
Of course, you should do this only as a last resort, since the best unit tests should not require a display in the first place.

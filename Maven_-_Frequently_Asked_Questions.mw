{{DevelopMenu | source}}= What does the POM version mean? =

The {{GitHub|org=imagej|repo=minimal-ij1-plugin|path=pom.xml|label=pom.xml}} of [https://github.com/imagej/minimal-ij1-plugin/ minimal-ij1-plugin] inherits from a parent called {{GitHub|org=imagej|repo=pom-imagej|path=pom.xml|label=pom-imagej}}. This parent POM defines and configures many things so that the POMs of individual plugin projects are shorter (i.e., so they don't have to repeat things).

The version of <code>pom-imagej</code> (<code>5.2.0</code> as of this writing) indicates the version of that parent POM. We occasionally improve the parent POM, adding and tweaking it. When we do so, its version increases. I suggest leaving the version that same as what's in <code>minimal-ij1-plugin</code>, since that refers to the latest version. Future <code>1.x</code> versions of ImageJ will be backwards compatible, so if you later notice that we have updated <code>minimal-ij1-plugin</code> to e.g. <code>5.3.2</code>, you can (optionally) update your plugin to that version as well.

The version of <code>minimal-ij1-plugin</code> itself (<code>0.1.0-SNAPSHOT</code> as of this writing) is the version of your plugin. This string is appended to the JAR file name (e.g., minimal-ij1-plugin-0.1.0-SNAPSHOT.jar), so that you can differentiate between multiple versions of your plugin. Use whatever versioning scheme you want.

However, once you become more comfortable with Maven, I suggest using [http://stackoverflow.com/questions/5901378/what-exactly-is-a-maven-snapshot-and-why-do-we-need-it a SNAPSHOT version during development], and a release (i.e., non-SNAPSHOT) version when distributing your plugin. The reason is to avoid two different JAR files both called <code>my-plugin-1.2.3</code> but with different contents. (This is part of what Maven calls [[reproducible builds]].)

For example, while you develop your plugin, you might use the version <code>1.0.0-SNAPSHOT</code> to indicate that this is not the final <code>1.0.0</code> version but leads up to it. Once you are happy with the plugin in its current form, switch to <code>1.0.0</code>. Note, however, that you will cause problems if you later change the sources of the final <code>1.0.0</code> version (i.e., without first advancing the version in the <code>pom.xml</code> file).

= How are dependency versions determined? =

In many <code>pom.xml</code> files which extend <code>pom-scijava</code>, you can see that the dependency versions are omitted. The versions are defined (or "managed") by the pom-scijava parent configuration as part of its [[Bill of Materials]]â€”e.g., {{GitHub|org=scijava|repo=pom-scijava|tag=pom-scijava-14.0.0|path=pom.xml#L218-L219|label=here}} is where the ImageJ 1.x version is defined.

* Browse the latest <code>pom-scijava</code> {{GitHub|org=scijava|repo=pom-scijava|path=pom.xml|label=here}}.
* Browse the available versions of ImageJ 1.x [http://maven.imagej.net/content/groups/public/net/imagej/ij/ here].

= How do I determine which Maven projects (i.e., dependencies) I actually need? =

One way to check is using the dependency plugin like so:

<source lang="bash">
mvn dependency:analyze
</source>

This will tell you:

# Dependencies you declared but do not actually use; and
# Dependencies you did not declare directly, but actually need.

Note that this will only work if your project compiles successfully. In other words, it is easier to start with "too many" dependencies and pare down, rather than trying to "build up" from zero.

= What's this: ''Property 'imagej.app.directory' unset; Skipping copy-jars'' =

This is part of the {{GitHub|org=imagej|repo=imagej-maven-plugin|label=imagej-maven-plugin}} (enabled for you by pom-scijava). As you suspected, it copies your plugin's ''.jar'' file to your ImageJ plugins folder. But you have to specify where:

<source lang="bash">
mvn -Dimagej.app.directory=/Applications/ImageJ.app
</source>

You can cause this to happen automatically by creating a file <code>$HOME/.m2/settings.xml</code> where <code>$HOME</code> is your home directory, with the following contents:

<source lang="xml">
<settings>
	<profiles>
		<profile>
			<id>imagej</id>
			<activation>
				<file>
					<exists>${env.HOME}/Desktop/Fiji.app</exists>
				</file>
			</activation>
			<properties>
				<imagej.app.directory>${env.HOME}/Desktop/Fiji.app</imagej.app.directory>
				<delete.other.versions>true</delete.other.versions>
			</properties>
		</profile>
	</profiles>
</settings>
</source>

With such user-wide settings in place, all your Maven builds will automatically copy the build artifacts into your ImageJ installation in <code>$HOME/Desktop/Fiji.app</code>. Of course, you can change this path to whatever you like.

= How to use my own, custom ImageJ version? =

The dependencies specified in ''pom.xml'' are only used to compile your .jar file. If you set the ''imagej.app.directory'' property properly, it will copy things into the ''jars/'' subdirectory of the location you pointed the property to.

= My software depends on a ''.jar'' file that is not available via Maven! = 

The easiest way to do that would probably to install it locally for the
moment. Please see Maven's console log for details how to do that after
specifying a dependency, e.g.

<source lang="xml">
<dependency>
  <groupId>uk.ac.bham.dentistry</groupId>
  <artifactId>Particles8_</artifactId>
  <version>1.6</version>
</dependency>
</source>

It is advisable to look for the version number on the web site, as it was done here, and to construct the groupId from the web site, too.

Note that you will need to wrap the .class files in a .jar file like so:

<source lang="bash">
jar cvf Particles8_.jar Particles8_.class
</source>

Then you can install that ''.jar'' file locally with a command like:

<source lang="bash">
mvn install:install-file \
  -Dfile=/path/to/Particles8_.jar \
  -DgroupId=uk.ac.bham.dentistry -DartifactId=Particles8_ -Dversion=1.6 \
  -Dpackaging=jar -DgeneratePom=true
</source>

= Can I call ''svnversion'' via Maven? =

Typically you want to do that to put the current revision into an About box or something similar.

In general, you can call any needed Ant functionality using the [http://maven.apache.org/plugins/maven-antrun-plugin/ maven-antrun-plugin]. However, for the About box, there is a much better solution:

The pom-scijava parent uses the buildnumber-maven-plugin to embed the SCM revision and date in the JAR manifest.

Your About dialog box can access the information by adding a dependency on ''scijava-common'' like this:

<source lang="xml">
<dependencies>
  <dependency>
    <groupId>org.scijava</groupId>
    <artifactId>scijava-common</artifactId>
  </dependency>
</dependencies>
</source>

and then using code like this:

<source lang="java">
import org.scijava.util.VersionUtils;

...
    String version = VersionUtils.getVersion(MyBeautifulPlugin.class);
</source>

= How do I make my modified project available to a depending project using Maven? =

For example, suppose you have made changes to TrakEM2 that you want to take advantage of in a plugin. Compiling with mvn may result in errors indicating that your modifications do not exist. In this case, run "mvn install" in the ''modules/TrakEM2'' directory. This should install the relevant, fresh TrakEM2 jars into the correct locations.

Also make sure that the ''groupId'', ''artifactId'' '''and''' ''version'' in the ''<dependencies>'' section of the dependencee match the settings in the dependency's ''pom.xml'' file.

= How can I run individual tests with Maven? =

As described [http://maven.apache.org/surefire/maven-surefire-plugin/examples/single-test.html here]:

<source lang="bash">
mvn -Dtest='TestCircle#mytest' test
</source>

= Where can I find more information about Maven? =

See the [[Maven]] page!

[[Category:Development]]
[[Category:Maven]]

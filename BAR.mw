<seo metak="data analysis,annotation,segmentation,morphometry,scripts" metad="data analysis,annotation,segmentation,morphometry,scripts" />
{{Infobox
| software       = ImageJ/Fiji
| name           = BAR
| maintainer     = [mailto:tiago_dot_ferreira_at_mail_dot_mcgill_dot_ca Tiago Ferreira]
| source         = {{GitHub|org=tferr|repo=Scripts}}
| released       = June 2014
| category       = [[:Category:Analysis|Analysis]], [[:Category:Image annotation|Annotation]], [[:Category:Filtering|Filtering]], [[:Category:Segmentation|Segmentation]], [[:Category:Scripting|Scripting]]
}}
'''BAR''': A collection of '''B'''roadly '''A'''pplicable '''R'''outines.

The collection contains [[Macros]], [[Scripts]] and [[Plugins]] focused on Data Analysis, Image Annotation, Image Segmentation and Bitmap Morphometry. It is curated using {{GitHub|org=tferr|repo=Scripts#ij-bar|label=GitHub}} and distributed as an optional [[List_of_update_sites|update site]].

== Installation ==
The easiest way is to install and maintain the collection is to subscribe to the BAR update site. By doing so you will not need to manually download and install anything: the [[Fiji Updater]] will take care of it for you:<br>
Run <span style="border-bottom:1px dotted #ccc;">Help▷ Update...</span> and choose ''Manage update sites''. Activate the ''BAR'' checkbox in the alphabetically-sorted list of update sites. Press ''OK'', then ''Apply changes''. Restart ImageJ. That's it. Enjoy BAR!

Alternatively, if you prefer to manually install and update the collection, you can do so through {{GitHub|org=tferr|repo=Scripts#ij-bar|label=GitHub}}: either by downloading individual files, or by downloading the entire repository as a [https://github.com/tferr/Scripts/archive/master.zip ZIP archive].

== Description ==
BAR files are accessible through a dedicated top-level menu subdivided in task-oriented categories. Some of the routines have a dedicated documentation page, others feature built-in help while a handful were deemed too simple to require dedicated instructions. Nevertheless, all files are described in the ''Details'' panel of the Fiji Updater and contain useful commentary at the top of the source code file.
{{Tip
| id = OpeningBAR
| tip = You can open any BAR script by holding {{key press|Shift}} while selecting its name from the <span style="border-bottom:1px dotted #ccc;">BAR▷</span> menu. For pre-compiled java plugins, the source code is available through the <span style="border-bottom:1px dotted #ccc;">About BAR...</span> command.
}}
[[ File:BARsnapshot.png|right|Overview of BAR (v1.0.0)]]
== List of BARs ==
;{{GitHub|org=tferr|repo=Scripts|path=README.md#image-annotation|label=Annotation}}<span id="Annotation"></span>
:{{GitHub|org=tferr|repo=Scripts|path=Annotation/README.md#combine-orthogonal-views|label=Combine Orthogonal Views}}
:{{GitHub|org=tferr|repo=Scripts|path=Annotation/README.md#roi-color-coder|label=ROI Color Coder}}

;{{GitHub|org=tferr|repo=Scripts|path=README.md#data-analysis|label=Data Analysis}}<span id="Data_Analysis"></span>
:{{GitHub|org=tferr|repo=Scripts|path=Data_Analysis/README.md#distribution-plotter|label=Distribution Plotter}}
:[[Find Peaks]]
:[[Sholl_Analysis#Complementary_Tools|Fit Polynomial]]
:{{GitHub|org=tferr|repo=Scripts|path=Data_Analysis/README.md#multichannel-plot-profile|label=Multichannel Plot Profile}}
:{{GitHub|org=tferr|repo=Scripts|path=Data_Analysis/README.md#plot-results|label=Plot Results}}

;{{GitHub|org=tferr|repo=Scripts|path=README.md#neuronal-morphometry|label=Morphometry}}
:[[Strahler Analysis]]<span id="Morphometry"></span>

;{{GitHub|org=tferr|repo=Scripts|path=README.md#image-segmentation|label=Segmentation}}<span id="Segmentation"></span>
:{{GitHub|org=tferr|repo=Scripts|path=Segmentation/README.md#shen-castan-edge-detector|label=Shen-Castan Edge Detector}}
:{{GitHub|org=tferr|repo=Scripts|path=Segmentation/README.md#apply-threshold-to-roi|label=Apply Threshold To ROI}}
:{{GitHub|org=tferr|repo=Scripts|path=Segmentation/README.md#clear-thresholded-pixels|label=Clear Thresholded Pixels}}
:{{GitHub|org=tferr|repo=Scripts|path=Segmentation/README.md#remove-isolated-pixels|label=Remove Isolated Pixels}}
:{{GitHub|org=tferr|repo=Scripts|path=Segmentation/README.md#threshold-from-background|label=Threshold From Background}}
:{{GitHub|org=tferr|repo=Scripts|path=Segmentation/README.md#wipe-background|label=Wipe Background}}

;{{GitHub|org=tferr|repo=Scripts|path=README.md#snippets|label=Snippets}}<span id="SnippetsList"></span>
:This submenu lists [[#Snippets|generic and reusable]] scripts to be recycled at will in personalized workflows. Any script or macro file stored in the Snippets folder with an underscore "_" in the filename will be listed here. 

;{{GitHub|org=tferr|repo=Scripts|path=README.md#tools-and-toolsets|label=Tools and Toolsets}}<span id="Tools"></span>
:{{GitHub|org=tferr|repo=Scripts|path=Tools/README.md#calibration-menu|label=Calibration Menu}}
:{{GitHub|org=tferr|repo=Scripts|path=Tools/README.md#list-folder-menu|label=List Folder Menu}}
:{{GitHub|org=tferr|repo=Scripts|path=Tools/README.md#segment-profile-tool|label=Segment Profile}}
:{{GitHub|org=tferr|repo=Scripts|path=Tools/README.md#shortcuts-menu|label=Shortcuts Menu}}
:{{GitHub|org=tferr|repo=Scripts|path=Tools/README.md#roi-manager-tools|label=ROI Manager Tools}}
:{{GitHub|org=tferr|repo=Scripts|path=Tools/README.md#toolset-creator|label=Toolset Creator}}

== Accessing BARs ==
BAR commands can be accessed in multiple ways: 1) through the <span style="border-bottom:1px dotted #ccc;">BAR▷ </span> menu, 2) the [[#Context_Menu|Context Menu]], 3) [[#Keyboard_Shortcuts|Keyboard Shortcuts]], 3) the ''Shortcuts Menu Tool'' (<span style="border-bottom:1px dotted #ccc;">BAR▷ Tool Installers▷ Install Shortcuts Menu</span>), that registers frequently used commands in the ImageJ toolbar or, as most ImageJ commands, 4) from other [[#Scripting_BARs|scripts, macros and plugins]].

=== Context Menu ===
[[File:TransposableBarMenu.png|350px|thumb|BAR features a neat mechanism that allows <span style="border-bottom:1px dotted #ccc;">BAR▷</span> commands to shuttle between the main menu bar and the image's context menu.]]
<span style="border-bottom:1px dotted #ccc;">BAR▷ </span> submenus can be appended to the image's context menu (the menu that pops up when right-clicking on the image canvas) by running <span style="border-bottom:1px dotted #ccc;">BAR▷ <i>Submenu</i>▷Move Menu (Context<>Main)</span>. The transfer is bidirectional: once in the context menu, running the same command will place the submenu back in the main menu bar.

The shuttling mechanism is not permanent, i.e., it will not be remembered across restarts. However, it is macro recordable which means it can be imposed at startup, using the ImageJ macro language. So, e.g., to install <span style="border-bottom:1px dotted #ccc;">BAR▷ Segmentation▷</span> in the context menu, one would:
# Start the Macro Recorder (<span style="border-bottom:1px dotted #ccc;"> Plugins▷ Macros▷ Record...</span>)
# Run <span style="border-bottom:1px dotted #ccc;">BAR▷ Segmentation▷ Move Menu (Context<>Main)</span>
# Open the <span style="border-bottom:1px dotted #ccc;">Edit▷ Options▷ Startup...</span> window and paste the string generated by the Macro Recorder into its text area so that ImageJ can run the command at every startup.


It may be wise to allow ImageJ enough time to register all scripts before triggering transfers to the context menu (remember: The structure of the <span style="border-bottom:1px dotted #ccc;">BAR▷ </span> menu reflects plugins stored in ''Plugins/BAR_-1.x.x.jar'' and scripts saved in the ''plugins/Scripts/BAR/'' directory). This can be achieved through the built-in macro function <tt>[http://imagej.nih.gov/ij/developer/macro/functions.html#wait wait()]</tt>. For a slow setup requiring at least 1 second (1000 milliseconds), the pasted code would look something like this:

<center>[[Image:StartupBAR.png|center|380px]]</center>


'''Notes'''
* The several <span style="border-bottom:1px dotted #ccc;">Move Menu (Context<>Main)</span> commands across <span style="border-bottom:1px dotted #ccc;"> BAR▷ </span> submenus do not use the same label and are distinguishable by extra trailing spaces. This is intentional because all ImageJ commands must have unique names.
* Any toolset loaded via the ">>" ''More Tools'' drop down menu can define its own contextual menu (as detailed in the [http://imagej.net/docs/guide/146-21.html#sec:ContextualMenu ImageJ User Guide], the contextual menu is controlled by a macro called ''Popup Menu'' that gets loaded at startup). To have BARs immediately available when such toolsets are loaded, just append the same <tt>run("Move Menu (Context<>Main)");</tt> call described above for StartupMacros.

=== Keyboard Shortcuts ===
You can use <span style="border-bottom:1px dotted #ccc;">Plugins▷ Shortcuts▷ Create Shortcut...</span> to assign hotkeys (e.g., keyboard key that you do not use frequently such as {{key press|0}}  or {{key press|F7}}) to any script registered in the <span style="border-bottom:1px dotted #ccc;">BAR▷</span> menu. These shortcuts will be listed in <span style="border-bottom:1px dotted #ccc;">Plugins▷ Shortcuts▷</span> and are remembered across restarts. 

Alternatively, keyboard shortcuts can be defined in macros that call BAR commands by placing the [[Introduction_into_Macro_Programming#Keyboard_shortcuts|shortcut key within square brackets]] at the end of the macro name. Such macros can pass specific options to BAR commands, allowing scripts to run without prompt. Example:
<source lang="java">
macro "Remove Round Structures [0]" {
    run("Wipe Background", "size=100 circ.=0.75-1.00"); // Runs Wipe_Background.ijm with the specified parameters 
}
</source>
As [[#Context_Menu|mentioned]], such macros can then be pasted into the text area of <span style="border-bottom:1px dotted #ccc;">Edit▷ Options▷ Startup...</span> so that they can be executed when ImageJ starts up.
{{Tip
| tip = Two other expedite ways of retrieving commands include: 1) Pressing {{key press|L}}, the shortcut for the [[Using_the_Command_Launcher|Command Launcher]] and 2) Pressing {{key press|9}}, the default shortcut for the ''Recent Commands'' list.
}}
== Scripting BARs ==
{{Scripting}}Although BARs can be used as standalone commands, the scripts and plugins in BAR become more useful when incorporated into other routines. Some BARs are designed to function as snippets and are installed under <span style="border-bottom:1px dotted #ccc;">BAR▷ Snippets▷</span>, a menu containing two other commands:
;Reveal Snippets:Opens ''plugins/Scripts/BAR/Snippets/'' in the file browser of the operating system
;List Snippets:Prints the contents of ''plugins/Scripts/BAR/Snippets/'' to a dedicated window. Files can then be open in the Script Editor by double-click.

=== Snippets ===
BAR contains [https://github.com/tferr/Scripts/tree/master/Snippets reusable scripts] to be used as scripting templates. You should use these files as a starting point to your own routines to be saved in  ''plugins/Scripts/BAR/Snippets/''. Below is an example, taken from {{GitHub|org=tferr|repo=Scripts|path=Snippets/Process_Folder.ijm|label=Process_Folder.ijm}},  a more customizable and modular alternative to the <span style="border-bottom:1px dotted #ccc;">Process▷ Batch▷ Macro...</span>  built-in command.
This snippet, an ImageJ macro that applies a [[How_to_apply_a_common_operation_to_a_complete_directory|common operation to a directory]], is composed of four functions:
#<code>expectedImage()</code>: Determines wich image types should be processed
#<code>getOutputDirectory()</code>: Sets a destination folder to save processed images
#<code>myRoutines()</code>: Container to hold the image processing routines
#<code>processImage()</code>: Applies <code>myRoutines()</code> to each individual image
 

Because all the tasks required to iterate through the files are handled by separated functions, only the <code>myRoutines()</code> function needs to be edited
e.g., with code generated by the Macro Recorder (<span style="border-bottom:1px dotted #ccc;">Plugins▷ Macros▷ Record...</span>). It can also call macros and scripts saved elsewhere. Example:
<source lang="java">
function myRoutines() {
    snippetsPath = getDirectory("plugins") + "Scripts" + File.separator + "BAR" + File.separator + "Snippets" + File.separator;
    runMacro(snippetsPath + "MyCoolestMacro.ijm");
    eval("python", snippetsPath + "MyCoolestScript.py");
}
</source>
Here is how the assembled snippet {{GitHub|org=tferr|repo=Scripts|path=Snippets/Process_Folder.ijm?raw=true|label=looks like}}: 
<source lang="java">
// Define which images should be processed. Only file extensions listed in this
// array will be accepted as valid by expectedImage(). Note that certain files
// may not be handled by IJ directly but by other plugins, such as Bio-Formats
var extensions = newArray(".tif", ".stk", ".oib");

// Define input directory
inputDir = getDirectory("Select a source directory");

// Define output directory
outputDir = getOutputDirectory(inputDir);

// Iterate through inputDir, ignore files with non-specified extensions and save
// a copy of processed images in outputDir
processImage(inputDir, outputDir);

showMessage("All done!");


/* This function defines all the image manipulation routines. */
function myRoutines() {
	run("Median Filter", "x=2 y=2 z=2"); // runs plugins/Scripts/BAR/Snippets/Median_Filter.py
	// <Your code here>
}

/*
 * This function retrieves the full path to a "Processed" folder placed at the
 * same location of <input_dir>. For safety, the macro is aborted if <input_dir>
 * is not accessible or if the directory cannot be created, e.g., due to lack of
 * appropriate credentials. It does nothing if such a directory already exists.
 */
function getOutputDirectory(input_dir) {
	if (!File.isDirectory(input_dir)) {
		exit("Macro aborted: The directory\n'"+ input_dir +"'\nwas not found.");
	}
	if (endsWith(input_dir, File.separator)) {
		separatorPosition = lengthOf(input_dir);
		input_dir = substring(input_dir, 0, separatorPosition-1);
	}
	new_dir = input_dir + "_Processed" + File.separator;
	if (!File.isDirectory(new_dir)) {
		File.makeDirectory(new_dir);
		if (!File.isDirectory(new_dir))
			exit("Macro aborted:\n" + new_dir + "\ncould not be created.");
	}
	return new_dir;
}

/*
 * This function applies <myRoutines()> to individual files filtered by
 * <expectedImage()>. It takes 2 arguments: <open_dir>, the full path of input
 * directory and <save_dir>, the directory where a copy of the processed images
 * will be saved. It does nothing if <open_dir> does not exist.
 */
function processImage(open_dir, save_dir) {

	// Do not display images during macro execution
	setBatchMode(true);

	// Get the array containing the names of input files and loop through it.
	// We will not perform safety checks to verify if open_dir and save_dir
	// exist since that task was already performed by getOutputDirectory()
	files = getFileList(open_dir);
	for (i=0; i<files.length; i++) {
		file_path = files[i];
		if (expectedImage(file_path)) {
			print(i+1, "Analyzing "+ file_path +"...");
			open(file_path);

			// Apply processing steps
			myRoutines();

			output_path = save_dir + "Treated_" + getTitle();
			saveAs("tiff", output_path);
			close();
		} else {
			print(i+1, "Skipping "+ file_path +"... not the right file type");
		}
	}

}

/*
 * This function returns true if the file extension of the argument <filename>
 * is present in the global variable <extensions> array. Returns false otherwise.
 */
function expectedImage(filename) {
	expected = false;
	for (i=0; i<extensions.length; i++) {
		if (endsWith(toLowerCase(filename), extensions[i])) {
			expected = true;
			break;
		}
	}
	return expected;
}
</source>
== FAQ ==
;What is the rationale behind BAR?
:The motivation behind bar is quite simple: To collect snippets of code that can be incorporated into any workflow. So rather than performing fully fledged procedures, BARs tend to produce single tasks. The advantages are two-fold: 1) Scripts are easier to understand and maintain and 2) they can be used to complement any other ImageJ add-on, let it be the simplest macro or the most sophisticated plugin.

;Will I find BAR useful?
:{{GitHub|org=tferr|repo=Scripts|path=README.md#citations|label=Probably}}. But it is likely that you will need to delve a bit into the [[#Scripting_BARs|BAR philosophy]].

;Can I contribute to BAR?
: Yes, please do! If you have some suggestions on how to improve it, do {{GitHub|org=tferr|repo=Scripts|path=README.md#help|label=let us know}}.

;Nothing happens when I run a BAR. What's going on?
:In a case of premature termination BARs tend to exit rather silently. The best way to have insights on an unexpected error is to run it directly from the [[Script Editor]]: Open the script by holding {{key press|Shift}} while selecting it from the <span style="border-bottom:1px dotted #ccc;">BAR▷</span> menu, press ''Run''  and have a look at the editors' s console, where all sort of useful messages will be printed to. Do {{GitHub|org=tferr|repo=Scripts|path=README.md#help|label=let us know}} if you have found a bug.

;How do I uninstall BAR?
:If you are using Fiji: run the [[Fiji Updater|Updater]]. Choose ''Advance Mode'' then ''Manage update sites''. Deactivate the ''BAR'' checkbox in the alphabetically-sorted list of update sites. Press ''OK'', then ''Apply changes''. All BAR files will be deleted. Note that you can install and uninstall BAR as you see fit. See [[How to follow a 3rd party update site]] for more details.
:If you have a installed BAR manually and cannot remember where files were placed have a look at this {{GitHub|org=tferr|repo=Scripts|path=BAR/README.md#bar-menu|label=installation list}}.

== License ==
These scripts are free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the [http://www.gnu.org/licenses/gpl.txt Free Software Foundation]. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

[[Category:Analysis]]
[[Category:Filtering]]
[[Category:Image annotation]]
[[Category:Scripting]]
[[Category:Segmentation]]

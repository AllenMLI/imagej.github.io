__TOC__


This page provides user documentation for the Format category of the [[CIP|CIP]] scripting package

='''create'''=
<span style="font-size:110%">'''Description'''</span><br>
this function allows to create image specifying their size, value, pixel type and name.

<span style="font-size:110%">'''Signatures'''</span><br>

&nbsp;&nbsp;&nbsp;&nbsp;<code>outputImage = cip.create( extent*, value, type, name)</code><br>
&nbsp;&nbsp;&nbsp;&nbsp;will create an image of size extent initialized with the specified value, pixel type and name. 

&nbsp;&nbsp;&nbsp;&nbsp;<code>outputImage = cip.create( inputImage*, value, type, name)</code><br>
&nbsp;&nbsp;&nbsp;&nbsp;will create an image of the same size as inputImage, initialized with the specified value, pixel type and name.

<span style="font-size:110%">'''Input'''</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;'''inputImage*''' : an image which size will be used to create an the image process<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''extent*''' : a list of scalars specifying the dimensions of the image to create<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''value''' : value a scalar which value is used to initialize the new image<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''type''' : a string in {'bit', 'uint8', 'int8', 'uint16', 'int16', 'uint32', 'int32', 'uint64', 'int64', '<u>float</u>', 'double'} defining the pixel type of the output. denomination such as 'short' or 'ushort' or 'unsignedshort' can also be used.<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''name''' : a string used for the new image name.<br>

<span style="font-size:110%">'''Output'''</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;'''outputImage''' : an image with the specified size, value, pixel type and name.

<span style="font-size:110%">'''Implementation'''</span><br>
the function wraps the ops img function in the namespace create

='''duplicate'''=

<span style="font-size:110%">'''Description'''</span><br>
The function duplicate an input image or a crop if the input image

<span style="font-size:110%">'''Signature'''</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;<code>outputImage = cip.duplicate( inputImage*, origin, size, method)</code><br>
&nbsp;&nbsp;&nbsp;&nbsp;will duplicate the input image within the specified boundary.

<span style="font-size:110%">'''Input'''</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;'''inputImage*''' : the image to duplicate<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''origin''' : a list of scalar specifying the origin of the region to duplicate. if not provided the input image origin is used<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''size''' : a list of scalar specifying the extent of the region to duplicate. if not provided the max minus the origin is choosen for each dimension<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''method''' : a string in {'deep', '<u>shallow</u>'} specifying whether the output will copy the data or have a reference to the input data.<br>

<span style="font-size:110%">'''Output'''</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;'''outputImage*''' : the duplicated image<br>

<span style="font-size:110%">'''Implementation'''</span><br>
the shallow copy is done with Views.offsetInterval in ImgLib2 and the deep copy is done with the ops function copy().rai().

<span style="font-size:110%">'''Note'''</span><br>
Currently if the origin or origin+size are out of the image the function will give an error it would be nice to specify a boundary condition and allow image frame to be extended.

='''slice'''=

<span style="font-size:110%">'''Description'''</span><br>
This function reduce input image dimensionality by duplicating a region of the same size as the input except along a selected dimension where the input is duplicated only at a particular position.

<span style="font-size:110%">'''Signature'''</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;<code>outputImage = cip.slice( inputImage*, dimensions, position, method)</code><br>
&nbsp;&nbsp;&nbsp;&nbsp;will duplicate the input at the specified position along the specified dimension(s).

<span style="font-size:110%">'''Input'''</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;'''inputImage*''' : the image to process<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''dimensions''' : a scalar or a list of scalars specifying the dimension(s) to slice<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''position''' : a scalar or list of scalars the same size as dimensions indicating the position to duplicate along the specified dimension(s).<br>
&nbsp;&nbsp;&nbsp;&nbsp;'''method''' : a string in {'deep', '<u>shallow</u>'} specifying whether the output will copy the data or have a reference to the input data.<br>

<span style="font-size:110%">'''Output'''</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;'''outputImage*''' : the duplicated image. The singleton dimension(s) are dropped so the image dimensionnality is effectively smaller than the input dimensionnality.<br>

<span style="font-size:110%">'''Implementation'''</span><br>
The shallow copy is done with Views.offsetInterval in ImgLib2 and the deep copy also apply the ops function copy().rai().

='''project'''=

='''concatenate'''=
To be implemented

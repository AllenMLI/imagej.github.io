This page is meant to provide small code snippets as a starting point for writing scripts. See also the [[Scripting comparisons]] and the dedicated pages for the [[Introduction into Macro Programming|ImageJ Macro language]], [[Javascript Scripting|Javascript]], [[Jython Scripting|Jython]], [[JRuby Scripting|JRuby]], [[Clojure Scripting|Clojure]], and [[Beanshell Scripting|Beanshell]].

For scripting python/jython, see also Albert Cardona's comprehensive [http://www.ini.uzh.ch/~acardona/fiji-tutorial/ Fiji tutorial].

'''Note:''' To copy the snippets, just double-click somewhere into the code. If Javascript is enabled, this will automatically select the complete snippet.

=== Opening an image using ImageJ ===

==== Macro ====

<source lang="java">
path = "/path/to/file";
open(path);
</source>

==== Javascript ====

<source lang="javascript">
importClass(Packages.ij.IJ);

var path = "/path/to/file";
var imp = IJ.openImage(path);
imp.show();
</source>

==== Python ====

<source lang="python">
from ij import IJ

path = "/path/to/file"
imp = IJ.openImage(path)
imp.show()
</source>

==== Ruby ====

==== Clojure ====

<source lang="lisp">
(import 'ij.IJ)

(let [path "/path/to/file"
      imp (IJ/openImage path)]
  (.show imp))
</source>

==== Beanshell ====

<source lang="java">
import ij.IJ;

path = "/path/to/file";
imp = IJ.openImage(path);
imp.show();
</source>

=== Opening an image using Bio-Formats ===
==== Macro ====

<source lang="java">
path = "/path/to/file";
run("Bio-Formats Importer", "open=" + path + "autoscale color_mode=Default view=Hyperstack stack_order=XYCZT");
</source>

==== Javascript ====

<source lang="javascript">
importClass(Packages.loci.plugins.BF);

var path = "/path/to/file";
var imps = BF.openImagePlus(path);
</source>

or, with more options:

<source lang="javascript">
importClass(Packages.loci.plugins.BF);
importClass(Packages.loci.plugins.in.ImporterOptions);
importClass(Packages.loci.common.Region);


var path = "/path/to/file";
var options = new ImporterOptions();
options.setId(path);
options.setAutoscale(true);
options.setCrop(true);
options.setCropRegion(0, new Region(x, y, w. h));
options.setColorMode(ImporterOptions.COLOR_MODE_COMPOSITE);
var imps = BF.openImagePlus(options);
</source>

* Python

* Ruby

* Clojure

* Beanshell


=== Opening, processing, and saving a sequence of files in a folder ===

==== Macro ====

<source lang="java">
dir1 = getDirectory("Choose Source Directory ");
dir2 = getDirectory("Choose Destination Directory ");
list = getFileList(dir);

for (i=0; i<list.length; i++) {
  if (endsWith(list[i], ".tif")) {
    open(dir1 + list[i]);
    // process the image
    saveAs("TIFF", dir2+list[i]);
    close();
  }
}</source>

See also the tutorial ''[[How to apply a common operation to a complete directory]]''.

* Javascript

* Python

* Ruby

* Clojure

* Beanshell

=== Wait a given amount of time, or until user presses OK ===

==== Macro ====

<source lang="java">
wait(100);
</source>

or

<source lang="java">
waitForUser();
</source>

==== Javascript ====

<source lang="javascript">
Thread.sleep(100);
</source>

or

<source lang="javascript">

</source>

* Python

* Ruby

* Clojure

* Beanshell

=== Select multiple ROIs from ROI manager and combine them ===

==== Macro ====
<source lang="java">
roiManager("select", newArray(0,2,4));
roiManager("AND");
</source>

==== Javascript ====
<source lang="javascript">
importClass(Packages.ij.plugin.frame.RoiManager);

rm = RoiManager.getInstance();
rm.setSelectedIndexes([0,2,4]);
rm.runCommand("AND");
</source>

* Python

* Ruby

* Clojure

* Beanshell

=== Unlocking an image ===

Sometimes things go wrong and all you see is "blabla.jpg is locked" when you try to process the image in some way. Then all you can do is to force-unlock the image, like so:

==== Beanshell ====
<source lang="java">
IJ.getImage().unlock();
</source>

[[Category:Scripting]]

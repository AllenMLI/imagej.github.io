This page contains a loose list of ideas for cool/useful projects that have some relation to Fiji

= Visualization =

== Plugin for Mixed-File-Format MultiVirtualHyperStack viewing window ==

The idea is to be able to display multiple virtual hyperstack-type data sets in a single multi-color composite window. I've already arranged this using multiple QuickTime Movies or AVIs. But the ideal will be to allow overlay from mixed data of any of the many BioFormats-supported file types.

The user would be able to overlay, realign and fit the separate channels in 4 dimensions, and then synchronously browse the composite view in ZT dimensions. There should be some demand for this functionality, especially with the very large data repositories being made by many labs in different file formats. Enabling automatic spatial calibration from metadata would allow measurements analysis of all channels with regions of interest addressing all of the overlaid data.

The project would consist of

* Writing a class extending VirtualStack.java class for each type of input data file series.  Currently, these exist for FileSeriesFromList and QTVirtualStack.

* Create a MultiVirtualHyperStack.java class that can organize multiple VirtualStack types into a single VirtualHyperStack displayed via a single ImagePlus and StackWindow.  The getProcessor() method in this class must be able to sort out the file coordinates of any channel/slice/frame requested from the mixed-format virtual stack and call getProcessor() from each of the specialized VirtualStack classes for each format.

* Create a control panel that allows adjustments of XYZT position for any single VirtualHyperStack that is a component of the mixed overlay window.

'''Goal:''' Plugin for Mixed-File-Format MultiVirtualHyperStack viewing window.<br />
'''Language:''' Java.<br />
'''Contact:''' Bill Mohler (wmohler@neuron.uchc.edu)<br />

== Interactively adjustable intensity/LUT curves ==

In Fiji, you can adjust the dynamic range of an image by calling ''Image>Adjust>Brightness & Contrast''.  However, this only lets you choose a linear mapping between pixel intensity and lookup table.  This project aims to provide non-linear controls, such as piecewise linear functions, gamma curves, splines, etc

= Image processing plugins =

== Colorizing algorithms ==

There are a number of publications about turning greyscale images into color images.  This project is about implementing as many of them as possible.

Note: this is an ill-posed problem, as there is not enough information in the greyscale images to identify the original color.  However, under certain circumstances, it is possible to estimate a best guess for the color for most or all pixels.

== Retinex algorithm ==

The retinex theory models the retina to estimate color disregarding illumination, i.e. it provides algorithms to correct for irregular illumination of same-colored objects.

References:

* [http://dragon.larc.nasa.gov/retinex/background/pubabs/spie2847-1996.html A Multiscale Retinex For Color Rendition and Dynamic Range Compression]

* [http://spiedl.aip.org/getabs/servlet/GetabsServlet?prog=normal&id=PSISDG007241000001724106000001&idtype=cvips&gifs=yes Fast implementation of color constancy algorithms]

== Image selector/sorter ==

Implement an algorithm that sorts a number of images by features, such as color.  Inspired by Kai-Uwe Barthel's [http://pixolu.de pixolu] project.

== A set of more powerful painting brushes and image editing tools ==

Even if Fiji aims at scientific image processing rather than beautifying photographs, it might be fun to take your holiday pictures and post-process them with the image processing software you are familiar with.

Possible tools to do so would be airbrushes (allowing for transparent colors) or brushes with a certain inertia to allow calligraphic effects, etc

== Fractal interpolation resizing (from the GIMP GSoC entry) ==

= Scripting =

== Add JMathLib (Matlab clone) support ==

Quite a few algorithms are available as proof-of-concept Matlab scripts.  While it is [ftp://ftp.alvyray.com/Acrobat/6_Pixel.pdf wrong to think of pixels as little squares], and literally all Matlab scripts to perform image processing are suffering from that shortcoming, it would be very nice nevertheless to be able to run the scripts without having to buy Matlab licenses just for that purpose.

Happily, there is a Matlab clone written in Java: [http://www.jmathlib.de/ JMathLib].  While it is apparently not a speed demon, it should be useful to add JMathLib as a new scripting language to ImageJ, and integrate it into Fiji so that Matlab scripts can be executed just like all other ImageJ scripts, too.

The project would consist of

* getting as many .m scripts for image processing as possible,

* integrating JMathLib as a script language into Fiji (using the infrastructure shared by Jython, JRuby, Clojure, Javascript and BeanShell) -- I suggest having a look at [http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=fiji.git;a=blob;f=src-plugins/JRuby/JRuby_Interpreter.java the JRuby Interpreter] for an example,

* adapting (or overriding) JMathLib's image toolbox so that it integrates seamlessly with ImageJ,

* test (and fix what does not work) as many .m scripts as possible.

'''Goal:''' Integrate JMathLib as a new scripting language.<br />
'''Language:''' Java.<br />
'''Mentor:''' Johannes Schindelin (johannes.schindelin@gmx.de)<br />

== A Javascript Recorder ==

Similar to the Macro Recorder but producing Javascript instead.  There is a Javascript recorder in ImageJ right now, but it is in no way integrated into the Fiji Script Editor.  It also appears that the Javascript recorder is not as robust as the Macro recorder yet.

== Code templates in the Script Editor ==

The Script Editor provides a fine way to script small plugins that do some simple tasks.  If you know how.

Better to start from a nice template, say, iterating over all pixels in the current image, or over all images in a user-specified directory.  To make adding new templates easy, they should be simple text files in ''Script_Editor.jar'' (the path describing where they should go in the menu).

The goal of this project is to provide a few templates (categorized by language) for common tasks.

== Adding a ''Make Jar'' command the Script Editor ==

When writing plugins, the goal is often to provide the result to some users in the end.  ImageJA already has the ''Plugins>Install Plugin...'' command, but that requires a ''.class'', ''.jar'' or a script file.  The easiest way to handle plugins is as a single ''.jar'' file which can be sent via email.

Add a ''Make Jar'' command and a new menu to the Script Editor, and maybe a "Make Jar with Source" command, too.

= Fiji development environment =

== GUI Testing framework ==

We have some rudimentary GUI testing in the ''tests'' branch but it may be better to use an established GUI framework such as [https://jemmy.dev.java.net/ Jemmy] or [http://www.marathontesting.com/Marathon.html Marathon].

The idea is, in any case, to record mouse moves and keyboard presses, optionally waiting for some GUI element (such as a window) to appear, and error out if something unexpected happens -- which most likely means that something broke and needs fixing.

'''Goal:''' Provide an easy way to record and run GUI regression tests.<br>
'''Language:''' Mainly Java<br>
'''Mentor:''' Johannes Schindelin (johannes.schindelin@gmx.de)

== Integrate ImageFlow into Fiji ==

[[Image:ImageFlow.png|700px|center]]

ImageFlow provides a graphical way to construct macros.  Every action is represented by a node which the user can connect with lines to define a workflow.

ImageFlow has its own [http://github.com/Dahie/imageflow Git repository] ([http://pacific.mpi-cbg.de/cgi-bin/gitweb.cgi?p=imageflow.git;a=summary our mirror).

The following issues need to be resolved:

* At the moment, it is not a true plugin, but wants to start its own ImageJ instance

* it only targets the macro language, while we want to target all the scripting languages supported by Fiji

* it searches for its .xml files outside of the .jar file, which makes it cumbersome to ship with the Fiji updater.

== Interface between R and ImageJ/Fiji ==

Dimiter Prodanov has done something like this, but it would be nice to have a set of implemented procedures so IJ/Fiji can run statistical procedures directly from Results tables, etc).

= Miscellaneous =

== Alpha shapes / concave hull / other Graph Theory algorithms ==

Fiji already contains a [[Delaunay_Voronoi]] plugin.  The purpose of this project is to implement more graph algorithms.  Most likely, this will involve designing a common framework for graph theory as applied to two- or higher-dimensional graphs.

== Support for storing ROIs in TIFF tag fields ==

Fiji can save images as TIFF files and ROIs into custom .roi files.  Provide a way to store the ROIs inside custom tags in the TIFF file so ROIs and images can be saved together.

== Cross platform webcam support ==

Supporting image recording from webcams might provide a cheap way to make videomicroscope/telescope units (possibly using the [[Distortion Correction]] plugin to overcome low-quality CCD chips and lenses).

One way to achieve that would be by using the [http://fmj-sf.net/ Free Java Media Framework].

== A unique/common segmentation interface ==

I have collected near 15 new histogram segmentation methods that would be better put under a single interface together with others already available.

Note: this is more or less implemented in the Auto_Threshold and Auto_Local_Threshold plugins.--[[User:Landini|Gabriel]] 14:47, 29 November 2009 (CET)

== Virtual microscope-like image viewer ==
                                                                                
== HSB/Lab painting modes ==

== Integrate Micro-Manager into Fiji ==

This project requires a bit of knowledge in compiling C++ code on Linux, MacOSX and Windows.  The idea is to make a recipe that other people can use to compile new releases of [http://www.micro-manager.org/ Micro-Manager], as well as integrate it into the Fiji project for a smooth user experience.  To ensure that support for Micro-Manager is not broken inadvertently, you shall add regression tests, too.

'''Goal:''' Provide an easy way to compile and ship Micro-Manager with Fiji.<br>
'''Language:''' Java, C++, shell<br>
'''Mentor:''' Johannes Schindelin (johannes.schindelin@gmx.de)

= Other resources =

There is a wish list on the [http://imagejdocu.tudor.lu/doku.php?id=wishlist:start&s%5b%5d=ideas ImageJ Documentation Wiki].

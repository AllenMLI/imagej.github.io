== 3-way viewer for Block-Face EM image volumes based in ImgLib cells ==

The [[Imglib]] provides a cell container, where each cell is an arbitrary n-dimensional image block potentially paged out to a file. Consider the specific case of isotropic 3d-cells stored with lossless compression. This setup would enable efficient browsing and analysis of image volumes larger than available RAM, while observing a specific 3d ROI from XY, YZ and XZ planes. These image volumes are common in [http://www.plosbiology.org/article/info:doi/10.1371/journal.pbio.0020329 Block-Face Serial Scanning Electron Microscopy], a technique now commercialized as "Gatan 3-way view EM." See this page for [http://www.gatan.com/knowhow/knowhow_15/3view.htm theory] and for [http://www.gatan.com/resources/knowhow/kh18-3view.php pictures and examples].

'''Goal:''' create a 3-way viewer for a 3d instance of an [[Imglib]]'s cell container.<br />
'''Language:''' any supported by Fiji, preferably java.<br />
'''Contact:''' [http://albert.rierol.net Albert Cardona]

== Applying machine learning to the image segmentation problem ==

The term ''image segmentation'' describes the task where objects in an image are to be outlined, so that every pixel is connected to either a named object, or background.

Segmentation is traditionally a very difficult problem, especially in the presence of variable lighting, noise, or low contrast.

Many segmentation algorithms have been implemented in Fiji to perform image segmentation, such as [[Auto Threshold]] and [[Auto Local Threshold]], but in practice, none of them might work, as they were designed with specific images in mind, and these expectations might not be met by your images.

Recently, a new class of segmentation algorithms has been emerging: segmentation by example.  These algorithms require a set of examples from which a model is calculated which can be applied to other -- similar-looking -- images.

We will consider applications for implementations that are either as generic as possible (i.e. they apply to any images), or that try to solve a very specific problem (such as segmenting neurons in serial sections imaged with electron microscopy, or with confocal imaging.)

We have several data sets of images and their corresponding manual segmentations (for training the algorithm). See for example:

* <i>Drosophila</i> larva brain imaged with ssTEM: [http://t2.ini.uzh.ch/data.html http://t2.ini.uzh.ch/data.html]
* <i>Drosophila</i> embryonic nuclei imaged with confocal microscopy.

You are welcome to use any scientifically-relevant dataset of your choice, but we will give priority to biologically-oriented data sets.

A plugin already exists for Fiji: [[Trainable Segmentation]].

'''Goal:''' Implement a number of segmentation algorithms based on machine learning.<br />
'''Language:''' Java.<br />
'''Mentor:''' [http://bioweb.cnb.csic.es/~iarganda/index_EN.html Ignacio Arganda-Carreras], [http://albert.rierol.net Albert Cardona]<br />

== Implementing algorithms for Imglib ==

The new imglib supports dimension-, storage- and data type independent image processing. This library has some algorithms built-in already but there is a strong need to generically implement more general image processing algorithms, storage strategies and data types such as:

* Interpolation (Cubic, Spline, ...)
* Entropy Filter, Average Filter, Percentile(Min, Median, Max) Filter, ...
* Memory Management for partial image loading
* Color Spaces and Color Space Conversions
* Efficient representation of non-raster images (based on 2d polygonal shapes and 3d/4d meshes)

'''Goal:''' Implement generic algorithms for image processing.<br />
'''Language:''' Java.<br />
'''Mentor:''' [http://fly.mpi-cbg.de/preibisch Stephan Preibisch], [http://fly.mpi-cbg.de/saalfeld Stephan Saalfeld], [http://www.wv.inf.tu-dresden.de/People/Pietzsch.html Tobias Pietzsch], [http://albert.rierol.net Albert Cardona]<br />

== Reparing images with missing data by using contextual information ==

Implement a simple inpainting method (i.e. restore missing/unwanted parts of the image marked by a ROI) using wavelets: apply the wavelet transform, and then, on each level, use a diffusion algorithm to deduce a smooth signal from the surrounding parts, and finally inverse-transform the wavelet to get the restored image.

Other approaches are also welcome, such as using information from adjacent serial sections in electron microscopical image volumes. See for example the [http://fly.mpi-cbg.de/?pid=10&zp=660&yp=43500.5532&xp=54214.2522&sid0=10&s0=2 large black blob at top left] which could be restored with information from the next and previous sections.

'''Goal:''' implement a plugin for interactive calligraphic effects.<br />
'''Language:''' Java.<br />
'''Mentor:''' [ Albert Cardona])<br />

The first DAIS Learnathon took place from June 18 until June 24 2017.

==Schedule==

See [https://indico.mpi-cbg.de/event/50/other-view?view=standard this page]!

==Setting up your system==

Check if you have this set up:
<ul>
  <li>Jupyter + the SciJava kernel (https://github.com/scijava/scijava-jupyter-kernel)
    <ul>
      <li>Install [https://conda.io/miniconda.html Miniconda] if you do not have installed it or Anaconda already. (We need the version for Python 3!)</li>
      <li>Your <code>.bashrc</code> or <code>.zshrc</code> will need a line like this: <code>export PATH="/Users/someforders/miniconda3/bin:$PATH"</code></li>
      <li>Make a new conda environment and install <code>jupyter</code> and <code>scijava-jupiter-kernel</code>:
        <source lang="bash">
          conda create --name scijava python=3
          source activate scijava
          conda install jupyter
          conda config --add channels conda-forge
          conda install scijava-jupyter-kernel
        </source>
      </li>
      <li>Now (and in the future) you will have to activate the environment we just created: <code>source activate scijava</code>.</li>
      <li>Deactivation would work like this: <code>source deactivate</code></li>
      <li>Get some notebook to try it out:
        <source lang="bash">
          git clone git@github.com:scijava/scijava-jupyter-kernel
          cd scijava-jupyter-kernel
          jupyter notebook
        </source>
      </li>
      <li>Execute cells by hitting <kbd>shift</kbd>+<kbd>enter</kbd>â€”enjoy!</li>
    </ul>
  </li>
  <li>Eclipse (Neon)</li>
  <li>bash / zsh</li>
  <li>GIT</li>
  <li>Maven</li>
  <li>Gitter</li>
</ul>

This can happen later:
* imglyb (forget that for now)

==Monday==

Git repos to clone:
* <code>https://github.com/imagej/tutorials</code>
* <code>https://github.com/imagej/imagej</code>
* <code>https://github.com/scijava/scijava-common</code> (optional)
* <code>https://github.com/imagej/imagej-ops</code> (optional)
* <code>https://github.com/imglib/imglib2</code> (optional)

Slides online:
* <code>https://imagej.github.io/presentations/2017-06-19-dais-learnathon/</code>

=== Ops practical ===

Write your first <code>Command</code> plugin!

* Try to do it completely on your own, using Internet resources.
* If you get stuck, click on hint links.
* If still stuck, '''''grab a teacher'''''!

Details of your assignment:

* Create a [[Git]] repository.
* Create a [[Maven]] project. (hints: [https://github.com/imagej/example-imagej-command 1], [[Building a POM|2]])
* Implement a <code>Command</code> plugin in your [[IDE]], which calculates the ''mean'' across an image. (hints: [https://nbviewer.jupyter.org/github/imagej/tutorials/blob/master/notebooks/1_-_Using_ImageJ/2_-_Introduction_to_ImageJ_Ops.ipynb 1], [https://github.com/imagej/tutorials/tree/master/maven-projects/simple-commands/src/main/java 2])
* Push to [[GitHub]] (hints: [https://help.github.com/articles/pushing-to-a-remote/ 1], [https://git-man-page-generator.lokaltog.net/ 2]).

If you get that far, YOU WIN. {{Person|Jug}} has a reward for you.

Extra credit:

* Grab fun snippets from the "Introduction to Ops" Jupyter notebook.
* Integrate them into your command, to make it do fancier things.

=== How to create a new git repository ===
This is, from my (Hanslovsky) point of view, the best way to create a new git repository. All commands should run on Linux, OSX, and the git bash shell on Windows.
* Create a new repository on github.com (choose not to add a README.md or .gitignore), e.g. with name 'awesome-learnathon'
* On your local machine create a directory where you would like to have the repository and cd into it: <code>mkdir 'awesome-learnathon' && cd 'awesome-learnathon'</code>
* Initalize local git repository: <code>git init</code>
* Add remote repository as origin: <code>git remote add -f origin git@github.com:user/awesome-learnathon</code> or <code>git remote add -f origin https://github.com/user/awesome-learnathon</code> if you did not set up git through ssh. The <code>-f</code> parameter fetches from the remote repository
* Create a first file, e.g. <code>pom.xml</code>, and stage it for a commit: <code>git add pom.xml</code>
* Commit the stage files with commit message: <code>git commit -m 'Add pom.xml'</code>
* Push your commit: <code>git push --set-upstream origin master</code> (you can ommit <code>--set-upstream origin master</code> in future commits)

==Tuesday==

Git repos to clone:
* Morning + early afternoon sessions:
** <code>https://github.com/imglib/imglib2-introductory-workshop</code> ([https://github.com/imglib/imglib2-introductory-workshop/blob/master/Introduction-ImgLib2.pdf slides] are in the repository)
** (bonus) LabelingPlus: https://github.com/TrNdy/Indago/blob/master/src/main/java/com/indago/data/segmentation/LabelingPlus.java
* Afternoon session:
** The pull-request example: [https://github.com/Meyenhofer/ij-command-2/issues/ to solve]
** <code>https://github.com/mpicbg-scicomp/ij2course-images</code>
** <code>https://github.com/mpicbg-scicomp/ij2course-regions</code>
** <code>https://github.com/mpicbg-scicomp/ij2course-tables</code>

Optional practical for you to do on your own:
* <code>https://github.com/imglib/imglib2-advanced-workshop</code>

==Wednesday==

Git repos to clone:
* Morning Session on ClearVolume and BDV VisTools:
** [[Media:Jug_BigDataAnd3dViz.pdf|Slides]]
** <code>https://github.com/fjug/TutorialClearVolume.git</code>
** <code>https://github.com/fjug/TutorialBigDataViewer.git</code>
** <code>https://github.com/imglib/imglib2-cache-examples.git</code> (optional but awesome)
** <code>https://github.com/bigdataviewer/bigdataviewer-vistools.git</code>
* Afternoon Ops Session:
** <code>https://github.com/imagej/tutorials</code>
*** Import the <code>maven-projects/using-ops</code> into your IDE
** [https://nbviewer.jupyter.org/github/imagej/tutorials/blob/master/notebooks/1_-_Using_ImageJ/2_-_Introduction_to_ImageJ_Ops.ipynb Introduction to ImageJ Ops] Jupyter notebook
** [https://nbviewer.jupyter.org/github/imagej/tutorials/blob/master/notebooks/2_-_Extending_ImageJ/4_-_Writing_Op_plugins.ipynb Extending ImageJ: Writing Ops] Jupyter notebook
* Afternoon Session on KNIME:
** Download & Install KNIME (app with all extensions) 
*** https://www.knime.org/downloads/overview?quicktabs_knimed=1#quicktabs-knimed
** Start KNIME and install all updates
** How to install ImageJ Integration in KNIME: https://tech.knime.org/community/imagej
** Set heap-size of KNIME: https://tech.knime.org/faq#q4_2
** <code>https://github.com/knime-ip/knip-sdk-setup</code>
*** See installation instructions in [https://github.com/knime-ip/knip-sdk-setup/blob/master/README.md README.md]
** <code>https://github.com/knime-ip/knip-imagej2</code>
*** See installation instructions in [https://github.com/knime-ip/knip-imagej2/blob/master/README.md README.md]
** <code>https://github.com/knime-ip/knip-course</code>
*** See instructions for exercises in [https://github.com/knime-ip/knip-course/blob/master/README.md README.md]

* Preparation for the imglyb session on Thursday:
** Please follow the [https://gist.github.com/hanslovsky/508fb1ff7668f1e53bb769e6dccc789c installation instructions] and install imglyb through conda.
** If you are a Windows user, please pair up with a OSX or Linux user, or download the [https://www.dropbox.com/s/gxqqzbxaff6uowe/Ubuntu%2017.04%20-%20imglyb.ova VirtualBox Ubuntu appliance]. We also have (at least) one MacBook that is available for use during that session. First come first serve!

==Thursday==
===imglib2-algorithm===
We will look at the examples in the ''algorithm.morphology'' package of the ''imglib2-advanced-workshop'' to get familiar with the use of existing algorithms in ''imglib2-algorithm''.
* Git repos to clone:
** <code>https://github.com/imglib/imglib2-advanced-workshop</code>

===imglyb===
The jupyter notebooks in the ''imglyb-learnathon'' repository cover basic and advanced use of the ''imglyb'' compatibility layer for ''imglib2'' and ''numpy''. Please follow the instructions below to make sure your machine is prepared for the tutorial. Clone the ''imagey'' repository to access CPython through ''ImageJ''.
* Instructions:
** <code>https://gist.github.com/hanslovsky/508fb1ff7668f1e53bb769e6dccc789c</code>

* Git repos to clone:
** <code>https://github.com/imglib/imglib2-unsafe</code>
** <code>https://github.com/hanslovsky/imglib2-imglyb</code>
** <code>https://github.com/hanslovsky/imglyb-examples</code>
** <code>https://github.com/hanslovsky/imagey</code>
** <code>https://github.com/hanslovsky/imglyb-learnathon</code>

==Friday==

Git repos to clone:
* Advanced ImgLib2 workshop: <code>https://github.com/imglib/imglib2-advanced-workshop</code>
* ImgLib2 caches: <code>https://github.com/imglib/imglib2-cache-examples</code>
* Write your own SciJava plugin types: <code>https://github.com/mpicbg-scicomp/ij2course-scijava-plugin-mechanism</code>

Awesome stuff that happened too:
* Discussion time
** The future of the [http://forum.imagej.net imagej forum]...
** The problem of missing funding...
** Stable releases (coming in December).
** A system to track what a workflow should cite...
* Headless with Fiji (http://imagej.net/Batch) (ignoring legacy problems)
* ImgLib2 ROIs (https://github.com/imglib/imglib2-roi/tree/shape-rois), a preview to what will/might come soon!

==Saturday==

==2011-03-16==
Tobias and Saalfeld found it a great idea to create this discussion page that, if ever possible, will be filled with the daily conceptual discussions and results.  That way, all interested people can contribute and keep track on what we're trying to tackle next.

===We discussed the View concept:===
Summary is that <code>View<T></code> would be an interface that can return its target <code>T</code>, the data it is generated from:

<source lang="java">
public interface View<T> {
    public T getTarget();
}
</source>

A <code>View</code> is an <code>[&hellip;]Accessible</code> that provides possibly transformed access to a subset of this target data. 

Since we could not see any reasonable application for the bare ''View'' interface, we will not implement it but use it in informal speech about virtualized access. We will also use ''Target'' to refer to the underlying data.

Examples are <code>IterableIntervalSubset</code>, arbitrary Neighborhoods, <code>RandomAccessibleView</code> (formerly called View), <code>RealRandomAccessibleView</code>, <code>TransformedRandomAccessibleView</code>,
<code>StructuredElement</code>,
<code>HyperShpere</code>,
<code>SuperInterval</code>&hellip;


===We discussed the View concept (again) and Transforms:===
We agreed that for Views that give transformed access it is more natural
to specify the transform with respect to the underlying data.
That is, the transform is applied to a coordinate in the data system to
obtain a coordinate in the view system.

In matrix notation, a transform would look like
'''y = Tx'''.
Here, it is natural to refer to '''x''' as the ''source''
vector and to '''y''' as the ''target'' vector.

Applied to Views, we will therefore completely reverse our previous opinion and
refer to the underlying data as the ''Source''.

The <code>View<T></code> interface would look like
<source lang="java">
public interface View<T> {
    public T getSource();
}
</source>


[[Category:ImgLib]]

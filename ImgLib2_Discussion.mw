==2011-03-16==
Tobias and Saalfeld found it a great idea to create this discussion page that, if ever possible, will be filled with the daily conceptual discussions and results.  That way, all interested people can contribute and keep track on what we're trying to tackle next.

===We discussed the View concept:===
Summary is that <code>View<T></code> would be an interface that can return its target <code>T</code>, the data it is generated from:

<source lang="java">
public interface View<T> {
    public T getTarget();
}
</source>

A <code>View</code> is an <code>[&hellip;]Accessible</code> that provides possibly transformed access to a subset of this target data. 

Since we could not see any reasonable application for the bare ''View'' interface, we will not implement it but use it in informal speech about virtualized access. We will also use ''Target'' to refer to the underlying data.

Examples are <code>IterableIntervalSubset</code>, arbitrary Neighborhoods, <code>RandomAccessibleView</code> (formerly called View), <code>RealRandomAccessibleView</code>, <code>TransformedRandomAccessibleView</code>,
<code>StructuredElement</code>,
<code>HyperShpere</code>,
<code>SuperInterval</code>&hellip;


===We discussed the View concept (again) and Transforms:===
We agreed that for Views that give transformed access it is more natural
to specify the transform with respect to the underlying data.
That is, the transform is applied to a coordinate in the data system to
obtain a coordinate in the view system.

In matrix notation, a transform would look like
'''y = Tx'''.
Here, it is natural to refer to '''x''' as the ''source''
vector and to '''y''' as the ''target'' vector.

Applied to Views, we will therefore completely reverse our previous opinion and
refer to the underlying data as the ''Source''.

The <code>View<T></code> interface would look like
<source lang="java">
public interface View<T> {
    public T getSource();
}
</source>

For Transforms, we will adapt and simplify the <code>CoordinateTransform</code> and related interfaces from Fiji's mpicbg submodule.  There will be an integer and a real version as for <code>Positionable</code> and <code>Localizable</code>.  <code>Transform</code> and <code>RealTransform</code> can specify the number of dimensions of its source and target domain.  They look like
<source lang="java">
public interface Transform {
    public int numSourceDimensions();
    public int numTargetDimensions();
    apply(long[] source, long[] target);
    apply(Localizable source, Positionable target);
}

public interface RealTransform {
    public int numSourceDimensions();
    public int numTargetDimensions();
    apply(double[] source, double[] target);
    apply(RealLocalizable source, RealPositionable target);
}
</source>
The apply methods transfer source coordinates into target coordinates.

There will be an invertible version for each of these interfaces
<source lang="java">
public interface IvertibleTransform extends Transform {
    applyInverse(long[] source, long[] target);
    applyInverse(Positionable source, Localizable target);
    InvertibleTransform inverse();
}

public interface IvertibleRealTransform extends RealTransform {
    applyInverse(double[] source, source[] target);
    applyInverse(RealPositionable source, RealLocalizable target);
    InvertibleRealTransform inverse();
}
</source>
Note that <code>target</code> is transferred into <code>source</code> in that case.

We have extensively discussed the fact that for rendering a mapped image, an inverse transformation is required whereas one prefers to define transformations in the forward manner.  Nevertheless, a view (renderer) should use the forward defined instance of a <code>Transform</code> to create its result with changes applied to that transform having a direct effect on the result (no creation of a fresh `inverse').  Other than in mpicbg, we will achieve this by implementing Renderers for forward transformations (those transformations that can be specified in one direction only will be defined as forward transformations).  For invertible transformations, the Renderer will use a final <code>Inverter</code> that is a forward transformations that uses the inverse apply methods of an invertible transformation for its apply method.

===How to proceed with the imglib2 namespace?===

We think that it would be a great idea to be able to run both imglib and imglib2 together.  This would relieve us from the need to port all the legacy imglib code into imglib2.  Also, a shorter package hierarchy would be nice.  With org.imglib2, we would match the Maven convention and the URL is still not registered...


[[Category:ImgLib]]

Examples in [[Jython Scripting|Jython]].

Open the "Plugins - Scripting - Jython Interpreter" (see [[Scripting Help]]) and make sure there is a TrakEM2 project open, with a display open. Then type or paste the examples below.

= Introduction to scripting TrakEM2 =

Some basics:

*The canvas into which images are dragged and visualized is part of a [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Display.html Display] object. The latter has methods to access its [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Selection.html Selection], as well as the [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Layer.html Layer] and [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/LayerSet.html LayerSet] that the Display is viewing.
*The Layer contains 2D objects like [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Patch.html Patch] (each Patch wraps an image) and [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/DLabel.html DLabel] (floating text).
*The LayerSet contains 3D objects like [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/AreaList.html AreaList], [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Pipe.html Pipe], [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Polyline.html Polyline], [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Ball.html Ball], [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Dissector.html Dissector], [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Treeline.html Treeline] and [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Stack.html Stack] (the latter wraps an ij.ImagePlus that contains an ij.ImageStack).

Both Layer and LayerSet are in a way containers. The LayerSet contains as well a list of Layer. The Display merely views the data in a LayerSet, one Layer at a time.

See a [http://www.ini.uzh.ch/~acardona/img/trakem2_datastructure_diagram.svg TrakEM2 class diagram] for a complete list.


=== Get the instance of a selected image ===

<source lang="python">
>>> p = Display.getFront().getActive()
>>> print p
090504_0314_ex0768.mrc z=0.0 #67398
</source>


=== Obtain the ImagePlus of a selected image ===

<source lang="python">
>>> p = Display.getFront().getActive()
>>> imp = p.getImagePlus()
>>> print imp.width, imp.height
2048 2048
</source>


=== Access the Layer and Selection of a Display ===

The 'front' is the last activated display window. If there's only one display window, then that is 'front'.
To access the front display, we call static function <i>getFront()</i> in namespace <i>[http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Display.html Display]</i>:

<source lang="python">
>>> front = Display.getFront()
>>> layer = front.getLayer()
>>> layer_set = front.getLayerSet()
>>> sel = front.getSelection()
>>> print sel.getSelected().size()
10
>>> print sel.isEmpty()
0
</source>

In Jython, 1 is True and 0 is False

The most interesting data members of a [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Display.html Display], as seen above, are mainly the  [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Layer.html Layer] and the [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Selection.html Selection].

=== Lock all selected objects ===
<source lang="python">
for d in Display.getFront().getSelected():
  d.setLocked(True)
</source>

=== Obtain a collection of selected images ===

The [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Selection.html Selection] object of a [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Display.html Display] can return a number of collections with any selected objects in it, for example of type [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Patch.html Patch] (those that wrap an image). All you need to do is to call <i>[http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Selection.html#getSelected(java.lang.Class) getSelected]</i> with the name of the class to filter for:

<source lang="python">
for d in Display.getFront().getSelected(Patch):
  print d.title
</source>


=== Setting and getting member objects in jython ===

In Jython as in Python, member objects have automatically <i>get</> and <i>set</i> functions.

For example, altough a [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Displayable.html Displayable] has a private <i>String title</i> member, this is valid python code for getting and setting the title of a Displayable like a Patch:

<source lang="python">
>>> p = Display.getFront().getActive()
>>> print p.title
090504_0314_ex0768.mrc
</source>

Above, a Patch takes as title the name of the file containing the ImagePlus, by default. Let's change the title to something else:

<source lang="python">
>>> p = Display.getFront().getActive()
>>> p.title = "A new name for this Patch"
>>> print p.title
A new name for this Patch
</source>


=== The properties of a Displayable: title, color, visibility, locked, alpha, affine transform, dimensions and bounds ===

Let's set a few values:

<source lang="python">
>>> p = Display.getFront().getActive()
>>> p.title = "Test image"
>>> p.alpha = 0.4
>>> p.visible = True
>>> p.locked = False
>>> from java.awt import Color
>>> p.color = Color.blue
</source>

Tell all displays to update the canvas, so we see the changes:

<source lang="python">
>>> Display.repaint()
</source>


Let's read a few values:

<source lang="python">
>>> p.getAffineTransform()
AffineTransform[[1.0, 0.0, 474.0], [0.0, 1.0, 567.0]]
>>> print p.getBoundingBox()
java.awt.Rectangle[x=474,y=567,width=2048,height=2048]
>>> 
</source>e)

The affine transform cannot be set, because it's a final member. But itself the value may be edited via <i>setAffineTransform</i>:

<source lang="python">
>>> from java.awt.geom import AffineTransform
>>> aff = AffineTransform()
>>> aff.scale(2.0, 2.0)
>>> p.setAffineTransform(aff)
</source>

Be careful: java's AffineTranform does concatenations and not pre-concatenations (order matters in matrix multiplication).

In most occasions, what you want can be accomplished with <i>[http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Displayable.html#preTransform(java.awt.geom.AffineTransform,%20boolean) preTransform]</i>, such as translating an image:

<source lang="python">
>>> from java.awt.geom import AffineTransform
>>> aff = AffineTransform()
>>> aff.translate(300, -400)
>>> p.preTransform(aff, True)
</source>

More convenient are the methods <i>scale</i>, <i>translate</i>, <i>rotate</i> and particularly <i>preTransform</i>, for the manipulation of a [http://www.ini.uzh.ch/~acardona/api/ini/trakem2/display/Displayable.html Displayable]'s affine transform (see [http://java.sun.com/javase/6/docs/api/java/awt/geom/AffineTransform.html AffineTransform]) and that of its linked Displayables (any transform propagates to the linked ones).

= See also =

*TrakEM2 [http://www.ini.uzh.ch/~acardona/howto.html how to], with java code examples.
*TrakEM2 [[TrakEM2 tutorials|video tutorials]].

[[Category:Scripting]]

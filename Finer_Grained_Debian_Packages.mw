'''FIXME: these instructions aren't complete yet...'''

At the March 2010 Hackathon, I made lots of changes to the old package building machinery.  There were a number of problems with the old system, including:

* Building one monolithic package; in particular, this meant that many Free Software licenses mixed up in the one package.
* Bundling too many components that were already available in Debian main / Ubuntu.
* There were some non-free components included in the monolithic package.
* Each time I made a new release, I had to rebase the previous release branch.  This was tedious, sometimes difficult and there's no particular reason not to build straight from master.

Since then, one our Google Summer of Code students, Yap Chin Kiet, and Johannes Schindelin worked on inferring dependencies between the jar and class files created in Fiji for the Fiji Updater, so we can reuse this code to infer package based dependencies.

The improved system (which is half complete at the moment) should work in the following way: (I'll create a wrapper script to do all of this when I'm finished - note that once this process is complete, the generated Debian source packages should build everything without the additional steps.)

=== clone a new copy of fiji.git ===

(This may strike you as not a very git-ish first step, but the build process rather brutally removes submodules and ignored files, and I don't want people to risk losing work as a result of following these instructions.)

Clone the respository afresh with:

    git clone git://pacific.mpi-cbg.de/fiji.git

... and then initialize and update the following submodules:

    git submodule update --init AutoComplete \
            ImageJA \
            RSyntaxTextArea \
            TrakEM2 \
            VIB \
            bio-formats \
            clojure-contrib \
            ij-plugins \
            imglib \
            live-helper \
            mpicbg \
            tcljava

=== Check that git  ===

This shouldn't be necessary if you've just cloned a new copy, as above, but in other situations it might be useful:

  debian/update-debian.py --check-git-clean

=== Remove non-free and unneeded components ===

Run the following command:

   debian/update-debian.py  --clean

This should remove the non-free and unnecessary components.

=== Build the source tree (to generate the control file from) ===

Unfortunately, in order to accurately generate the Debian package-based dependencies from the file-based dependencies in [http://pacific.mpi-cbg.de/update/db.xml.gz] we need to build the complete tree in order to find all the generate files which need to be assigned to packages.  So, build Fiji with the command that debian/rules will use with:

  debian/build-command

(We need to use a modified build command since we need to override some of the CLASSPATHs defined in Fakefile which refer to bundled jars which are now in dependent packages.)

=== Generate the debian/control file ===

'''(FIXME: not finished)''' create a debian/control file with the right dependencies and package definitions:

  debian/update-debian.py --generate-complete-control

=== Clean the build tree ===

  debian/update-debian.py --clean

=== Build the debian packages ===

   dpkg-buildpackage -rfakeroot 

If you're not able to sign the packages, add the parameters "-us -uc".  If you don't want to generate the source package (because dpkg-source takes *ages* to run with dpkg-dev prior to 1.15.5.

The debian/rules Makefile which is called by that command will '''(FIXME: not finished)''' call debian/update-debian.py --install to copy parts of the built tree to the right locations.

{{Scripting}}
[[Scripting|ImageJ scripts]] are designed to operate independently of User Interfaceâ€”including "headlessly", with '''no''' user interface. This is made easy with the use of [[Script_parameters|script parameters]].

To start ImageJ in the ImageJ2 headless mode, run (with the launcher appropriate for your system substituted):

<source>
./ImageJ-linux64 --ij2 --headless
</source>

By default, when ImageJ runs headlessly it acts like a one-off program: it will only perform the requested operations, then quit. To run a script headlessly, use:

<source>
./ImageJ-linux64 --ij2 --headless --run path/to/script ["script parameters"]
</source>

== Basic run ==

Let's say we the following Python script saved in a file, <code>hello.py</code>:

<source lang="python">
# @String name

print('Hello ' + name);
</source>

we could run this script with the command:

<source>
./ImageJ-linux64 --ij2 --headless --run hello.py "Mr Kraken"
</source>

== Multiple parameters ==

If your script has more than one parameter:

<source lang="python">
# @String name1
# @String name2

print('Hello ' + name1 + " and " + name2);
</source>

then these are filled, '''in order of declaration''', by using a comma-separated list of parameters e.g., :

<source>
./ImageJ-linux64 --ij2 --headless --run hello.py "Mr,Mrs Kraken"
</source>

== Mapping parameters ==

Because parameters are filled in order of declaration, all the "user" parameters should be declared first (that is, the actual inputs you want to change from run to run). Sometimes you may need to run a script where the "user" parameters are declared ''after'' "system" parameters:

<source lang="python">
# @DatasetIOService data
# @String imagePath

img = data.open(imagePath)
print(img);
</source>

In this case, we have to assign values to each parameter with a "name=value" pair notation:

<source>
./ImageJ-linux64 --ij2 --headless --run test.py "imagePath=/home/hinerm/Fiji.app/samples/blobs.gif"
</source>

Multiple such parameters can still be combined when separated with commas.
